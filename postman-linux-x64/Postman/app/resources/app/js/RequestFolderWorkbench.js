(self.webpackChunk_postman_app_renderer=self.webpackChunk_postman_app_renderer||[]).push([[59],{"../../node_modules/node-polyfill-webpack-plugin/node_modules/timers-browserify/main.js":function(e,n,t){var r=void 0!==t.g&&t.g||"undefined"!=typeof self&&self||window,a=Function.prototype.apply;function i(e,n){this._id=e,this._clearFn=n}n.setTimeout=function(){return new i(a.call(setTimeout,r,arguments),clearTimeout)},n.setInterval=function(){return new i(a.call(setInterval,r,arguments),clearInterval)},n.clearTimeout=n.clearInterval=function(e){e&&e.close()},i.prototype.unref=i.prototype.ref=function(){},i.prototype.close=function(){this._clearFn.call(r,this._id)},n.enroll=function(e,n){clearTimeout(e._idleTimeoutId),e._idleTimeout=n},n.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},n._unrefActive=n.active=function(e){clearTimeout(e._idleTimeoutId);var n=e._idleTimeout;n>=0&&(e._idleTimeoutId=setTimeout((function(){e._onTimeout&&e._onTimeout()}),n))},t("../../node_modules/setimmediate/setImmediate.js"),n.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t.g&&t.g.setImmediate||this&&this.setImmediate,n.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t.g&&t.g.clearImmediate||this&&this.clearImmediate},"../../node_modules/setimmediate/setImmediate.js":function(e,n,t){var r=t("../../node_modules/process/browser.js");!function(e,n){"use strict";if(!e.setImmediate){var t,a,i,s,o,l=1,c={},u=!1,d=e.document,h=Object.getPrototypeOf&&Object.getPrototypeOf(e);h=h&&h.setTimeout?h:e,"[object process]"==={}.toString.call(e.process)?t=function(e){r.nextTick((function(){p(e)}))}:!function(){if(e.postMessage&&!e.importScripts){var n=!0,t=e.onmessage;return e.onmessage=function(){n=!1},e.postMessage("","*"),e.onmessage=t,n}}()?e.MessageChannel?((i=new MessageChannel).port1.onmessage=function(e){p(e.data)},t=function(e){i.port2.postMessage(e)}):d&&"onreadystatechange"in d.createElement("script")?(a=d.documentElement,t=function(e){var n=d.createElement("script");n.onreadystatechange=function(){p(e),n.onreadystatechange=null,a.removeChild(n),n=null},a.appendChild(n)}):t=function(e){setTimeout(p,0,e)}:(s="setImmediate$"+Math.random()+"$",o=function(n){n.source===e&&"string"==typeof n.data&&0===n.data.indexOf(s)&&p(+n.data.slice(s.length))},e.addEventListener?e.addEventListener("message",o,!1):e.attachEvent("onmessage",o),t=function(n){e.postMessage(s+n,"*")}),h.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var n=new Array(arguments.length-1),r=0;r<n.length;r++)n[r]=arguments[r+1];var a={callback:e,args:n};return c[l]=a,t(l),l++},h.clearImmediate=m}function m(e){delete c[e]}function p(e){if(u)setTimeout(p,0,e);else{var n=c[e];if(n){u=!0;try{!function(e){var n=e.callback,t=e.args;switch(t.length){case 0:n();break;case 1:n(t[0]);break;case 2:n(t[0],t[1]);break;case 3:n(t[0],t[1],t[2]);break;default:n.apply(void 0,t)}}(n)}finally{m(e),u=!1}}}}}("undefined"==typeof self?void 0===t.g?this:t.g:self)},"./node_modules/@postman/script-examples/index.js":function(e,n,t){var r=t("./node_modules/@postman/script-examples/db.json"),a=["prerequest","test"];e.exports={getExamples:function(e){if(!e||!a.includes(e))throw new Error("Invalid event type");return r.reduce((function(n,t){return t.validity&&t.validity.includes(e)&&n.push(function(e){return{name:e.name,description:e.description,code:e.code}}(t)),n}),[])}}},"./api-dev/components/api-version/context-bar/api-source-control/APISourceControlContextBarView/APISourceControlContextBarIcon.js":function(e,n,t){"use strict";t.r(n);var r=t("../../node_modules/react/index.js"),a=t("./node_modules/prop-types/index.js"),i=t.n(a),s=t("../../node_modules/mobx-react/dist/mobx-react.module.js"),o=t("./node_modules/classnames/index.js"),l=t.n(o),c=t("./api-dev/navigation/constants.js"),u=t("../../node_modules/@postman/aether-icons/esmLib/src/Icon/Icon.js"),d=t("./api-dev/stores/api-repository/PollingRemoteHeadDetailsStore.js"),h=t("./js/stores/StoreManager.js"),m=t("./js/services/NavigationService.js"),p=t("./api-dev/interfaces/APIInterface.js"),f=t("./node_modules/lodash/lodash.js");const b="contextBar",g=r.forwardRef((({handleShowTooltip:e,handleHideTooltip:n,apiRepositoryStore:t},a)=>{var i;const s=f.get(t,"sourceControlStore"),o=f.get(s,"shouldShowContextBarIconIndicator",!1),g=m.default.getCurrentURL(),y=null===m.default||void 0===m.default||null===(i=m.default.getCurrentRouteParams())||void 0===i?void 0:i.apiId;return(0,r.useEffect)((()=>{const e=(0,h.resolveStoreInstance)(d.default);return async function(){const n=y&&await(0,p.isAPIGitLinked)(y),t=y&&await(0,p.hasAPIMigrated)(y);y&&n&&t&&e.startPolling(y,b)}(),()=>{e.stopPolling(y,b)}}),[g]),r.createElement("div",{className:`tabs__${c.SOURCE_CONTROL_NAV} icon-container`,ref:a,onMouseEnter:e,onMouseLeave:n},r.createElement(u.default,{name:"icon-descriptive-branch-stroke",className:(v=o,l()({"api-source-control__context-bar-icon--unread":v}))}));var v}));g.propTypes={handleShowTooltip:i().func.isRequired,handleHideTooltip:i().func.isRequired,apiRepositoryStore:i().object.isRequired},n.default=(0,s.observer)(g)},"./api-dev/components/api-version/context-bar/api-source-control/APISourceControlContextBarView/SourceControlUtils.js":function(e,n,t){"use strict";t.r(n),t.d(n,{API_SOURCE_CONTROL:function(){return s},getRepoLinkedAPI:function(){return o},getRepoStoreForGitLinkedAPI:function(){return l}});var r=t("./js/stores/StoreManager.js"),a=t("./api-dev/stores/APIListStore.js"),i=t("./node_modules/lodash/lodash.js");const s="api-version-source-control";function o(e,n){if(!e||!n)return null;const t=(0,r.resolveStoreInstance)(a.default);if(!t.isLoaded)return null;let s=null;for(const r of t.values){const t=r.childEntities.values[0],a=i.get(t,"apiRepositoryStore"),o=i.get(a,"apiVersionRepositoryInterface");if(i.get(o,"isAvailable")&&i.get(o,"remoteGitConfigured")&&"collections"===n){const n=i.get(a,"entityHandlers.collections.collectionFileIdAgainstPath");if(!i.isEmpty(n)&&n.has(e)){s=a;break}}}return s}function l(e){if(!e)return null;const n=(0,r.resolveStoreInstance)(a.default);if(!n.isLoaded)return null;const t=n.find(e),s=i.head(t.childEntities.values).id,o=t.childEntities.find(s),l=i.get(o,"apiRepositoryStore");return i.get(l,"apiVersionRepositoryInterface.remoteGitConfigured")?l:null}},"./api-dev/stores/api-repository/PollingRemoteHeadDetailsStore.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return g}});var r,a,i,s,o,l=t("./js/stores/StoreManager.js"),c=t("./api-dev/stores/APIListStore.js"),u=t("../../node_modules/node-polyfill-webpack-plugin/node_modules/timers-browserify/main.js"),d=t("./onboarding/src/common/LaunchDarkly.js"),h=t("../../node_modules/mobx/lib/mobx.module.js"),m=t("./node_modules/lodash/lodash.js");function p(e,n,t,r){t&&Object.defineProperty(e,n,{enumerable:t.enumerable,configurable:t.configurable,writable:t.writable,value:t.initializer?t.initializer.call(r):void 0})}function f(e,n,t,r,a){var i={};return Object.keys(r).forEach((function(e){i[e]=r[e]})),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=t.slice().reverse().reduce((function(t,r){return r(e,n,t)||t}),i),a&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(a):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(e,n,i),i=null),i}const b="store";let g=(a=f((r=class{constructor(){p(this,"activePollingAPI",a,this),p(this,"timerObject",i,this),p(this,"apiSourceMap",s,this),p(this,"startPollingForAPI",o,this)}setActivePollingAPI(e){this.activePollingAPI=e}setTimerObject(e){this.timerObject=e}setSource(e,n){const t=this.apiSourceMap[e]||[];m.includes(t,n)||(t.push(n),this.apiSourceMap[e]=t)}clearSource(e,n){const t=this.apiSourceMap[e]||[];-1!==t.indexOf(n)&&(this.apiSourceMap[e]=m.filter(t,(e=>e!==n)))}clearAPIAndSources(e){delete this.apiSourceMap[e]}clear(){this.setTimerObject(null),this.setActivePollingAPI(null)}stopPolling(e,n){if(e&&n)if(this.activePollingAPI===e){const t=this.apiSourceMap[e];n===b||m.isEmpty(t)||1===m.size(t)&&t[0]===n?((0,u.clearInterval)(this.timerObject),this.clear(),this.clearAPIAndSources(e),pm.logger.info(`APIPollingStore~stopPolling: Stopped Polling for ${e}`)):this.clearSource(e,n)}else this.clearSource(e,n)}startPolling(e,n){e&&n&&(this.setSource(e,n),e!==this.activePollingAPI&&this.startPollingForAPI(e,n))}}).prototype,"activePollingAPI",[h.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),i=f(r.prototype,"timerObject",[h.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),s=f(r.prototype,"apiSourceMap",[h.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return{}}}),f(r.prototype,"setActivePollingAPI",[h.action],Object.getOwnPropertyDescriptor(r.prototype,"setActivePollingAPI"),r.prototype),f(r.prototype,"setTimerObject",[h.action],Object.getOwnPropertyDescriptor(r.prototype,"setTimerObject"),r.prototype),f(r.prototype,"setSource",[h.action],Object.getOwnPropertyDescriptor(r.prototype,"setSource"),r.prototype),f(r.prototype,"clearSource",[h.action],Object.getOwnPropertyDescriptor(r.prototype,"clearSource"),r.prototype),f(r.prototype,"clearAPIAndSources",[h.action],Object.getOwnPropertyDescriptor(r.prototype,"clearAPIAndSources"),r.prototype),f(r.prototype,"clear",[h.action],Object.getOwnPropertyDescriptor(r.prototype,"clear"),r.prototype),f(r.prototype,"stopPolling",[h.action],Object.getOwnPropertyDescriptor(r.prototype,"stopPolling"),r.prototype),o=f(r.prototype,"startPollingForAPI",[h.action],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return m.debounce((e=>{this.activePollingAPI&&this.stopPolling(this.activePollingAPI,b);const n=d.launchDarkly.getFlag("api-git-sync-status-pull-delay",0);if(0!==n){var t;this.setActivePollingAPI(e);const r=(0,l.resolveStoreInstance)(c.default).find(this.activePollingAPI),a=null===(t=m.head(r.childEntities.values))||void 0===t?void 0:t.id,i=r.childEntities.find(a);this.apiRepositoryStore=m.get(i,"apiRepositoryStore"),pm.logger.info(`APIPollingStore~startPolling: Started Polling for ${e}`),this.apiRepositoryStore.sourceControlStore.init();const s=(0,u.setInterval)((()=>{m.isFunction(this.apiRepositoryStore.sourceControlStore.getLatestRemoteHead)&&this.apiRepositoryStore.sourceControlStore.getLatestRemoteHead()}),n);this.setTimerObject(s)}}),2e3)}}),f(r.prototype,"startPolling",[h.action],Object.getOwnPropertyDescriptor(r.prototype,"startPolling"),r.prototype),r)},"./appsdk/contextbar/ContextBar.js":function(e,n,t){"use strict";t.r(n),t.d(n,{ContextBarPane:function(){return A}});var r,a=t("../../node_modules/react/index.js"),i=t("./appsdk/contextbar/ContextBarService.js"),s=t("./appsdk/contextbar/ContextBarHeader.js"),o=t("./js/constants/Panes.js"),l=t("./js/components/base/Panes.js"),c=t("./node_modules/classnames/index.js"),u=t.n(c),d=t("./js/components/empty-states/AetherCrashHandler.js"),h=t("./js/components/base/XPaths/XPath.js"),m=t("../../node_modules/mobx-react/dist/mobx-react.module.js"),p=t("./js/constants/AppSettingsDefaults.js"),f=t("../../node_modules/mobx/lib/mobx.module.js"),b=t("./appsdk/contextbar/ContextBarUtil.js"),g=t("./js/stores/StoreManager.js"),y=t("./js/stores/ActiveWorkspaceSessionStore.js"),v=t("./node_modules/lodash/lodash.js");const T="auto";let A=(0,m.observer)(r=class extends l.Pane{constructor(e){super(e),this.contextBarService=new i.ContextBarService,this.handleSelect=this.handleSelect.bind(this),this.handleContextChange=this.handleContextChange.bind(this),this.handleClose=this.handleClose.bind(this),this.state={...this.state,collapsedX:!0},this.isOpen=!1}getContextForUrlIdentifier(e){return this.props.allowedContexts.find((n=>this.contextBarService.getConfig(n).urlIdentifier===e))}getUrlIdentifierForContext(e){return this.contextBarService.getConfig(e).urlIdentifier}getDimensions(e){return super.getDimensions({...e,width:{collapsedByDefault:true,shouldResistResize:true,default:440,collapsed:48,uncollapsed:440,min:p.default.ui.CONTEXT_BAR_MIN_WIDTH,max:T}})}componentDidMount(){let e=this.getContextForUrlIdentifier(this.contextBarService.activeContextUrlIdentifier)||this.props.allowedContexts&&this.props.allowedContexts[0];this.lastActive=e;let n=v.get(this.props,"collapsedByDefault",!0),t=(0,g.resolveStoreInstance)(y.default).activeEditor;!n&&this.props.editorId===t&&(0,b.updateContextQueryParams)(this.getUrlIdentifierForContext(e)),this.activeContextAutoRun=(0,f.autorun)((()=>{const e=this.contextBarService.getContextBarQueryParam(this.props.editorId);let n=this.getContextForUrlIdentifier(e);n!==this.state.activeContext&&this.setContext(n,!!n)}))}componentWillUnmount(){this.props.allowedContexts.forEach((e=>{this.contextBarService.willDestroy(e)})),this.activeContextAutoRun&&this.activeContextAutoRun()}componentDidUpdate(){this.contextBarService.pruneControllers(this.props.allowedContexts),this.isOpen&&this.state.collapsedX?(this.isOpen=!this.state.collapsedX,(0,b.removeContextQueryParams)()):this.isOpen||this.state.collapsedX||(this.isOpen=!this.state.collapsedX,this.state.activeContext||(0,b.updateContextQueryParams)(this.getUrlIdentifierForContext(this.lastActive)))}handleSelect(e){this.setContext(e,!0)}handleContextChange(e){(0,b.updateContextQueryParams)(this.getUrlIdentifierForContext(e))}setContext(e,n=!1){let t=this.state.activeContext;return new Promise((r=>{this.setState({activeContext:e},(()=>Promise.all([this.contextBarService.getControllerFor(e,this.props.contextData),this.contextBarService.getViewFor(e)]).then((([n,a])=>{e===this.state.activeContext&&this.setState({activeController:n,ActiveView:a},(()=>(this.contextBarService.didDeactivate(t),this.contextBarService.didActivate(this.state.activeContext),r())))})).then((()=>{this.state.activeContext&&(this.lastActive=this.state.activeContext),n?this.unCollapse("x"):this.collapse("x")}))))}))}handleClose(){this.collapse("x"),this.props.onClose&&this.props.onClose()}render(){let e=this.state.ActiveView,n=this.props.allowedContexts||this.props.visibleContexts,t=this.contextBarService.getConfig(this.state.activeContext),r=this.state.activeController;const i=u()({pane:!0,resizableX:this.isResizable("x"),resizableY:this.isResizable("y"),collapsedX:this.state.collapsedX,collapsedY:this.state.collapsedY},"right-context-bar"),c={height:this.state.height,width:this.state.width,...this.props.style||{}};return a.createElement(h.default,{identifier:"contextBar"},a.createElement("div",{className:i,style:c,"data-testid":"context-bar"},a.createElement(d.default,null,a.createElement(l.PaneHeader,{defaultLayout:o.PANE_LAYOUT_VERTICAL,verticalComponent:a.createElement(s.ContextBarHeader,{visibleContexts:n,onSelect:this.handleContextChange,contextBarService:this.contextBarService,activeContext:this.state.activeContext,width:this.state.width,contextData:this.props.contextData}),isCollapsedX:this.state.collapsedX,isCollapsedY:this.state.collapsedY,onCollapseToggle:this.handleCollapseToggle}),a.createElement(l.PaneContent,{isCollapsedX:this.state.collapsedX,isCollapsedY:this.state.collapsedY},this.state.width?a.createElement("div",{className:"right-context-bar-content-container"},e&&t&&a.createElement(d.default,{onClose:this.handleClose},a.createElement(e,{contextData:this.props.contextData,title:t.title,onClose:this.handleClose,controller:r,editorId:this.props.editorId}))):null))))}})||r;A.defaultProps={width:{collapsedByDefault:true,shouldResistResize:true,default:440,collapsed:48,uncollapsed:440,min:350,max:T}}},"./appsdk/contextbar/ContextBarHeader.js":function(e,n,t){"use strict";t.r(n),t.d(n,{ContextBarHeader:function(){return b}});var r,a=t("../../node_modules/react/index.js"),i=t("../../node_modules/@postman/aether-icons/esmLib/src/Icon/Icon.js"),s=t("./js/components/base/Tooltips.js"),o=t("../../node_modules/mobx-react/dist/mobx-react.module.js"),l=t("./node_modules/classnames/index.js"),c=t.n(l),u=t("./js/components/base/XPaths/XPath.js"),d=t("./growth/foundation/public/amplitude/AmplitudeService.js"),h=t("./api-dev/navigation/constants.js"),m=t("./api-dev/components/api-version/context-bar/api-source-control/APISourceControlContextBarView/APISourceControlContextBarIcon.js"),p=t("../../packages/api-observability/live-collections/index.ts"),f=t("./node_modules/lodash/lodash.js");let b=(0,o.observer)(r=class extends a.Component{constructor(e){super(e),this.state={},this.tooltipTargets={},this.handleShowTooltip=this.handleShowTooltip.bind(this),this.handleHideTooltip=this.handleHideTooltip.bind(this)}componentWillUnmount(){clearTimeout(this.titleTooltip)}handleShowTooltip(e){this.titleTooltip=setTimeout((()=>{this.setState({[e]:!0})}),500)}handleHideTooltip(e){clearTimeout(this.titleTooltip),this.state[e]&&this.setState({[e]:!1})}render(){let e=this.props.visibleContexts;const n=e=>e.name===h.SOURCE_CONTROL_NAV?a.createElement(m.default,{ref:n=>{this.tooltipTargets[e.name]=n},apiRepositoryStore:f.get(this.props,"contextData.apiRepositoryStore")||f.get(this.props,"contextData.model.apiRepositoryStore"),handleShowTooltip:this.handleShowTooltip.bind(null,e.name),handleHideTooltip:this.handleHideTooltip.bind(null,e.name)}):e.name===p.LIVE_COLLECTION_CTX_BAR.IDENTIFIER?a.createElement(p.LiveCollectionContextBarIcon,{liveRef:n=>{this.tooltipTargets[e.name]=n},handleShowTooltip:()=>this.handleShowTooltip(e.name),handleHideTooltip:()=>this.handleHideTooltip(e.name)}):a.createElement("div",{className:`tabs__${e.name} icon-container`,ref:n=>{this.tooltipTargets[e.name]=n},onMouseEnter:this.handleShowTooltip.bind(null,e.name),onMouseLeave:this.handleHideTooltip.bind(null,e.name)},a.createElement(i.default,{name:e.icon}));return a.createElement("div",{className:"right-context-bar-options"},a.createElement("ul",null,e.map((e=>{let t=this.props.contextBarService.getConfig(e);return t?a.createElement(u.default,{key:t.name,identifier:t.name},a.createElement("li",{key:t.name,onClick:()=>{this.props.onSelect(t.name),d.Ampli.contextBarListItemClicked({item_name:t.name,...(0,d.getAmpliCTAProperties)({ctaType:"other"})})},className:c()({active:t.name===this.props.activeContext&&this.props.width>300}),"data-testid":`context-bar-${t.name}`},a.createElement(a.Fragment,{key:t.name},n(t),a.createElement(s.Tooltip,{show:t&&this.state[t.name],target:t&&this.tooltipTargets[t.name],placement:"left",immediate:!0},a.createElement(s.TooltipBody,null,t&&t.title))))):null}))))}})||r},"./appsdk/contextbar/ContextBarService.js":function(e,n,t){"use strict";t.r(n),t.d(n,{ContextBarService:function(){return h}});var r,a=t("./appsdk/contextbar/ContextBarRegistry.js"),i=t("./js/services/NavigationService.js"),s=t("../../node_modules/mobx/lib/mobx.module.js"),o=t("./js/utils/NavigationUtil.js"),l=t("./appsdk/contextbar/ContextBarUtil.js"),c=(t("./js/containers/scratchpad/ContextBarScratchPadSignInPromptContainer.js"),t("./appsdk/workbench/WorkbenchService.js")),u=t("./node_modules/lodash/lodash.js"),d=t("../../node_modules/console-browserify/index.js");let h=(m=(r=class{constructor(){this._contextBarRegistry=a.default,this._controllerCache=new Map}get activeContextUrlIdentifier(){let e=i.default.currentURL.get(),{queryString:n}=(0,o.getUrlParts)(e);const t=(0,o._getQueryStringParams)(n);return t&&t[l.CONTEXT_BAR_QUERY_STRING_KEY]?t[l.CONTEXT_BAR_QUERY_STRING_KEY]:null}getContextBarQueryParam(e){return c.default.getTabController(e).contextBarQueryParam}pruneControllers(e){let n=new Set(e);for(let e of this._controllerCache.keys())n.has(e)||(this.willDestroy(e),this._controllerCache.delete(e))}getConfig(e){return this._contextBarRegistry._store.get(e)}getControllerFor(e,n){if(this._controllerCache.has(e))return this._controllerCache.get(e);let t=this.getConfig(e);if(!t)return;let r=t.getController;return r&&u.isFunction(r)?r().then((t=>{let r=new(0,t.default);this._controllerCache.set(e,r);try{r.didCreate&&r.didCreate(n)}catch(n){d.warn("ContextBarService: There was an error in the didCreate lifecycle of "+e)}return r})):void 0}getViewFor(e){let n=this.getConfig(e);return n&&n.getView().then((e=>e.default))}didActivate(e){this._triggerLifecycleMethod("didActivate",e)}didDeactivate(e){this._triggerLifecycleMethod("didDeactivate",e)}willDestroy(e){this._triggerLifecycleMethod("willDestroy",e)}_triggerLifecycleMethod(e,n){let t=this._controllerCache.get(n);if(t)try{t[e]&&t[e]()}catch(t){d.warn(`ContextBarService: There was an error in the ${e} lifecycle of ${n}`)}}}).prototype,p="activeContextUrlIdentifier",f=[s.computed],b=Object.getOwnPropertyDescriptor(r.prototype,"activeContextUrlIdentifier"),g=r.prototype,y={},Object.keys(b).forEach((function(e){y[e]=b[e]})),y.enumerable=!!y.enumerable,y.configurable=!!y.configurable,("value"in y||y.initializer)&&(y.writable=!0),y=f.slice().reverse().reduce((function(e,n){return n(m,p,e)||e}),y),g&&void 0!==y.initializer&&(y.value=y.initializer?y.initializer.call(g):void 0,y.initializer=void 0),void 0===y.initializer&&(Object.defineProperty(m,p,y),y=null),r);var m,p,f,b,g,y},"./js/components/base/EditableTag.js":function(e,n,t){"use strict";t.r(n);var r=t("../../node_modules/react/index.js"),a=t("./node_modules/prop-types/index.js"),i=t.n(a),s=t("./js/components/base/Icons/CloseIcon.js"),o=t("./node_modules/classnames/index.js"),l=t.n(o);const c=e=>{return r.createElement("div",{"data-testid":"editable-tag",onClick:e.onClick,className:(n=e.type,t=e.isSelected,l()({"editable-tag":!0,[`editable-tag-${n}`]:!0,"is-selected":t}))},e.content,r.createElement(s.default,{className:"tag-remove-btn",onClick:e.onClose,size:"xs"}));var n,t};c.propTypes={content:i().element,onClose:i().func,onClick:i().func,value:i().string,name:i().string,type:i().oneOf(["regular","error"])},c.defaultProps={onClose:()=>{},onClick:()=>{},type:"regular",name:"tag",value:""},n.default=c},"./js/components/base/PasswordInput.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return m}});var r=t("../../node_modules/react/index.js"),a=t("./node_modules/classnames/index.js"),i=t.n(a),s=t("./js/components/base/Inputs.js"),o=t("./js/components/base/AutoSuggest/AutoSuggestInput.js"),l=t("./js/components/base/Buttons.js"),c=t("./node_modules/prop-types/index.js"),u=t.n(c),d=t("../../node_modules/@postman/aether-icons/esmLib/src/Icon/Icon.js");function h(){return h=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},h.apply(this,arguments)}class m extends r.Component{constructor(e){super(e),this.state={masked:!0,error:"",warning:""},this.handleToggle=this.handleToggle.bind(this)}UNSAFE_componentWillReceiveProps(e){this.handleValidationState(e)}handleToggle(){this.setState({masked:!this.state.masked})}handleValidationState(e){const{validation:n,value:t}=e;if(n){let r,a;for(let i=0;i<n.length;i++){const{validator:s,message:o,type:l}=n[i]||{};if("function"==typeof s&&!s(t,e)){r=l,a=o;break}}if(r)return this.state[r]!==a&&this.setState({[r]:a})}this.setState({error:"",warning:""})}getValidationIcon(){return this.state.error?r.createElement(l.Button,{type:"icon",className:"password-input__error-btn",tooltip:this.state.error},r.createElement(d.default,{name:"icon-state-error-stroke",size:"small"})):this.state.warning?r.createElement(l.Button,{type:"icon",className:"password-input__warning-btn",tooltip:this.state.warning},r.createElement(d.default,{name:"icon-state-warning-stroke",size:"small"})):void 0}getPasswordInput(e){return this.props.enableVariableSuggestions?this.state.masked?r.createElement(s.Input,h({},e,{type:"password"})):r.createElement(o.AutoSuggestInput,h({},e,{enableVariableSuggestions:!0,type:"text"})):r.createElement(s.Input,h({},e,{type:this.state.masked?"password":"text"}))}render(){let{className:e,...n}=this.props;return r.createElement("div",{className:i()("password-input",e)},this.getPasswordInput(n),r.createElement("div",{className:"password-input-message"},this.getValidationIcon()),r.createElement("div",{className:"password-input__toggle",onClick:this.handleToggle},this.state.masked?r.createElement(d.default,{name:"icon-action-hide-stroke",title:"Show"}):r.createElement(d.default,{name:"icon-action-view-stroke",title:"Hide"})))}}m.propTypes={className:u().string,inputStyle:u().oneOf(["box","line"]),size:u().oneOf(["huge"]),enableVariableSuggestions:u().bool,validation:u().arrayOf(u().shape({validator:u().func.isRequired,message:u().string,type:u().oneOf(["error","warning"])}))},m.defaultProps={enableVariableSuggestions:!1}},"./js/components/base/ToggleSwitch.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return l}});var r=t("../../node_modules/react/index.js"),a=t("./node_modules/classnames/index.js"),i=t.n(a),s=t("./node_modules/prop-types/index.js"),o=t.n(s);class l extends r.Component{constructor(e){super(e),this.handleClick=this.handleClick.bind(this)}handleClick(){!this.props.disabled&&this.props.onClick&&this.props.onClick(!this.props.isActive)}getClasses(){return i()({"toggle-switch":!0,"is-active":this.props.isActive})}getWrapperClasses(){return i()({"toggle-switch-container":!0,"is-disabled":this.props.disabled},this.props.className)}render(){return r.createElement("div",{className:this.getWrapperClasses(),onClick:this.handleClick},r.createElement("div",{className:this.getClasses()}),!this.props.hideLabel&&r.createElement("div",{className:"toggle-switch-text"},this.props.isActive?r.createElement("span",{className:"toggle-switch-text-on"},this.props.activeLabel):r.createElement("span",{className:"toggle-switch-text-off"},this.props.inactiveLabel)))}}l.defaultProps={activeLabel:"ON",inactiveLabel:"OFF",isActive:!1,disabled:!1},l.propTypes={isActive:o().bool,disabled:o().bool,hideLabel:o().bool,activeLabel:o().node,inactiveLabel:o().node,onClick:o().func}},"./js/components/base/WarningButton.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return l}});var r=t("../../node_modules/react/index.js"),a=t("./js/components/base/Tooltips.js"),i=t("./node_modules/prop-types/index.js"),s=t.n(i),o=t("../../node_modules/@postman/aether-icons/esmLib/src/Icon/Icon.js");class l extends r.Component{constructor(e){super(e),this.state={isTooltipVisible:!1},this.showTooltip=this.showTooltip.bind(this),this.handleTooltipClose=this.handleTooltipClose.bind(this)}showTooltip(){this.setState({isTooltipVisible:!0})}handleTooltipClose(){this.state.isTooltipVisible&&this.setState({isTooltipVisible:!1})}render(){return r.createElement(r.Fragment,null,r.createElement("div",{ref:"tooltipTarget",onClick:this.showTooltip,className:"warning-button",onMouseOver:this.props.showTooltipOnHover&&this.showTooltip,onMouseLeave:this.props.showTooltipOnHover&&this.handleTooltipClose},r.createElement(o.default,{name:"icon-state-warning-stroke",size:"small",className:"warning-icon"})),r.createElement(a.Tooltip,{show:this.state.isTooltipVisible,target:this.refs.tooltipTarget,placement:this.props.tooltipPlacement,onClose:this.handleTooltipClose,closeOnClickOutside:!0,immediate:!0},r.createElement(a.TooltipBody,null,this.props.tooltip)))}}l.propTypes={tooltip:s().node,showTooltipOnHover:s().bool},l.defaultProps={tooltip:"Here is warning",tooltipPlacement:"right",showTooltipOnHover:!1}},"./js/containers/scratchpad/ContextBarScratchPadSignInPromptContainer.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return c}});var r=t("../../node_modules/react/index.js"),a=t("./appsdk/contextbar/ContextBarViewHeader.js"),i=t("../../node_modules/@postman/aether-icons/esmLib/src/Icon/Icon.js"),s=t("./js/components/base/Text.js"),o=t("./js/components/base/Buttons.js"),l=t("./js/services/ScratchpadService.js");class c extends r.Component{handleWorkspaceSwitch(){l.default.switchToWorkspace()}render(){return r.createElement("div",null,r.createElement(a.ContextBarViewHeader,{title:this.props.title,onClose:this.props.onClose}),r.createElement("div",{className:"contextbar-signin-prompt-state"},r.createElement("div",{className:"contextbar-signin-prompt-state__icon-container"},r.createElement(i.default,{className:"contextbar-signin-prompt-state__icon",size:"large",color:"content-color-tertiary",name:this.props.icon})),r.createElement("div",{className:"contextbar-signin-prompt-state__title"},r.createElement("h4",null,"Switch to a workspace to use this feature")),r.createElement("div",{className:"contextbar-signin-prompt-state__body"},r.createElement(s.default,{type:"body-medium",value:"This is an online feature and is only available in workspaces."})),r.createElement(o.Button,{className:"contextbar-signin-prompt-state__switch-action",size:"large",onClick:this.handleWorkspaceSwitch,type:"primary"},"Switch to Workspaces")))}}},"./js/utils/configurationsUtil.js":function(e,n,t){"use strict";t.r(n),t.d(n,{getCollectionInheritedState:function(){return u},getFolderInheritedState:function(){return c},navigateToParent:function(){return d}});var r=t("./runtime-repl/folder/_api/FolderInterface.js"),a=t("./runtime-repl/collection/_api/CollectionInterface.js"),i=t("./runtime-repl/request-http/ConfigurationConstants.js"),s=t("./js/constants/SettingsTypeConstants.js"),o=t("./runtime-repl/_common/ModelConstant.js"),l=(t("./js/services/NavigationService.js"),t("./node_modules/lodash/lodash.js"));function c(e,n,t){if(l.isEmpty(e)||l.isEmpty(n))return null;let r=l.get(e,"folders",[]),a={},s={};return l.forEach(i.CONFIGURATIONS,(o=>{let c,u=null;for("edit"===t?c=l.get(l.find(r,["id",n]),"folder"):"add"===t&&(c=n);c;){a=l.find(r,["id",c]);let e=l.get(a,"protocolProfileBehavior");if(l.has(e,[o.id])){u={parent:{id:a.id,type:"folder",name:a.name,uid:a.uid,parentCollectionUID:a.parentCollectionUID},value:l.get(e,[o.id])};break}c=l.get(a,"folder")}!l.has(u,"parent")&&l.has(e,["protocolProfileBehavior",[o.id]])&&(u={parent:{id:e.id,type:"collection",name:e.name,uid:e.uid},value:l.get(e,["protocolProfileBehavior",[o.id]])}),l.has(u,"parent")||(o.base===i.BASE.COLLECTION?u={parent:{id:e.id,type:"collection",name:e.name,uid:e.uid},value:o.defaultValue}:o.base===i.BASE.GLOBAL&&(u={parent:{type:"global",name:"Settings"},value:pm.settings.getSetting(i.CONFIGURATION_MAP[o.id])})),l.set(s,[o.id],u)})),s}function u(){return l.reduce(i.CONFIGURATIONS,((e,n)=>{let t=null;return n.base===i.BASE.GLOBAL&&(t={parent:{type:"global",name:"Settings"},value:pm.settings.getSetting(i.CONFIGURATION_MAP[n.id])}),l.set(e,[n.id],t),e}),{})}function d({type:e,uid:n,parentCollectionUID:t}){switch(e){case o.FOLDER:return(0,r.openFolderInTab)(n,t);case o.COLLECTION:return(0,a.openCollectionInTab)(n);case"global":pm.mediator.trigger("openSettingsModal",s.SETTINGS_GENERAL)}}},"./js/utils/urlUtils.js":function(e,n,t){"use strict";function r(e={},n={}){let t=[];return Object.keys(e).forEach((r=>{e[r]!==n[r]&&t.push(r)})),t}t.r(n),t.d(n,{getUpdatedQueryParamsList:function(){return r}})},"./runtime-repl/_common/ConflictResolutionHelper.js":function(e,n,t){var r=t("./node_modules/lodash/lodash.js");e.exports={detectConflict:function(e={},n={},t,a){if(!r.isFunction(a))return pm.logger.warn("ConflictResolutionHelper~detectConflict: Callback to process conflict state is required");if(!t||r.isEmpty(e)||r.isEmpty(n))return a(!1);const i=r([]).concat(r.keys(e)).concat(r.keys(n)).uniq().value();let s;for(s of i)if(r.has(e,s)&&r.has(n,s)&&!r.isEqual(e[s],n[s]))return a(!0);return a(!1)},getUpdates:function(e={},n={}){const t={},a=r([]).concat(r.keys(e)).concat(r.keys(n)).uniq().value();return r.forEach(a,(a=>{r.isEqual(e[a],n[a])||(t[a]=n[a])})),t}}},"./runtime-repl/_common/WorkbenchStatusConstants.js":function(e,n,t){"use strict";t.r(n),t.d(n,{API_NO_PERMISSION:function(){return c},API_REDIRECT_CONSUMER_ENTITY:function(){return u},DELETED:function(){return s},ERROR:function(){return i},LOADING:function(){return a},NO_TAB_MODE:function(){return o},READY:function(){return r},TAB_MODE:function(){return l}});const r="ready",a="loading",i="error",s="deleted",o="no-tab-mode",l="tab-mode",c="api-no-permission",u="api-redirect"},"./runtime-repl/_common/_api/type-definition-providers/pre-script-type-definitions-provider.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return l}});var r=t("./node_modules/raw-loader/dist/cjs.js!./node_modules/postman-sandbox/types/sandbox/prerequest.d.ts"),a=t("./node_modules/raw-loader/dist/cjs.js!./node_modules/postman-collection/types/index.d.ts"),i=t("./node_modules/raw-loader/dist/cjs.js!./node_modules/@types/chai/index.d.ts"),s=t("./runtime-repl/_common/_api/typings/lib.js"),o=t("./runtime-repl/_common/_api/typings/node.js");function l(){return[{id:"jsLib",content:s.default},{id:"node",content:o.default},{id:"postman-collection",content:a.default},{id:"chai",content:i.default},{id:"pre-script",content:r.default}]}},"./runtime-repl/_common/_api/type-definition-providers/tests-type-definitions-provider.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return l}});var r=t("./node_modules/raw-loader/dist/cjs.js!./node_modules/postman-sandbox/types/sandbox/test.d.ts"),a=t("./node_modules/raw-loader/dist/cjs.js!./node_modules/postman-collection/types/index.d.ts"),i=t("./node_modules/raw-loader/dist/cjs.js!./node_modules/@types/chai/index.d.ts"),s=t("./runtime-repl/_common/_api/typings/lib.js"),o=t("./runtime-repl/_common/_api/typings/node.js");function l(){return[{id:"jsLib",content:s.default},{id:"node",content:o.default},{id:"postman-collection",content:a.default},{id:"chai",content:i.default},{id:"tests-script",content:r.default}]}},"./runtime-repl/_common/components/EntityTabEmptyShell/EntityTabEmptyShell.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return a}});var r=t("../../node_modules/react/index.js");function a(){return r.createElement("div",{className:"entity-tab-empty-shell"},r.createElement("div",{className:"entity-tab-empty-shell__left_editor"},r.createElement("div",{className:"entity-tab-empty-shell__header-wrapper"},r.createElement("div",{className:"entity-tab-empty-shell__header-wrapper__content"},r.createElement("div",{className:"entity-tab-empty-shell__header-wrapper__content__name-strip block"}),r.createElement("div",{className:"entity-tab-empty-shell__header-wrapper__content__actions"},r.createElement("div",{className:"box block"}),r.createElement("div",{className:"box block"}),r.createElement("div",{className:"box block"})))),r.createElement("div",{className:"entity-tab-empty-shell__body-wrapper"},r.createElement("div",{className:"entity-tab-empty-shell__body-wrapper__content"},r.createElement("div",{className:"tab-strip"},r.createElement("div",{className:"tab xl block"}),r.createElement("div",{className:"tab s block"}),r.createElement("div",{className:"tab xs block"}),r.createElement("div",{className:"tab md block"})),r.createElement("div",{className:"entity-tab-empty-shell__body-wrapper__content__primary block"}),r.createElement("div",{className:"entity-tab-empty-shell__body-wrapper__content__secondary block"})))),r.createElement("div",{className:"entity-tab-empty-shell__right-context-bar"},r.createElement("div",{className:"context-bar-options"},r.createElement("div",{className:"box block"}),r.createElement("div",{className:"box block"}),r.createElement("div",{className:"box block"}),r.createElement("div",{className:"box block"}),r.createElement("div",{className:"box block"})),r.createElement("div",{className:"context-bar-body"},r.createElement("div",{className:"context-bar-header"}),r.createElement("div",{className:"context-bar-close-icon"}))))}},"./runtime-repl/_common/components/ForkRecommendationTooltip.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return c}});var r=t("../../node_modules/react/index.js"),a=t("./node_modules/prop-types/index.js"),i=t.n(a),s=t("./js/components/base/Buttons.js"),o=t("./runtime-repl/_common/components/molecule.js"),l=t("./node_modules/lodash/lodash.js");function c(e){return r.createElement(o.Tooltip,{className:"fork-recommendation-tooltip",target:e.targetRef,show:e.isOpen,placement:"bottom",onMouseEnter:e.onMouseEnter,onMouseLeave:e.onMouseLeave,immediate:!0},e.title&&r.createElement("div",{className:"fork-recommendation-tooltip__title"},e.title),e.primaryMessage&&r.createElement("div",{className:"fork-recommendation-tooltip__primary-message"},e.primaryMessage),e.secondaryMessage&&r.createElement("div",{className:"fork-recommendation-tooltip__secondary-message"},e.secondaryMessage),r.createElement("div",{className:"fork-recommendation-tooltip__actions"},e.primaryAction&&r.createElement(s.Button,{type:"primary",onClick:e.onPrimaryAction},e.primaryAction),e.secondaryAction&&r.createElement(s.Button,{type:"tertiary",onClick:e.onSecondaryAction},e.secondaryAction)))}c.defaultProps={targetRef:null,title:null,secondaryMessage:null,primaryAction:null,secondaryAction:null,onPrimaryAction:l.noop,onSecondaryAction:l.noop},c.propTypes={isOpen:i().bool.isRequired,targetRef:i().object,onMouseEnter:i().func.isRequired,onMouseLeave:i().func.isRequired,title:i().string,primaryMessage:i().string.isRequired,secondaryMessage:i().string,primaryAction:i().string,secondaryAction:i().string,onPrimaryAction:i().func,onSecondaryAction:i().func}},"./runtime-repl/_common/components/configuration-list-item/ConfigurationListItem.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return S}});var r,a=t("../../node_modules/react/index.js"),i=t("./node_modules/react-contenteditable/lib/react-contenteditable.js"),s=t.n(i),o=t("../../node_modules/react-dom/index.js"),l=t("./node_modules/classnames/index.js"),c=t.n(l),u=t("./node_modules/prop-types/index.js"),d=t.n(u),h=t("../../node_modules/mobx-react/dist/mobx-react.module.js"),m=t("../../node_modules/@postman/aether/esmLib/src/components/Text/Text.js"),p=t("../../node_modules/@postman/aether/esmLib/src/components/Label/Label.js"),f=t("./js/components/base/ToggleSwitch.js"),b=t("./js/components/base/Buttons.js"),g=t("./js/components/base/Inputs.js"),y=t("./js/components/base/Dropdowns.js"),v=t("./js/components/base/Tooltips.js"),T=t("./js/components/base/EditableTag.js"),A=t("./js/utils/configurationsUtil.js"),w=t("./node_modules/lodash/lodash.js");const E=[13,32,188,186];let S=(0,h.observer)(r=class extends a.Component{constructor(e){super(e),this.state={isTooltipVisible:!1,inputValue:void 0,activeInput:"",action:"none"},this.handleFieldChange=this.handleFieldChange.bind(this),this.showTooltip=this.showTooltip.bind(this),this.hideTooltip=this.hideTooltip.bind(this),this.handleNavigationToParent=this.handleNavigationToParent.bind(this),this.handleRestoreDefault=this.handleRestoreDefault.bind(this),this.handleActiveInputChange=this.handleActiveInputChange.bind(this),this.handleMultiSelectFieldChange=this.handleMultiSelectFieldChange.bind(this),this.handleKeyDown=this.handleKeyDown.bind(this),this.handleOnPaste=this.handleOnPaste.bind(this),this.handleOnBlur=this.handleOnBlur.bind(this),this.sanitizeMultipleInputValue=this.sanitizeMultipleInputValue.bind(this),this.focusContentEditable=this.focusContentEditable.bind(this)}componentDidMount(){this.setInputValueAndAction(this.props)}UNSAFE_componentWillReceiveProps(e){e.value===this.props.value&&w.get(e.inheritedState,"value")===w.get(this.props.inheritedState,"value")&&e.defaultValue===this.props.defaultValue||this.setInputValueAndAction(e)}setInputValueAndAction(e){const n={inputValue:this.getInputValue(e.value,w.get(e.inheritedState,"value"),e.defaultValue),isTooltipVisible:!1};w.isUndefined(e.value)?e.inheritedState?w.set(n,"action","default"):w.set(n,"action","none"):w.set(n,"action","restore"),this.setState(n)}getInputValue(e,n,t){return w.isUndefined(e)?w.isUndefined(n)?t:n:e}getClasses(){return c()({"configuration-list-item__container":!0,"is-disabled":this.props.disabled})}showTooltip(){this.setState({isTooltipVisible:!0})}hideTooltip(){this.setState({isTooltipVisible:!1})}handleFieldChange(e){e=this.sanitizeFieldValue(e,this.props.inputFieldType,this.props.inputType),this.setState({inputValue:e,action:"restore"}),this.props.handleFieldChange&&this.props.handleFieldChange(e)}sanitizeFieldValue(e,n,t){return"input"===n&&"number"===t?w.isNaN(Number(e))?this.state.inputValue:Number(e):"input"===n&&"text"===t?String(e):"invertedToggle"===n?!e:e}handleNavigationToParent(){(0,A.navigateToParent)(w.get(this.props.inheritedState,"parent"))}handleRestoreDefault(){this.props.inheritedState?this.setState({action:"default",activeInput:""}):this.setState({action:"none",activeInput:""}),this.props.handleRestoreDefault&&this.props.handleRestoreDefault()}getTooltip(e,n){return a.createElement(v.Tooltip,{placement:"left",target:e,show:this.state.isTooltipVisible},a.createElement(v.TooltipBody,null,n))}renderTagContent(e){return a.createElement("div",{title:e,className:"editable-tag__content"},e)}handleTagRemove(e,n){n.stopPropagation();const t=w.filter(this.state.inputValue,(n=>n!==e));this.handleFieldChange(t)}handleActiveInputChange(e){const{value:n}=e.target;this.setState({activeInput:n})}handleMultiSelectFieldChange(e){this.state.inputValue.includes(e)||this.handleFieldChange([...this.state.inputValue,e])}handleKeyDown(e){const n=e&&e.keyCode;if(w.includes(E,n)){if(e.preventDefault(),w.isEmpty(this.state.activeInput))return;this.handleFieldChange(w.concat(this.state.inputValue,this.sanitizeMultipleInputValue(this.state.activeInput))),this.setState({activeInput:""})}}handleOnPaste(e){e.preventDefault();const n=e.clipboardData.getData("Text");this.handleFieldChange(w.concat(this.state.inputValue,this.sanitizeMultipleInputValue(n))),this.setState({activeInput:""})}handleOnBlur(){w.isEmpty(this.state.activeInput)||(this.handleFieldChange(w.concat(this.state.inputValue,this.sanitizeMultipleInputValue(this.state.activeInput))),this.setState({activeInput:""}))}sanitizeMultipleInputValue(e){return w.chain(e).split(/\s|,|:/g).map((e=>w.trim(e))).filter((e=>!(w.includes(this.state.inputValue,e)||w.isEmpty(e)))).value()}focusContentEditable(){const e=(0,o.findDOMNode)(this.refs.contentEditable);e&&e.focus()}shouldRenderPlaceHolder(){return!(!w.isEmpty(this.state.inputValue)||!w.isEmpty(this.state.activeInput))}renderAction(){if("default"===this.state.action){const e=w.get(this.props.inheritedState,"parent");return a.createElement("div",{className:"configuration-list-item__action"},a.createElement("div",{className:"configuration-list-item__action__normal"},a.createElement("span",{onMouseEnter:this.showTooltip,onMouseLeave:this.hideTooltip,ref:"default"},a.createElement(m.default,{type:"body-medium",color:"content-color-tertiary"},"Default: ")),a.createElement("span",{className:"configuration-list-item__action__normal-text",title:w.get(e,"name"),onClick:this.handleNavigationToParent},a.createElement(m.default,{type:"body-medium",color:"content-color-tertiary"},w.get(e,"name")))),this.getTooltip(this.refs.default,"This setting is using the value set in the parent folder or collection. Changing this setting will override it for this request."))}if("restore"===this.state.action&&this.props.handleRestoreDefault)return a.createElement("div",{className:"configuration-list-item__action"},a.createElement("div",{onMouseEnter:this.showTooltip,onMouseLeave:this.hideTooltip,ref:"restoreDefault",className:"configuration-list-item__action__override"},a.createElement(b.Button,{type:"text",onClick:this.handleRestoreDefault,className:"configuration-list-item__action__override-btn",disabled:this.props.disabled},"Restore default")),this.getTooltip(this.refs.restoreDefault,"Restore this setting to it’s default value used in the parent collection/folder or app."))}renderInput(){if("toggle"===this.props.inputFieldType)return a.createElement(f.default,{isActive:Boolean(this.state.inputValue),onClick:this.handleFieldChange,disabled:this.props.disabled});if("invertedToggle"===this.props.inputFieldType)return a.createElement(f.default,{isActive:!this.state.inputValue,onClick:this.handleFieldChange,disabled:this.props.disabled});if("input"===this.props.inputFieldType){const e="number"===this.props.inputType?"text":this.props.inputType,n=w.isUndefined(this.state.inputValue)?"":this.state.inputValue;return a.createElement(g.Input,{inputStyle:"box",type:e,value:n,className:"configuration-list-item__input--input-box",onChange:this.handleFieldChange,disabled:this.props.disabled})}if("dropdown"===this.props.inputFieldType){const e=this.state.inputValue;return a.createElement(y.Dropdown,{onSelect:this.handleFieldChange},a.createElement(y.DropdownButton,{size:"small",type:"secondary"},a.createElement(b.Button,{className:"configuration-list-item__dropdown-btn",disabled:this.props.disabled},a.createElement("span",null,this.props.menuLabels&&this.props.menuLabels[w.indexOf(this.props.menuOptions,e)]||e))),a.createElement(y.DropdownMenu,{fluid:!0},w.map(this.props.menuOptions,((e,n)=>{const t=this.props.menuLabels&&this.props.menuLabels[n]||e;return a.createElement(y.MenuItem,{refKey:e,key:e,"align-center":!0,disabled:this.props.disabled},a.createElement("span",null,t))}))))}return"multiSelectDropdown"===this.props.inputFieldType?a.createElement(y.Dropdown,{onSelect:this.handleMultiSelectFieldChange,className:"configuration-list-item__input--multi-select"},a.createElement(y.DropdownButton,{type:"custom",dropdownStyle:"nocaret"},a.createElement(b.Button,{className:"configuration-list-item__selected-list"},w.map(this.state.inputValue,((e,n)=>{const t=this.props.menuLabels&&this.props.menuLabels[w.indexOf(this.props.menuOptions,e)]||e;return a.createElement(T.default,{content:this.renderTagContent(t),key:n,name:"tag",value:e,type:"regular",onClose:this.handleTagRemove.bind(this,e)})})))),a.createElement(y.DropdownMenu,{fluid:!0},w.map(this.props.menuOptions,((e,n)=>{const t=this.props.menuLabels&&this.props.menuLabels[n]||e;return a.createElement(y.MenuItem,{key:n,refKey:e,disabled:w.includes(this.state.inputValue,e)},a.createElement("span",null,t))})))):"multipleInput"===this.props.inputFieldType?a.createElement("div",{className:"configuration-list-item__input--multi-input",onClick:this.focusContentEditable},this.shouldRenderPlaceHolder()&&a.createElement("div",{className:"configuration-list-item__input--multi-input--placeholder"},"Enter cipher suites"),w.map(this.state.inputValue,((e,n)=>a.createElement(T.default,{content:this.renderTagContent(e),key:n,name:"tag",value:e,type:"regular",onClose:this.handleTagRemove.bind(this,e)}))),a.createElement(s(),{className:"configuration-list-item__input-field",ref:"contentEditable",html:this.state.activeInput||"",onChange:this.handleActiveInputChange,onKeyDown:this.handleKeyDown,onPaste:this.handleOnPaste,onBlur:this.handleOnBlur})):void 0}render(){return a.createElement("div",{className:this.getClasses()},a.createElement("div",{className:"configuration-list-item__meta-text"},a.createElement("div",{className:"configuration-list-item__title"},a.createElement(p.default,{type:"primary",color:"content-color-primary",text:this.props.title})),a.createElement("div",{className:"configuration-list-item__description"},a.createElement(m.default,{type:"body-medium",color:"content-color-secondary"},this.props.description))),a.createElement("div",{className:"configuration-list-item__options"},a.createElement("div",{className:"configuration-list-item__input"},this.renderInput()),this.renderAction()))}})||r;S.defaultProps={inputFieldType:"toggle"},S.propTypes={title:d().string.isRequired,description:d().string.isRequired,defaultValue:d().any.isRequired,inheritedState:d().object,inputFieldType:d().oneOf(["toggle","invertedToggle","input","dropdown","multiSelectDropdown","multipleInput"]),inputType:d().string,handleFieldChange:d().func,handleRestoreDefault:d().func,menuLabels:d().array,menuOptions:d().array}},"./runtime-repl/auth/AuthAWSSignature.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return p}});var r=t("../../node_modules/react/index.js"),a=t("../../node_modules/react-dom/index.js"),i=t("./node_modules/prop-types/index.js"),s=t.n(i),o=t("./js/components/base/InfoButton.js"),l=t("./js/components/base/AutoSuggest/AutoSuggestInput.js"),c=t("./runtime-repl/auth/authUtil.js"),u=t("./js/stores/StoreManager.js"),d=t("./runtime-repl/_common/components/stores/ActionMenuStore.js"),h=t("./runtime-repl/auth/AuthAdvancedToggle.js"),m=t("./runtime-repl/auth/AuthAdvancedDescription.js");class p extends r.Component{constructor(e){super(e),this.actionMenuStore=(0,u.resolveStoreInstance)(d.default)}getValue(e){return(0,c.getAuthValue)(this.props.awsv4,e)}handleFieldChange(e,n){this.props.onFieldChange&&this.props.onFieldChange(e,n)}handleSelectionChange(e,n,t){const r=e&&(0,a.findDOMNode)(this.refs[e]);if(!n||!r)return this.actionMenuStore.clear();this.actionMenuStore.setActionMenuState(!0,r,n,t,"autoSuggest",this.handleFieldChange.bind(this,e))}render(){const{disableEdit:e}=this.props;return r.createElement("div",{className:"auth-aws-signature-auth-container"},r.createElement("div",{className:"auth-input-wrapper"},r.createElement("div",{className:"auth-input-group auth-input--accessKey"},r.createElement("div",{className:"auth-label"}," AccessKey "),r.createElement("div",{className:"auth-input"},r.createElement(l.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"Access Key",value:this.getValue("accessKey"),onChange:this.handleFieldChange.bind(this,"accessKey"),readOnly:e,ref:"accessKey",onSelectionChange:this.handleSelectionChange.bind(this,"accessKey")}))),r.createElement("div",{className:"auth-input-group auth-input--secretKey"},r.createElement("div",{className:"auth-label"}," SecretKey "),r.createElement("div",{className:"auth-input"},r.createElement(l.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"Secret Key",value:this.getValue("secretKey"),onChange:this.handleFieldChange.bind(this,"secretKey"),readOnly:e,ref:"secretKey",onSelectionChange:this.handleSelectionChange.bind(this,"secretKey")}))),r.createElement("div",{className:"auth-form-group"},r.createElement(h.default,{isOpen:this.props.showAuthAdvancedFields,onToggleAdvancedFields:this.props.onToggleAdvancedFields})),this.props.showAuthAdvancedFields&&r.createElement("div",null,r.createElement(m.default,null),r.createElement("div",{className:"auth-input-group auth-input--region"},r.createElement("div",{className:"auth-label"},"AWS Region",r.createElement(o.default,{tooltip:"The region that is receiving the request (default value: us-east-1)"})),r.createElement("div",{className:"auth-input"},r.createElement(l.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"e.g. us-east-1",value:this.getValue("region"),onChange:this.handleFieldChange.bind(this,"region"),readOnly:e,ref:"region",onSelectionChange:this.handleSelectionChange.bind(this,"region")}))),r.createElement("div",{className:"auth-input-group auth-input--service"},r.createElement("div",{className:"auth-label"},"Service Name",r.createElement(o.default,{tooltip:"The service that is receiving the request."})),r.createElement("div",{className:"auth-input"},r.createElement(l.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"e.g. s3",value:this.getValue("service"),onChange:this.handleFieldChange.bind(this,"service"),readOnly:e,ref:"service",onSelectionChange:this.handleSelectionChange.bind(this,"service")}))),r.createElement("div",{className:"auth-input-group auth-input--sessionToken"},r.createElement("div",{className:"auth-label"},"Session Token",r.createElement(o.default,{tooltip:"Only required when using temporary security credentials."})),r.createElement("div",{className:"auth-input"},r.createElement(l.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"Session Token",value:this.getValue("sessionToken"),onChange:this.handleFieldChange.bind(this,"sessionToken"),readOnly:e,ref:"sessionToken",onSelectionChange:this.handleSelectionChange.bind(this,"sessionToken")}))))))}}p.propTypes={awsv4:s().array.isRequired,onFieldChange:s().func.isRequired,onToggleAdvancedFields:s().func.isRequired,showAuthAdvancedFields:s().bool.isRequired}},"./runtime-repl/auth/AuthAkamaiEdgeGridEditor.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return p}});var r=t("../../node_modules/react/index.js"),a=t("../../node_modules/react-dom/index.js"),i=t("./node_modules/prop-types/index.js"),s=t.n(i),o=t("./runtime-repl/auth/authUtil.js"),l=t("./js/stores/StoreManager.js"),c=t("./runtime-repl/_common/components/stores/ActionMenuStore.js"),u=t("./js/components/base/InfoButton.js"),d=t("./runtime-repl/_common/components/molecule.js"),h=t("./runtime-repl/auth/AuthAdvancedToggle.js"),m=t("./runtime-repl/auth/AuthAdvancedDescription.js");class p extends r.Component{constructor(){super(),this.actionMenuStore=(0,l.resolveStoreInstance)(c.default)}getValue(e,n){return(0,o.getAuthValue)(this.props.edgegrid,e,n)}handleFieldChange(e,n){this.props.onFieldChange&&this.props.onFieldChange(e,n)}handleSelectionChange(e,n,t){const r=e&&(0,a.findDOMNode)(this.refs[e]);if(!n||!r)return this.actionMenuStore.clear();this.actionMenuStore.setActionMenuState(!0,r,n,t,"autoSuggest",this.handleFieldChange.bind(this,e))}render(){const{disableEdit:e}=this.props,n=r.createElement("span",null,"UTC time in"," ",r.createElement("pre",{className:"auth-akamai-edgegrid--timestamp-tooltip"},"yyyyMMddTHH:mm:ss+0000")," ","format, as specified in the API Client Authentication section of the Akamai Developer Portal.");return r.createElement("div",{className:"auth-akamai-edgegrid-auth-container"},r.createElement("div",{className:"auth-input-wrapper"},r.createElement("div",{className:"auth-input-group auth-input--accessToken"},r.createElement("div",{className:"auth-label"},"Access Token"),r.createElement("div",{className:"auth-input"},r.createElement(d.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"Access Token",value:this.getValue("accessToken"),onChange:this.handleFieldChange.bind(this,"accessToken"),readOnly:e,ref:"accessToken",onSelectionChange:this.handleSelectionChange.bind(this,"accessToken")}))),r.createElement("div",{className:"auth-input-group auth-input--clientToken"},r.createElement("div",{className:"auth-label"},"Client Token"),r.createElement("div",{className:"auth-input"},r.createElement(d.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"Client Token",value:this.getValue("clientToken"),onChange:this.handleFieldChange.bind(this,"clientToken"),readOnly:e,ref:"clientToken",onSelectionChange:this.handleSelectionChange.bind(this,"clientToken")}))),r.createElement("div",{className:"auth-input-group auth-input--clientSecret"},r.createElement("div",{className:"auth-label"},"Client Secret"),r.createElement("div",{className:"auth-input"},r.createElement(d.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"Client Secret",value:this.getValue("clientSecret"),onChange:this.handleFieldChange.bind(this,"clientSecret"),readOnly:e,ref:"clientSecret",onSelectionChange:this.handleSelectionChange.bind(this,"clientSecret")}))),r.createElement("div",{className:"auth-form-group"},r.createElement(h.default,{isOpen:this.props.showAuthAdvancedFields,onToggleAdvancedFields:this.props.onToggleAdvancedFields})),this.props.showAuthAdvancedFields&&r.createElement("div",null,r.createElement(m.default,null),r.createElement("div",{className:"auth-input-group auth-input--nonce"},r.createElement("div",{className:"auth-label"},"Nonce",r.createElement(u.default,{tooltip:"A random string generated by the client."})),r.createElement("div",{className:"auth-input"},r.createElement(d.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"Nonce",value:this.getValue("nonce"),onChange:this.handleFieldChange.bind(this,"nonce"),readOnly:e,ref:"nonce",onSelectionChange:this.handleSelectionChange.bind(this,"nonce")}))),r.createElement("div",{className:"auth-input-group auth-input--timestamp"},r.createElement("div",{className:"auth-label"},"Timestamp",r.createElement(u.default,{tooltip:n})),r.createElement("div",{className:"auth-input"},r.createElement(d.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"Timestamp",value:this.getValue("timestamp"),onChange:this.handleFieldChange.bind(this,"timestamp"),readOnly:e,ref:"timestamp",onSelectionChange:this.handleSelectionChange.bind(this,"timestamp")}))),r.createElement("div",{className:"auth-input-group auth-input--baseURL"},r.createElement("div",{className:"auth-label"},"Base URL",r.createElement(u.default,{tooltip:"The base URL, without the protocol."})),r.createElement("div",{className:"auth-input"},r.createElement(d.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"Base URL",value:this.getValue("baseURL"),onChange:this.handleFieldChange.bind(this,"baseURL"),readOnly:e,ref:"baseURL",onSelectionChange:this.handleSelectionChange.bind(this,"baseURL")}))),r.createElement("div",{className:"auth-input-group auth-input--headersToSign"},r.createElement("div",{className:"auth-label"},"Headers to sign",r.createElement(u.default,{tooltip:"Comma-separated list of headers to be signed."})),r.createElement("div",{className:"auth-input"},r.createElement(d.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"Headers to sign",value:this.getValue("headersToSign"),onChange:this.handleFieldChange.bind(this,"headersToSign"),readOnly:e,ref:"headersToSign",onSelectionChange:this.handleSelectionChange.bind(this,"headersToSign")}))))))}}p.propTypes={edgegrid:s().array.isRequired,onFieldChange:s().func.isRequired,onToggleAdvancedFields:s().func.isRequired,showAuthAdvancedFields:s().bool.isRequired}},"./runtime-repl/auth/AuthApiKeyEditor.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return f}});var r=t("../../node_modules/react/index.js"),a=t("../../node_modules/react-dom/index.js"),i=t("./node_modules/prop-types/index.js"),s=t.n(i),o=t("./js/components/base/AutoSuggest/AutoSuggestInput.js"),l=t("./js/components/base/Buttons.js"),c=t("./js/components/base/Dropdowns.js"),u=t("./runtime-repl/auth/authUtil.js"),d=t("./runtime-repl/request-http/RequestApiKeyAuthConstants.js"),h=t("./js/stores/StoreManager.js"),m=t("./runtime-repl/_common/components/stores/ActionMenuStore.js");const p={[d.IN.HEADER]:"Header",[d.IN.QUERY]:"Query Params"};class f extends r.Component{constructor(e){super(e),this.actionMenuStore=(0,h.resolveStoreInstance)(m.default)}getValue(e,n){return(0,u.getAuthValue)(this.props.apiKeyAuth,e,n)}handleFieldChange(e,n){this.props.onFieldChange&&this.props.onFieldChange(e,n)}handleSelectionChange(e,n,t){const r=e&&(0,a.findDOMNode)(this.refs[e]);if(!n||!r)return this.actionMenuStore.clear();this.actionMenuStore.setActionMenuState(!0,r,n,t,"autoSuggest",this.handleFieldChange.bind(this,e))}render(){const{disableEdit:e}=this.props;return r.createElement("div",{className:"auth-apikey-auth-container"},r.createElement("div",{className:"auth-input-wrapper"},r.createElement("div",{className:"auth-input-group auth-input--username"},r.createElement("div",{className:"auth-label"}," Key "),r.createElement("div",{className:"auth-input"},r.createElement(o.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"Key",value:this.getValue("key"),onChange:this.handleFieldChange.bind(this,"key"),readOnly:e,ref:"key",onSelectionChange:this.handleSelectionChange.bind(this,"key")}))),r.createElement("div",{className:"auth-input-group auth-input--password"},r.createElement("div",{className:"auth-label"}," Value "),r.createElement("div",{className:"auth-input"},r.createElement(o.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"Value",value:this.getValue("value"),onChange:this.handleFieldChange.bind(this,"value"),readOnly:e,ref:"value",onSelectionChange:this.handleSelectionChange.bind(this,"value")}))),!this.props.hideAddTo&&r.createElement("div",{className:"auth-input-group auth-input--addto"},r.createElement("div",{className:"auth-label"}," Add to "),r.createElement("div",{className:"auth-input"},r.createElement(c.Dropdown,{onSelect:this.handleFieldChange.bind(this,"in")},r.createElement(c.DropdownButton,{size:"small",type:"secondary"},r.createElement(l.Button,null,r.createElement("span",null,p[this.getValue("in",d.IN.HEADER)]))),r.createElement(c.DropdownMenu,{fluid:!0},r.createElement(c.MenuItem,{refKey:d.IN.HEADER,disabled:e},r.createElement("span",null,p[d.IN.HEADER])),r.createElement(c.MenuItem,{refKey:d.IN.QUERY,disabled:e},r.createElement("span",null,p[d.IN.QUERY]))))))))}}f.propTypes={apiKeyAuth:s().array.isRequired,onFieldChange:s().func.isRequired}},"./runtime-repl/auth/AuthBasicEditor.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return d}});var r=t("../../node_modules/react/index.js"),a=t("../../node_modules/react-dom/index.js"),i=t("./node_modules/prop-types/index.js"),s=t.n(i),o=t("./js/components/base/AutoSuggest/AutoSuggestInput.js"),l=t("./js/stores/StoreManager.js"),c=t("./runtime-repl/_common/components/stores/ActionMenuStore.js"),u=t("./runtime-repl/auth/authUtil.js");class d extends r.Component{constructor(e){super(e),this.actionMenuStore=(0,l.resolveStoreInstance)(c.default)}getValue(e){return(0,u.getAuthValue)(this.props.basicAuth,e)}handleSelectionChange(e,n,t){const r=e&&(0,a.findDOMNode)(this.refs[e]);if(!n||!r)return this.actionMenuStore.clear();this.actionMenuStore.setActionMenuState(!0,r,n,t,"autoSuggest",this.handleFieldChange.bind(this,e))}handleFieldChange(e,n){this.props.onFieldChange&&this.props.onFieldChange(e,n)}render(){const{disableEdit:e}=this.props;return r.createElement("div",{className:"auth-basic-auth-container"},r.createElement("div",{className:"auth-input-wrapper"},r.createElement("div",{className:"auth-input-group auth-input--username"},r.createElement("div",{className:"auth-label"}," Username "),r.createElement("div",{className:"auth-input"},r.createElement(o.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"Username",value:this.getValue("username"),onChange:this.handleFieldChange.bind(this,"username"),readOnly:e,ref:"username",onSelectionChange:this.handleSelectionChange.bind(this,"username")}))),r.createElement("div",{className:"auth-input-group auth-input--password"},r.createElement("div",{className:"auth-label"}," Password "),r.createElement("div",{className:"auth-input"},r.createElement(o.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"Password",value:this.getValue("password"),onChange:this.handleFieldChange.bind(this,"password"),validation:u.variableValidation,readOnly:e,ref:"password",onSelectionChange:this.handleSelectionChange.bind(this,"password")})))))}}d.propTypes={basicAuth:s().array.isRequired,onFieldChange:s().func.isRequired}},"./runtime-repl/auth/AuthBearerEditor.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return d}});var r=t("../../node_modules/react/index.js"),a=t("../../node_modules/react-dom/index.js"),i=t("./node_modules/prop-types/index.js"),s=t.n(i),o=t("./js/components/base/AutoSuggest/AutoSuggestInput.js"),l=t("./runtime-repl/auth/authUtil.js"),c=t("./js/stores/StoreManager.js"),u=t("./runtime-repl/_common/components/stores/ActionMenuStore.js");class d extends r.Component{constructor(e){super(e),this.actionMenuStore=(0,c.resolveStoreInstance)(u.default)}getValue(e){return(0,l.getAuthValue)(this.props.bearerAuth,e)}handleSelectionChange(e,n,t){const r=e&&(0,a.findDOMNode)(this.refs[e]);if(!n||!r)return this.actionMenuStore.clear();this.actionMenuStore.setActionMenuState(!0,r,n,t,"autoSuggest",this.handleFieldChange.bind(this,e))}handleFieldChange(e,n){this.props.onFieldChange&&this.props.onFieldChange(e,n)}render(){return r.createElement("div",{className:"auth-bearer-token-container"},r.createElement("div",{className:"auth-input-wrapper"},r.createElement("div",{className:"auth-input-group auth-input--token"},r.createElement("div",{className:"auth-label"}," Token "),r.createElement("div",{className:"auth-input"},r.createElement(o.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"Token",value:this.getValue("token"),onChange:this.handleFieldChange.bind(this,"token"),readOnly:this.props.disableEdit,ref:"token",onSelectionChange:this.handleSelectionChange.bind(this,"token")})))))}}d.propTypes={bearerAuth:s().array.isRequired,onFieldChange:s().func.isRequired}},"./runtime-repl/auth/AuthDigestEditor.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return g}});var r=t("../../node_modules/react/index.js"),a=t("../../node_modules/react-dom/index.js"),i=t("./node_modules/prop-types/index.js"),s=t.n(i),o=t("./js/components/base/Dropdowns.js"),l=t("./js/components/base/Buttons.js"),c=t("./js/components/base/InfoButton.js"),u=t("./js/components/base/AutoSuggest/AutoSuggestInput.js"),d=t("./runtime-repl/auth/authUtil.js"),h=t("./js/stores/StoreManager.js"),m=t("./runtime-repl/_common/components/stores/ActionMenuStore.js"),p=t("./runtime-repl/auth/RequestDigestAuthConstants.js"),f=t("./runtime-repl/auth/AuthAdvancedToggle.js"),b=t("./runtime-repl/auth/AuthAdvancedDescription.js");class g extends r.Component{constructor(e){super(e),this.actionMenuStore=(0,h.resolveStoreInstance)(m.default)}getValue(e,n){return(0,d.getAuthValue)(this.props.digestAuth,e,n)}handleFieldChange(e,n){this.props.onFieldChange&&this.props.onFieldChange(e,n)}handleSelectionChange(e,n,t){const r=e&&(0,a.findDOMNode)(this.refs[e]);if(!n||!r)return this.actionMenuStore.clear();this.actionMenuStore.setActionMenuState(!0,r,n,t,"autoSuggest",this.handleFieldChange.bind(this,e))}render(){const{disableEdit:e}=this.props;return r.createElement("div",{className:"auth-digest-auth-container"},r.createElement("div",{className:"auth-input-wrapper"},r.createElement("div",{className:"auth-input-group auth-input--username"},r.createElement("div",{className:"auth-label"}," Username "),r.createElement("div",{className:"auth-input"},r.createElement(u.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"Username",value:this.getValue("username"),onChange:this.handleFieldChange.bind(this,"username"),readOnly:e,ref:"username",onSelectionChange:this.handleSelectionChange.bind(this,"username")}))),r.createElement("div",{className:"auth-input-group auth-input--password"},r.createElement("div",{className:"auth-label"}," Password "),r.createElement("div",{className:"auth-input"},r.createElement(u.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"Password",value:this.getValue("password"),onChange:this.handleFieldChange.bind(this,"password"),validation:d.variableValidation,readOnly:e,ref:"password",onSelectionChange:this.handleSelectionChange.bind(this,"password")}))),r.createElement("div",{className:"auth-form-group"},r.createElement(f.default,{isOpen:this.props.showAuthAdvancedFields,onToggleAdvancedFields:this.props.onToggleAdvancedFields})),this.props.showAuthAdvancedFields&&r.createElement("div",null,r.createElement(b.default,null),r.createElement("div",{className:"auth-input-group auth-input--realm"},r.createElement("div",{className:"auth-label"},"Realm",r.createElement(c.default,{tooltip:"This is a string specified by the server in the WWW-Authenticate response header. It should contain at least the name of the host performing the authentication and might additionally indicate the collection of users who might have access."})),r.createElement("div",{className:"auth-input"},r.createElement(u.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"testrealm@example.com",value:this.getValue("realm"),onChange:this.handleFieldChange.bind(this,"realm"),readOnly:e,ref:"realm",onSelectionChange:this.handleSelectionChange.bind(this,"realm")}))),r.createElement("div",{className:"auth-input-group auth-input--nonce"},r.createElement("div",{className:"auth-label"},"Nonce",r.createElement(c.default,{tooltip:"This is a unique string specified by the server in the WWW-Authenticate response header."})),r.createElement("div",{className:"auth-input"},r.createElement(u.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"Nonce",value:this.getValue("nonce"),onChange:this.handleFieldChange.bind(this,"nonce"),readOnly:e,ref:"nonce",onSelectionChange:this.handleSelectionChange.bind(this,"nonce")}))),r.createElement("div",{className:"auth-input-group auth-input--algorithm"},r.createElement("div",{className:"auth-label"},"Algorithm",r.createElement(c.default,{tooltip:"A string indicating a pair of algorithms used to produce the digest and a checksum."})),r.createElement("div",{className:"auth-input"},r.createElement(o.Dropdown,{onSelect:this.handleFieldChange.bind(this,"algorithm")},r.createElement(o.DropdownButton,{type:"secondary",size:"small"},r.createElement(l.Button,null,r.createElement("span",null,this.getValue("algorithm",p.ALGORITHM.MD5)))),r.createElement(o.DropdownMenu,{fluid:!0},r.createElement(o.MenuItem,{refKey:p.ALGORITHM.MD5,disabled:e},r.createElement("span",null,p.ALGORITHM.MD5)),r.createElement(o.MenuItem,{refKey:p.ALGORITHM.MD5_SESS,disabled:e},r.createElement("span",null,p.ALGORITHM.MD5_SESS)),r.createElement(o.MenuItem,{refKey:p.ALGORITHM.SHA_256,disabled:e},r.createElement("span",null,p.ALGORITHM.SHA_256)),r.createElement(o.MenuItem,{refKey:p.ALGORITHM.SHA_256_SESS,disabled:e},r.createElement("span",null,p.ALGORITHM.SHA_256_SESS)),r.createElement(o.MenuItem,{refKey:p.ALGORITHM.SHA_512_256,disabled:e},r.createElement("span",null,p.ALGORITHM.SHA_512_256)),r.createElement(o.MenuItem,{refKey:p.ALGORITHM.SHA_512_256_SESS,disabled:e},r.createElement("span",null,p.ALGORITHM.SHA_512_256_SESS)))))),r.createElement("div",{className:"auth-input-group auth-input--qop"},r.createElement("div",{className:"auth-label"},"qop",r.createElement(c.default,{tooltip:'Indicates the "quality of protection" applied to the message. This value must be one of the alternatives specified by the server in the WWW-Authenticate response header.'})),r.createElement("div",{className:"auth-input"},r.createElement(u.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"e.g. auth-int",value:this.getValue("qop"),onChange:this.handleFieldChange.bind(this,"qop"),readOnly:e,ref:"qop",onSelectionChange:this.handleSelectionChange.bind(this,"qop")}))),r.createElement("div",{className:"auth-input-group auth-input--nonce-count"},r.createElement("div",{className:"auth-label"},"Nonce Count",r.createElement(c.default,{tooltip:"The hexadecimal count of the number of requests (including the current request) that the client has sent with the nonce value in this request. This must be specified if a qop directive is sent, and must not be specified if the server did not send a qop directive in the WWW-Authenticate response header."})),r.createElement("div",{className:"auth-input"},r.createElement(u.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"e.g. 00000001",value:this.getValue("nonceCount"),onChange:this.handleFieldChange.bind(this,"nonceCount"),readOnly:e,ref:"nonceCount",onSelectionChange:this.handleSelectionChange.bind(this,"nonceCount")}))),r.createElement("div",{className:"auth-input-group auth-input--client-nonce"},r.createElement("div",{className:"auth-label"},"Client Nonce",r.createElement(c.default,{tooltip:"An opaque quoted string value provided by the client and used by both client and server to avoid chosen plaintext attacks, to provide mutual authentication, and to provide some message integrity protection. This must be specified if a qop directive is sent, and must not be specified if the server did not send a qop directive in the WWW-Authenticate response header."})),r.createElement("div",{className:"auth-input"},r.createElement(u.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"e.g. 0a4f113b",value:this.getValue("clientNonce"),onChange:this.handleFieldChange.bind(this,"clientNonce"),readOnly:e,ref:"clientNonce",onSelectionChange:this.handleSelectionChange.bind(this,"clientNonce")}))),r.createElement("div",{className:"auth-input-group auth-input--opaque"},r.createElement("div",{className:"auth-label"},"Opaque",r.createElement(c.default,{tooltip:"This is a string of data specified by the server in the WWW-Authenticate response header and should be used here unchanged with URIs in the same protection space. It is recommended that this string be base64 or hexadecimal data."})),r.createElement("div",{className:"auth-input"},r.createElement(u.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"Opaque",value:this.getValue("opaque"),onChange:this.handleFieldChange.bind(this,"opaque"),readOnly:e,ref:"opaque",onSelectionChange:this.handleSelectionChange.bind(this,"opaque")}))))))}}g.propTypes={digestAuth:s().array.isRequired,showAuthAdvancedFields:s().bool.isRequired,onFieldChange:s().func.isRequired,onToggleAdvancedFields:s().func.isRequired}},"./runtime-repl/auth/AuthEditor.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return Y}});var r,a=t("../../node_modules/react/index.js"),i=t("../../node_modules/@postman/aether/esmLib/src/components/Label/Label.js"),s=t("../../node_modules/@postman/aether/esmLib/src/components/Text/Text.js"),o=t("../../node_modules/@postman/aether/esmLib/src/components/Flex/Flex.js"),l=t("./node_modules/classnames/index.js"),c=t.n(l),u=t("../../node_modules/@postman/aether-icons/esmLib/src/design-system-icons/icon-state-warning-stroke.js"),d=t("../../node_modules/@postman/aether-icons/esmLib/src/design-system-icons/icon-state-info-stroke.js"),h=t("../../node_modules/@postman/aether-icons/esmLib/src/Icon/Icon.js"),m=t("./node_modules/prop-types/index.js"),p=t.n(m),f=t("./js/components/base/Dropdowns.js"),b=t("./js/components/base/Inputs.js"),g=t("./js/components/base/Buttons.js"),y=t("./runtime-repl/auth/authUtil.js"),v=t("./runtime-repl/auth/AuthConstants.js"),T=t("./runtime-repl/auth/RequestOAuth2Constants.js"),A=t("./runtime-repl/request-http/RequesterTabLayoutConstants.js"),w=t("./runtime-repl/collection/_api/CollectionInterface.js"),E=t("./runtime-repl/folder/_api/FolderInterface.js"),S=t("./runtime-repl/transient-collection/datastores/stores/TransientFolderStore.ts"),k=t("./runtime-repl/transient-collection/datastores/stores/TransientCollectionStore.ts"),I=t("./appsdk/components/link/Link.js"),x=t("./js/constants/AppUrlConstants.js"),j=t("./js/stores/StoreManager.js"),C=t("./collaboration/workspace/model/ActiveWorkspaceBaseStore.ts"),R=t("./collaboration/workspace/types/WorkspaceTypes.ts"),P=t("../../packages/universe/api-authentication/index.js"),_=t("../../node_modules/mobx-react/dist/mobx-react.module.js"),O=t("./runtime-repl/auth/jwt/AuthJWTBearer.js"),N=t("./runtime-repl/auth/jwt/AuthJWTOptions.js"),U=t("./runtime-repl/auth/AuthTypeSelector.js"),L=t("./runtime-repl/auth/AuthApiKeyEditor.js"),B=t("./runtime-repl/auth/AuthBasicEditor.js"),F=t("./runtime-repl/auth/AuthBearerEditor.js"),D=t("./runtime-repl/auth/AuthDigestEditor.js"),M=t("./runtime-repl/auth/OAuth1Editor.js"),q=t("./runtime-repl/auth/OAuth2Editor.js"),V=t("./runtime-repl/auth/AuthHawkEditor.js"),W=t("./runtime-repl/auth/AuthEditorCta.js"),H=t("./runtime-repl/auth/AuthAWSSignature.js"),z=t("./runtime-repl/auth/AuthNTLMEditor.js"),G=t("./runtime-repl/auth/AuthAkamaiEdgeGridEditor.js"),K=t("./runtime-repl/auth/InheritedAuthInfo.js"),J=t("./node_modules/lodash/lodash.js");let Y=(0,_.observer)(r=class extends a.Component{constructor(e){super(e),this.getDisableRetryOption=this.getDisableRetryOption.bind(this),this.handleDisableRetryChange=this.handleDisableRetryChange.bind(this),this.getOauth1AddToParamsValue=this.getOauth1AddToParamsValue.bind(this),this.getOauth2AddTokenToValue=this.getOauth2AddTokenToValue.bind(this),this.handleOpenInheritedAuth=this.handleOpenInheritedAuth.bind(this),this.inheritedAuthRouteConfig=this.inheritedAuthRouteConfig.bind(this)}getDisableRetryOption(){const e=J.get(this.props,"auth.type",v.AUTH_TYPE_RAW_NO_AUTH);return this.getValue(e,"disableRetryRequest")}getOauth1AddToParamsValue(){return this.getValue("oauth1","addParamsToHeader",!1)}getValue(e,n,t){const r=J.get(this.props,["auth",e],{});return(0,y.getAuthValue)(r,n,t)}getOauth2AddTokenToValue(){return this.getValue("oauth2","addTokenTo",!0)}getAWSAddAuthDataToQueryValue(){return this.getValue("awsv4","addAuthDataToQuery",!1)}handleDisableRetryChange(e){const n=J.get(this.props,"auth.type",v.AUTH_TYPE_RAW_NO_AUTH);this.props.handleAuthAnalytics(e?"disable_retrying_request":"enable_retrying_request"),this.handleFieldChange(n,"disableRetryRequest",e)}handleFieldChange(e,n,t){this.props.disableEdit||this.props.onFieldChange&&this.props.onFieldChange(e,n,t)}handleFieldDelete(e,n){this.props.disableEdit||this.props.onFieldDelete&&this.props.onFieldDelete(e,n)}handleSessionFieldChange(e,n,t){this.props.onSessionFieldChange&&this.props.onSessionFieldChange(e,n,t)}handleOpenInheritedAuth(){const{inheritedAuth:e,isTransient:n}=this.props,t=J.get(e,"entity.id"),r=J.get(e,"entity.uid"),a=J.get(e,"entity.parentCollectionUID");if("folder"===J.get(e,"entity.type")){if(n)return S.default.find(t)&&S.default.find(t).openInWorkbench();(0,E.openFolderInTab)(r,a)}else if("collection"===J.get(e,"entity.type")){if(n)return k.default.find(t)&&k.default.find(t).openInWorkbench();(0,w.openCollectionInTab)(r)}}inheritedAuthRouteConfig(){const{inheritedAuth:e,isTransient:n}=this.props,t=J.get(e,"entity.uid");return"folder"===J.get(e,"entity.type")?n?null:(0,E.folderRouteConfig)(t):"collection"===J.get(e,"entity.type")?n?null:(0,w.collectionRouteConfig)(t):null}renderAuthOptions(e,n,t){const{disableEdit:r}=this.props;switch(e){case v.AUTH_TYPE_RAW_O_AUTH_1:return a.createElement("div",{className:"auth-target-input"},a.createElement("div",{className:"auth-target-input__selector"},a.createElement("div",{className:"auth-label"},a.createElement(i.default,{type:"primary",color:"content-color-primary",text:n})),a.createElement("div",{className:"auth-input"},a.createElement(f.Dropdown,{onSelect:this.handleFieldChange.bind(this,"oauth1","addParamsToHeader"),fullWidth:!0},a.createElement(f.DropdownButton,{type:"secondary",size:"small"},a.createElement(g.Button,null,a.createElement("span",null,this.getOauth1AddToParamsValue()?v.ADD_AUTH_PARAMS_TO.HEADERS:v.ADD_AUTH_PARAMS_TO.BODY_OR_URL))),a.createElement(f.DropdownMenu,{fluid:!0},a.createElement(f.MenuItem,{refKey:!1,disabled:r},a.createElement("span",null,v.ADD_AUTH_PARAMS_TO.BODY_OR_URL)),a.createElement(f.MenuItem,{refKey:!0,disabled:r},a.createElement("span",null,v.ADD_AUTH_PARAMS_TO.HEADERS)))),!this.getOauth1AddToParamsValue()&&a.createElement("div",{className:"auth-input__description"},a.createElement(s.default,{type:"body-medium",color:"content-color-secondary"},"Postman will automatically choose between body and URL based on the request method.")))));case v.AUTH_TYPE_RAW_JWT_AUTH:return a.createElement(N.default,{jwtAuth:t,onFieldChange:this.handleFieldChange.bind(this,v.AUTH_TYPE_RAW_JWT_AUTH),disableEdit:r});case v.AUTH_TYPE_RAW_DIGEST_AUTH:case v.AUTH_TYPE_RAW_NTLM_AUTH:return a.createElement("div",{className:"auth-retry-input"},a.createElement("div",{className:"auth-retry-input__description"},a.createElement(s.default,{type:"body-medium",color:"content-color-secondary"},"By default, Postman will extract values from the received response, add it to the request, and retry it. Do you want to disable this?")),a.createElement("div",{className:"auth-input-group auth-retry-input__toggle"},a.createElement("div",{className:"auth-input"},a.createElement(b.Checkbox,{checked:this.getDisableRetryOption(),onChange:this.handleDisableRetryChange,disabled:r}),a.createElement("span",{className:"auth-input__checkbox-label",onClick:this.handleDisableRetryChange.bind(this,!this.getDisableRetryOption())},"Yes, disable retrying the request"))));case v.AUTH_TYPE_RAW_O_AUTH_2:return a.createElement("div",{className:"auth-target-input"},a.createElement("div",{className:"auth-target-input__selector"},a.createElement("div",{className:"auth-label"},a.createElement(i.default,{type:"primary",color:"content-color-primary",text:n})),a.createElement("div",{className:"auth-input"},a.createElement(f.Dropdown,{onSelect:this.handleFieldChange.bind(this,"oauth2","addTokenTo"),fullWidth:!0},a.createElement(f.DropdownButton,{type:"secondary",size:"small"},a.createElement(g.Button,null,a.createElement("span",null,this.getOauth2AddTokenToValue()===T.ADD_TOKEN_TO.QUERY_PARAMS?v.ADD_AUTH_PARAMS_TO.URL:v.ADD_AUTH_PARAMS_TO.HEADERS))),a.createElement(f.DropdownMenu,{fluid:!0},a.createElement(f.MenuItem,{refKey:T.ADD_TOKEN_TO.QUERY_PARAMS,disabled:r},a.createElement("span",null,v.ADD_AUTH_PARAMS_TO.URL)),a.createElement(f.MenuItem,{refKey:T.ADD_TOKEN_TO.HEADER,disabled:r},a.createElement("span",null,v.ADD_AUTH_PARAMS_TO.HEADERS)))))));case v.AUTH_TYPE_RAW_AWS:return a.createElement("div",{className:"auth-target-input"},a.createElement("div",{className:"auth-target-input__selector"},a.createElement("div",{className:"auth-label"},a.createElement(i.default,{type:"primary",color:"content-color-primary",text:n})),a.createElement("div",{className:"auth-input"},a.createElement(f.Dropdown,{onSelect:this.handleFieldChange.bind(this,"awsv4","addAuthDataToQuery"),fullWidth:!0},a.createElement(f.DropdownButton,{type:"secondary",size:"small"},a.createElement(g.Button,null,a.createElement("span",null,this.getAWSAddAuthDataToQueryValue()?v.ADD_AUTH_PARAMS_TO.URL:v.ADD_AUTH_PARAMS_TO.HEADERS))),a.createElement(f.DropdownMenu,{fluid:!0},a.createElement(f.MenuItem,{refKey:!1,disabled:r},a.createElement("span",null,v.ADD_AUTH_PARAMS_TO.HEADERS)),a.createElement(f.MenuItem,{refKey:!0,disabled:r},a.createElement("span",null,v.ADD_AUTH_PARAMS_TO.URL)))))));default:return null}}renderAuthConfig(e,n,t,r,i){const{disableEdit:o}=this.props;switch(e){case v.AUTH_TYPE_RAW_NO_AUTH:return a.createElement("div",{className:"auth-no-auth-container"},a.createElement("div",{className:"auth-target-description"},a.createElement(s.default,{type:"body-medium",color:"content-color-secondary"},`This ${n} does not use any authorization. Learn more about `),a.createElement(I.default,{className:"auth-target-description__link",to:this.props.authLearnMoreURL||x.AUTH_DOCS,target:"_blank"},a.createElement(s.default,{color:"content-color-secondary"},a.createElement(s.default,{type:"link-default",isExternal:!0},"authorization")))));case v.AUTH_TYPE_RAW_APIKEY:return a.createElement(L.default,{apiKeyAuth:t,onFieldChange:this.handleFieldChange.bind(this,"apikey"),disableEdit:o,hideAddTo:this.props.hideAddToInAPIKey});case v.AUTH_TYPE_RAW_BASIC_AUTH:return a.createElement(B.default,{basicAuth:t,onFieldChange:this.handleFieldChange.bind(this,"basic"),disableEdit:o});case v.AUTH_TYPE_RAW_BEARER_AUTH:return a.createElement(F.default,{bearerAuth:t,onFieldChange:this.handleFieldChange.bind(this,"bearer"),disableEdit:o});case v.AUTH_TYPE_RAW_JWT_AUTH:return a.createElement(O.default,{jwtAuth:t,onFieldChange:this.handleFieldChange.bind(this,v.AUTH_TYPE_RAW_JWT_AUTH),disableEdit:o,showAuthAdvancedFields:this.props.showAuthAdvancedFields,onToggleAdvancedFields:this.props.onToggleAdvancedFields});case v.AUTH_TYPE_RAW_DIGEST_AUTH:return a.createElement(D.default,{digestAuth:t,showAuthAdvancedFields:this.props.showAuthAdvancedFields,onFieldChange:this.handleFieldChange.bind(this,"digest"),onToggleAdvancedFields:this.props.onToggleAdvancedFields,disableEdit:o});case v.AUTH_TYPE_RAW_O_AUTH_1:return a.createElement(M.default,{oauth1:t,onFieldChange:this.handleFieldChange.bind(this,"oauth1"),showAuthAdvancedFields:this.props.showAuthAdvancedFields,onToggleAdvancedFields:this.props.onToggleAdvancedFields,disableEdit:o});case v.AUTH_TYPE_RAW_NTLM_AUTH:return a.createElement(z.default,{ntlmAuth:t,showAuthAdvancedFields:this.props.showAuthAdvancedFields,onFieldChange:this.handleFieldChange.bind(this,"ntlm"),onToggleAdvancedFields:this.props.onToggleAdvancedFields,disableEdit:o,entityType:n});case v.AUTH_TYPE_RAW_AKAMAI_EDGEGRID:return a.createElement(G.default,{edgegrid:t,onFieldChange:this.handleFieldChange.bind(this,"edgegrid"),showAuthAdvancedFields:this.props.showAuthAdvancedFields,onToggleAdvancedFields:this.props.onToggleAdvancedFields,disableEdit:o});case v.AUTH_TYPE_RAW_O_AUTH_2:return a.createElement(q.default,{editorId:i,isTransient:this.props.isTransient,collectionId:this.props.collectionId,entityId:this.props.entityId,oAuth2:t,oAuth2Session:r,onFieldChange:this.handleFieldChange.bind(this,"oauth2"),onFieldDelete:this.handleFieldDelete.bind(this,"oauth2"),setAuthSessionValues:this.props.setAuthSessionValues,showAuthAdvancedFields:this.props.showAuthAdvancedFields,onToggleAdvancedFields:this.props.onToggleAdvancedFields,onSessionFieldChange:this.handleSessionFieldChange.bind(this,"oauth2"),onUseToken:this.props.onUseToken,disableEdit:o,entityType:n});case v.AUTH_TYPE_RAW_HAWK:return a.createElement(V.default,{hawkAuth:t,showAuthAdvancedFields:this.props.showAuthAdvancedFields,onFieldChange:this.handleFieldChange.bind(this,"hawk"),onToggleAdvancedFields:this.props.onToggleAdvancedFields,disableEdit:o});case v.AUTH_TYPE_RAW_AWS:return a.createElement(H.default,{awsv4:t,showAuthAdvancedFields:this.props.showAuthAdvancedFields,onFieldChange:this.handleFieldChange.bind(this,"awsv4"),onToggleAdvancedFields:this.props.onToggleAdvancedFields,disableEdit:o});default:return null}}getVariableRecommendationClasses(e){return c()({"auth-recommend-variables":!0,"is-warning":e})}getVariableRecommendationIcon(e){return e?a.createElement(u.default,{color:"content-color-primary"}):a.createElement(d.default,{color:"content-color-primary"})}getAuthSelectorWrapperContainerClasses(e){return c()({"auth-editor-wrapper":!0,"auth-editor-wrapper--inactive":e})}render(){const{auth:e}=this.props,n=this.props.type,t="collection"===n?v.AUTH_TYPE_RAW_NO_AUTH:v.AUTH_TYPE_RAW_INHERIT,r=J.get(e,"type",t),i=J.get(e,[r],[]),l=J.get(this.props.authSession,[r],[]),c=`The authorization ${r===v.AUTH_TYPE_RAW_O_AUTH_1||r===v.AUTH_TYPE_RAW_O_AUTH_2?"data":"header"} will be automatically generated when you send the request.`,u=this.props.showAuthVariablesAlert&&!(r===v.AUTH_TYPE_RAW_NO_AUTH||r===v.AUTH_TYPE_RAW_INHERIT)&&this.props.userCanEdit,d=`Add ${this.props.layout===A.REQUESTER_TAB_LAYOUT_1_COLUMN?"authorization":"auth"} data to`,{inheritedAuth:m}=this.props,p=((0,j.resolveStoreInstance)(C.default)||{}).visibilityStatus===R.VISIBILITY_STATUS.public,f=(0,j.resolveStoreInstance)(P.APIAuthenticationHelperStore),b="request"===n&&f.simplifiedAuthView&&f.simplifiedAuthView.get(this.props.editorId);return a.createElement("div",{className:"auth-editor"},"request"===n&&a.createElement(P.APIAuthenticationSimplifiedView,{editor:this.props.editor,open:b}),a.createElement(o.default,{className:this.getAuthSelectorWrapperContainerClasses(b),direction:this.props.layout===A.REQUESTER_TAB_LAYOUT_1_COLUMN?"row":"column",basis:"0",grow:1,shrink:1},a.createElement("div",{className:"auth-selector-wrapper"},a.createElement("div",{className:"auth-type-wrapper"},a.createElement(U.default,{type:n,authTypes:this.props.authTypes,layout:this.props.layout,selectedAuthType:r,onSelect:this.props.onAuthTypeSelect,disableEdit:this.props.disableEdit}),!(r===v.AUTH_TYPE_RAW_NO_AUTH)&&!this.props.hideTargetDescription&&a.createElement("div",{className:"auth-target-description"},a.createElement(s.default,{type:"body-medium",color:"content-color-secondary"},c," Learn more about "),a.createElement(I.default,{className:"auth-target-description__link",to:this.props.authLearnMoreURL||x.AUTH_DOCS,target:"_blank"},a.createElement(s.default,{color:"content-color-secondary"},a.createElement(s.default,{type:"link-default",isExternal:!0},"authorization")))),this.renderAuthOptions(r,d,i)),r!==v.AUTH_TYPE_RAW_NO_AUTH&&this.props.showPreviewButton&&a.createElement(W.default,{authType:r,onSubmitForm:this.props.onSubmitForm})),a.createElement("div",{className:"auth-editor-column-divider"}),a.createElement("div",{className:"auth-type-editor"},u&&a.createElement("div",{className:this.getVariableRecommendationClasses(p)},a.createElement("div",{className:"auth-recommend-variables__icon"},this.getVariableRecommendationIcon(p)),a.createElement("div",{className:"auth-recommend-variables__text"},a.createElement(s.default,{type:"body-medium",color:"content-color-primary"},"Heads up! These parameters hold sensitive data. To keep this data secure while working in a collaborative environment, we recommend using variables. Learn more about "),a.createElement(I.default,{onClick:this.props.onVariablesLearnMore,target:"_blank"},a.createElement(s.default,{type:"link-default",color:"content-color-primary",isExternal:!0},"variables"))),a.createElement("div",{className:"auth-recommend-variables__dismiss-icon",onClick:this.props.onDismissVariablesAlert},a.createElement(h.default,{name:"icon-action-close-stroke",color:"content-color-primary"}))),a.createElement(K.default,{authType:r,entityType:n,inheritedAuth:m,onInheritedAuthClick:this.handleOpenInheritedAuth,inheritedAuthRouteConfig:this.inheritedAuthRouteConfig}),this.renderAuthConfig(r,n,i,l,this.props.editorId))))}})||r;Y.defaultProps={showPreviewButton:!1,disableEdit:!1,hideTargetDescription:!1,hideAddToInAPIKey:!1,authTypes:null,showAuthAdvancedFields:!1,onToggleAdvancedFields:J.noop,authLearnMoreURL:null},Y.propTypes={showAuthVariablesAlert:p().bool.isRequired,onDismissVariablesAlert:p().func.isRequired,showAuthAdvancedFields:p().bool,onToggleAdvancedFields:p().func,onAuthTypeSelect:p().func.isRequired,onFieldChange:p().func.isRequired,showPreviewButton:p().bool,disableEdit:p().bool,hideTargetDescription:p().bool,hideAddToInAPIKey:p().bool,authTypes:p().array,authLearnMoreURL:p().string}},"./runtime-repl/auth/AuthEditorCta.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return c}});var r=t("../../node_modules/react/index.js"),a=t("./node_modules/classnames/index.js"),i=t.n(a),s=t("./js/components/base/Buttons.js"),o=t("./runtime-repl/auth/AuthConstants.js"),l=t("./node_modules/lodash/lodash.js");class c extends r.Component{constructor(e){super(e),this.handleSubmitForm=this.handleSubmitForm.bind(this)}getClasses(){return i()({"auth-type-cta-group":!0,show:this.isAuthPreviewable(this.props.authType)})}isAuthPreviewable(e){return l.includes([o.AUTH_TYPE_RAW_BEARER_AUTH,o.AUTH_TYPE_RAW_BASIC_AUTH,o.AUTH_TYPE_RAW_DIGEST_AUTH,o.AUTH_TYPE_RAW_O_AUTH_1,o.AUTH_TYPE_RAW_O_AUTH_2,o.AUTH_TYPE_RAW_HAWK,o.AUTH_TYPE_RAW_AWS,o.AUTH_TYPE_RAW_AKAMAI_EDGEGRID],e)}handleSubmitForm(){this.props.onSubmitForm&&this.props.onSubmitForm()}render(){const e=this.getClasses();return r.createElement("div",{className:"auth-type-cta-wrapper"},r.createElement("div",{className:e},r.createElement(s.Button,{type:"primary",onClick:this.handleSubmitForm},"Preview Request")))}}},"./runtime-repl/auth/AuthHawkEditor.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return y}});var r=t("../../node_modules/react/index.js"),a=t("../../node_modules/react-dom/index.js"),i=t("./node_modules/prop-types/index.js"),s=t.n(i),o=t("./js/components/base/Buttons.js"),l=t("./js/components/base/Inputs.js"),c=t("./js/components/base/Dropdowns.js"),u=t("./js/components/base/InfoButton.js"),d=t("./js/components/base/AutoSuggest/AutoSuggestInput.js"),h=t("./runtime-repl/auth/authUtil.js"),m=t("./js/stores/StoreManager.js"),p=t("./runtime-repl/_common/components/stores/ActionMenuStore.js"),f=t("./runtime-repl/auth/RequestHawkAuthConstants.js"),b=t("./runtime-repl/auth/AuthAdvancedToggle.js"),g=t("./runtime-repl/auth/AuthAdvancedDescription.js");class y extends r.Component{constructor(e){super(e),this.actionMenuStore=(0,m.resolveStoreInstance)(p.default)}getValue(e,n){return(0,h.getAuthValue)(this.props.hawkAuth,e,n)}handleFieldChange(e,n){this.props.onFieldChange&&this.props.onFieldChange(e,n)}handleSelectionChange(e,n,t){const r=e&&(0,a.findDOMNode)(this.refs[e]);if(!n||!r)return this.actionMenuStore.clear();this.actionMenuStore.setActionMenuState(!0,r,n,t,"autoSuggest",this.handleFieldChange.bind(this,e))}render(){const{disableEdit:e}=this.props;return r.createElement("div",{className:"auth-o-auth-1-container"},r.createElement("div",{className:"auth-input-wrapper"},r.createElement("div",{className:"auth-input-group auth-input--auth-id"},r.createElement("div",{className:"auth-label"}," Hawk Auth ID "),r.createElement("div",{className:"auth-input"},r.createElement(d.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"Hawk Auth ID",value:this.getValue("authId"),onChange:this.handleFieldChange.bind(this,"authId"),readOnly:e,ref:"authId",onSelectionChange:this.handleSelectionChange.bind(this,"authId")}))),r.createElement("div",{className:"auth-input-group auth-input--auth-key"},r.createElement("div",{className:"auth-label"}," Hawk Auth Key "),r.createElement("div",{className:"auth-input"},r.createElement(d.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"Hawk Auth Key",value:this.getValue("authKey"),onChange:this.handleFieldChange.bind(this,"authKey"),readOnly:e,ref:"authKey",onSelectionChange:this.handleSelectionChange.bind(this,"authKey")}))),r.createElement("div",{className:"auth-input-group auth-input--algorithm"},r.createElement("div",{className:"auth-label"}," Algorithm "),r.createElement("div",{className:"auth-input"},r.createElement(c.Dropdown,{onSelect:this.handleFieldChange.bind(this,"algorithm")},r.createElement(c.DropdownButton,{size:"small",type:"secondary"},r.createElement(o.Button,null,r.createElement("span",null,this.getValue("algorithm",f.ALGORITHM.SHA_256)))),r.createElement(c.DropdownMenu,{fluid:!0},r.createElement(c.MenuItem,{refKey:f.ALGORITHM.SHA_256,disabled:e},r.createElement("span",null,f.ALGORITHM.SHA_256)),r.createElement(c.MenuItem,{refKey:f.ALGORITHM.SHA_1,disabled:e},r.createElement("span",null,f.ALGORITHM.SHA_1)))))),r.createElement("div",{className:"auth-form-group"},r.createElement(b.default,{isOpen:this.props.showAuthAdvancedFields,onToggleAdvancedFields:this.props.onToggleAdvancedFields})),this.props.showAuthAdvancedFields&&r.createElement("div",null,r.createElement(g.default,null),r.createElement("div",{className:"auth-input-group auth-input--user"},r.createElement("div",{className:"auth-label"}," User "),r.createElement("div",{className:"auth-input"},r.createElement(d.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"Username",value:this.getValue("user"),onChange:this.handleFieldChange.bind(this,"user"),readOnly:e,ref:"user",onSelectionChange:this.handleSelectionChange.bind(this,"user")}))),r.createElement("div",{className:"auth-input-group auth-input--nonce"},r.createElement("div",{className:"auth-label"},"Nonce",r.createElement(u.default,{tooltip:"A random string generated by the client."})),r.createElement("div",{className:"auth-input"},r.createElement(d.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"Nonce",value:this.getValue("nonce"),onChange:this.handleFieldChange.bind(this,"nonce"),readOnly:e,ref:"nonce",onSelectionChange:this.handleSelectionChange.bind(this,"nonce")}))),r.createElement("div",{className:"auth-input-group auth-input--extra-data"},r.createElement("div",{className:"auth-label"},"ext",r.createElement(u.default,{tooltip:"Any application-specific information to be sent with the request."})),r.createElement("div",{className:"auth-input"},r.createElement(d.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"e.g. some-app-extra-data",value:this.getValue("extraData"),onChange:this.handleFieldChange.bind(this,"extraData"),readOnly:e,ref:"extraData",onSelectionChange:this.handleSelectionChange.bind(this,"extraData")}))),r.createElement("div",{className:"auth-input-group auth-input--app-id"},r.createElement("div",{className:"auth-label"},"app",r.createElement(u.default,{tooltip:"This provides binding between the credentials and the application in a way that prevents an attacker from tricking an application to use credentials issued to someone else."})),r.createElement("div",{className:"auth-input"},r.createElement(d.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"Application ID",value:this.getValue("app"),onChange:this.handleFieldChange.bind(this,"app"),readOnly:e,ref:"app",onSelectionChange:this.handleSelectionChange.bind(this,"app")}))),r.createElement("div",{className:"auth-input-group auth-input--delegation"},r.createElement("div",{className:"auth-label"},"dlg",r.createElement(u.default,{tooltip:"The application id of the application the credentials were directly issued to."})),r.createElement("div",{className:"auth-input"},r.createElement(d.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"e.g. delegated-by",value:this.getValue("delegation"),onChange:this.handleFieldChange.bind(this,"delegation"),readOnly:e,ref:"delegation",onSelectionChange:this.handleSelectionChange.bind(this,"delegation")}))),r.createElement("div",{className:"auth-input-group auth-input--timestamp"},r.createElement("div",{className:"auth-label"}," Timestamp "),r.createElement("div",{className:"auth-input"},r.createElement(d.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"Timestamp",value:this.getValue("timestamp"),onChange:this.handleFieldChange.bind(this,"timestamp"),readOnly:e,ref:"timestamp",onSelectionChange:this.handleSelectionChange.bind(this,"timestamp")}))),r.createElement("div",{className:"auth-input--payload-hash--wrapper"},r.createElement("div",{className:"auth-input-group auth-input--payload-hash"},r.createElement("div",{className:"auth-input"},r.createElement(l.Checkbox,{checked:this.getValue("includePayloadHash",!1),onChange:this.handleFieldChange.bind(this,"includePayloadHash"),disabled:e}),r.createElement("span",{className:"auth-input__checkbox-label",onClick:this.handleFieldChange.bind(this,"includePayloadHash",!this.getValue("includePayloadHash",!1))},"Include payload hash",r.createElement(u.default,{tooltip:"Hawk authentication provides optional support for payload validation. If this option is selected, the payload hash will be calculated and included in MAC calculation and in Authorization header."}))))))))}}y.propTypes={hawkAuth:s().array.isRequired,onFieldChange:s().func.isRequired,onToggleAdvancedFields:s().func.isRequired,showAuthAdvancedFields:s().bool.isRequired}},"./runtime-repl/auth/AuthNTLMEditor.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return w}});var r,a=t("../../node_modules/react/index.js"),i=t("../../node_modules/react-dom/index.js"),s=t("../../node_modules/mobx-react/dist/mobx-react.module.js"),o=t("./node_modules/classnames/index.js"),l=t.n(o),c=t("./node_modules/prop-types/index.js"),u=t.n(c),d=t("./js/components/base/InfoButton.js"),h=t("./js/components/base/AutoSuggest/AutoSuggestInput.js"),m=t("./js/components/base/WarningButton.js"),p=t("./runtime-repl/auth/authUtil.js"),f=t("./js/stores/StoreManager.js"),b=t("./runtime-repl/_common/components/stores/ActionMenuStore.js"),g=t("./runtime-repl/_common/components/ArtemisEmptyState/ArtemisEmptyState.js"),y=t("./runtime-repl/agent/AgentConstants.js"),v=t("./runtime-repl/auth/AuthAdvancedToggle.js"),T=t("./runtime-repl/auth/AuthAdvancedDescription.js"),A=t("./node_modules/lodash/lodash.js");let w=(0,s.observer)(r=class extends a.Component{constructor(e){super(e),this.state={parsedDomain:"",usernameWarningMessage:""},this.updateDomainPreview(),this.actionMenuStore=(0,f.resolveStoreInstance)(b.default)}getParamsFromUsername(e){if(!e||"string"!=typeof e)return{username:e,domain:""};const n=e.split("\\"),t=e.split("@");return t.length>1&&n.length>1?{username:e,domain:""}:n&&2===n.length&&n[0]&&n[1]?{username:n[1],domain:n[0]}:t&&2===t.length&&t[0]&&t[1]?{username:t[0],domain:t[1]}:{username:e,domain:""}}getUsernameValidationMessage(e){const n=new Set(["@","'","[","]",":","|","&","<",">","+","=",";",",","?","*","%","/","\\"]);return e&&"string"==typeof e?this.hasCharacters(e,n)?"Username contains invalid characters":"NONE"===e?"Username is a restricted word":e.length>256?"Username is too long":"":""}getValue(e){return(0,p.getAuthValue)(this.props.ntlmAuth,e)}getUsernameInputClassnames(){return l()("auth-input",{"has-warning":this.state.usernameWarningMessage})}hasCharacters(e,n){if(!(e&&"string"==typeof e&&n instanceof Set))return!1;return void 0!==e.split("").find((e=>n.has(e)))}updateDomainPreview(){let e=this.getValue("username");const n=this.getValue("domain"),t=this.getParamsFromUsername(e);n||(e=t.username),this.setState({parsedDomain:t.domain||"",usernameWarningMessage:this.getUsernameValidationMessage(e)})}handleFieldChange(e,n){this.props.onFieldChange&&this.props.onFieldChange(e,n)}handleSelectionChange(e,n,t){const r=e&&(0,i.findDOMNode)(this.refs[e]);if(!n||!r)return this.actionMenuStore.clear();this.actionMenuStore.setActionMenuState(!0,r,n,t,"autoSuggest",this.handleFieldChange.bind(this,e))}render(){const{disableEdit:e}=this.props;return A.get(pm.runtime,"agent.stat.type")===y.TYPES.XHR?a.createElement(g.default,{className:"auth-ntlm-unavailable-container",title:"Authorization helper unavailable",message:"To customize your auth scheme, use the Postman Desktop Agent.",enablePrimaryAction:"request"===this.props.entityType}):a.createElement("div",{className:"auth-ntlm-auth-container"},a.createElement("div",{className:"auth-input-wrapper"},a.createElement("div",{className:"auth-input-group auth-input--username"},a.createElement("div",{className:"auth-label"}," Username "),a.createElement("div",{className:this.getUsernameInputClassnames()},a.createElement(h.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"Username",value:this.getValue("username"),onChange:this.handleFieldChange.bind(this,"username"),onBlur:this.updateDomainPreview.bind(this),readOnly:e,ref:"username",onSelectionChange:this.handleSelectionChange.bind(this,"username")}),this.state.usernameWarningMessage&&a.createElement(m.default,{tooltip:this.state.usernameWarningMessage,tooltipPlacement:"top"}))),a.createElement("div",{className:"auth-input-group auth-input--password"},a.createElement("div",{className:"auth-label"}," Password "),a.createElement("div",{className:"auth-input"},a.createElement(h.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"Password",value:this.getValue("password"),onChange:this.handleFieldChange.bind(this,"password"),validation:p.variableValidation,readOnly:e,ref:"password",onSelectionChange:this.handleSelectionChange.bind(this,"password")}))),a.createElement("div",{className:"auth-form-group"},a.createElement(v.default,{isOpen:this.props.showAuthAdvancedFields,onToggleAdvancedFields:this.props.onToggleAdvancedFields})),this.props.showAuthAdvancedFields&&a.createElement("div",null,a.createElement(T.default,null),a.createElement("div",{className:"auth-input-group auth-input--domain"},a.createElement("div",{className:"auth-label"},"Domain",a.createElement(d.default,{tooltip:"The domain/host to authenticate against."})),a.createElement("div",{className:"auth-input"},a.createElement(h.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:this.state.parsedDomain||"e.g. example.com",value:this.getValue("domain"),onBlur:this.updateDomainPreview.bind(this),onChange:this.handleFieldChange.bind(this,"domain"),readOnly:e,ref:"domain",onSelectionChange:this.handleSelectionChange.bind(this,"domain")}))),a.createElement("div",{className:"auth-input-group auth-input--workstation"},a.createElement("div",{className:"auth-label"},"Workstation",a.createElement(d.default,{tooltip:"The hostname of your pc."})),a.createElement("div",{className:"auth-input"},a.createElement(h.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"e.g. John-PC",value:this.getValue("workstation"),onChange:this.handleFieldChange.bind(this,"workstation"),readOnly:e,ref:"workstation",onSelectionChange:this.handleSelectionChange.bind(this,"workstation")}))))))}})||r;w.propTypes={ntlmAuth:u().array.isRequired,onFieldChange:u().func.isRequired,onToggleAdvancedFields:u().func.isRequired,showAuthAdvancedFields:u().bool.isRequired}},"./runtime-repl/auth/AuthTypeSelector.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return c}});var r=t("../../node_modules/react/index.js"),a=t("../../node_modules/@postman/aether/esmLib/src/components/Label/Label.js"),i=t("./js/components/base/Dropdowns.js"),s=t("./js/components/base/Buttons.js"),o=t("./runtime-repl/auth/AuthConstants.js"),l=t("./node_modules/lodash/lodash.js");class c extends r.Component{constructor(e){super(e),this.handleSelect=this.handleSelect.bind(this)}handleSelect(e){this.props.onSelect&&this.props.onSelect(e)}getMenu(){const{disableEdit:e,authTypes:n}=this.props;if(!l.isEmpty(n))return l.map(n,(n=>r.createElement(i.MenuItem,{key:n,refKey:n,disabled:e},r.createElement("span",null,o.AUTH_TYPE_LABEL_MAP[n]))));const t=[r.createElement(i.MenuItem,{key:o.AUTH_TYPE_RAW_NO_AUTH,refKey:o.AUTH_TYPE_RAW_NO_AUTH,disabled:e},r.createElement("span",null,o.AUTH_TYPE_NO_AUTH)),r.createElement(i.MenuItem,{key:o.AUTH_TYPE_RAW_APIKEY,refKey:o.AUTH_TYPE_RAW_APIKEY,disabled:e},r.createElement("span",null,o.AUTH_TYPE_APIKEY)),r.createElement(i.MenuItem,{key:o.AUTH_TYPE_RAW_BEARER_AUTH,refKey:o.AUTH_TYPE_RAW_BEARER_AUTH,disabled:e},r.createElement("span",null,o.AUTH_TYPE_BEARER_AUTH)),r.createElement(i.MenuItem,{key:o.AUTH_TYPE_RAW_JWT_AUTH,refKey:o.AUTH_TYPE_RAW_JWT_AUTH,disabled:e},r.createElement("span",null,o.AUTH_TYPE_JWT_AUTH)),r.createElement(i.MenuItem,{key:o.AUTH_TYPE_RAW_BASIC_AUTH,refKey:o.AUTH_TYPE_RAW_BASIC_AUTH,disabled:e},r.createElement("span",null,o.AUTH_TYPE_BASIC_AUTH)),r.createElement(i.MenuItem,{key:o.AUTH_TYPE_RAW_DIGEST_AUTH,refKey:o.AUTH_TYPE_RAW_DIGEST_AUTH,disabled:e},r.createElement("span",null,o.AUTH_TYPE_DIGEST_AUTH)),r.createElement(i.MenuItem,{key:o.AUTH_TYPE_RAW_O_AUTH_1,refKey:o.AUTH_TYPE_RAW_O_AUTH_1,disabled:e},r.createElement("span",null,o.AUTH_TYPE_O_AUTH_1)),r.createElement(i.MenuItem,{key:o.AUTH_TYPE_RAW_O_AUTH_2,refKey:o.AUTH_TYPE_RAW_O_AUTH_2,disabled:e},r.createElement("span",null,o.AUTH_TYPE_O_AUTH_2)),r.createElement(i.MenuItem,{key:o.AUTH_TYPE_RAW_HAWK,refKey:o.AUTH_TYPE_RAW_HAWK,disabled:e},r.createElement("span",null,o.AUTH_TYPE_HAWK)),r.createElement(i.MenuItem,{key:o.AUTH_TYPE_RAW_AWS,refKey:o.AUTH_TYPE_RAW_AWS,disabled:e},r.createElement("span",null,o.AUTH_TYPE_AWS)),r.createElement(i.MenuItem,{key:o.AUTH_TYPE_RAW_NTLM_AUTH,refKey:o.AUTH_TYPE_RAW_NTLM_AUTH,disabled:e},r.createElement("span",null,o.AUTH_TYPE_NTLM_AUTH)),r.createElement(i.MenuItem,{key:o.AUTH_TYPE_RAW_AKAMAI_EDGEGRID,refKey:o.AUTH_TYPE_RAW_AKAMAI_EDGEGRID,disabled:e},r.createElement("span",null,o.AUTH_TYPE_AKAMAI_EDGEGRID))];return"collection"!==this.props.type?[r.createElement(i.MenuItem,{key:o.AUTH_TYPE_RAW_INHERIT,refKey:o.AUTH_TYPE_RAW_INHERIT,disabled:this.props.disableEdit},r.createElement("span",null,o.AUTH_TYPE_INHERIT)),...t]:t}render(){return r.createElement("div",{className:"auth-type-selector"},r.createElement("div",{className:"auth-type-selector__label"},r.createElement(a.default,{type:"primary",color:"content-color-primary",text:"Type"})),r.createElement("div",{className:"auth-type-selector__value"},r.createElement(i.Dropdown,{onSelect:this.handleSelect,fullWidth:!0},r.createElement(i.DropdownButton,{type:"secondary",size:"small"},r.createElement(s.Button,null,r.createElement("span",null,o.AUTH_TYPE_LABEL_MAP[this.props.selectedAuthType]))),r.createElement(i.DropdownMenu,{fluid:!0},this.getMenu()))))}}},"./runtime-repl/auth/InheritedAuthInfo.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return c}});var r=t("../../node_modules/react/index.js"),a=t("../../node_modules/@postman/aether/esmLib/src/components/Text/Text.js"),i=t("./runtime-repl/auth/AuthConstants.js"),s=t("./appsdk/components/link/Link.js"),o=t("./node_modules/lodash/lodash.js");function l(e){return o.truncate(e,{length:i.ENTITY_NAME_MAX_LENGTH})}function c({inheritedAuth:e,authType:n,entityType:t,onInheritedAuthClick:c,inheritedAuthRouteConfig:u}){if(n!==i.AUTH_TYPE_RAW_INHERIT)return!1;if(!o.isEmpty(e)){const n=e=>{e.metaKey||e.ctrlKey||(e.preventDefault(),c())};return r.createElement("div",{className:"auth-no-auth-container"},r.createElement("span",null,r.createElement(a.default,{type:"body-medium"},"This"," ",t," ","is using"," ",i.AUTH_TYPE_LABEL_MAP[e.type]," ","from"," ",e.entity.type," "),u?r.createElement(s.default,{className:"auth-parent-auth",onClick:n,to:u()},r.createElement(a.default,{type:"link-default"},l(e.entity.name))):r.createElement("span",{className:"auth-parent-auth",onClick:c},r.createElement(a.default,{type:"link-default"},l(e.entity.name))),e.entity.name.length>i.ENTITY_NAME_MAX_LENGTH?null:r.createElement("span",null,".")))}return r.createElement("div",{className:"auth-no-auth-container"},r.createElement("span",null,"This"," ",t," ","is not inheriting any authorization helper at the moment. Save it in a collection to use the parent's authorization helper."))}},"./runtime-repl/auth/OAuth1Editor.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return A}});var r=t("../../node_modules/react/index.js"),a=t("../../node_modules/react-dom/index.js"),i=t("./node_modules/prop-types/index.js"),s=t.n(i),o=t("./js/components/base/Dropdowns.js"),l=t("./js/components/base/Buttons.js"),c=t("./js/components/base/Inputs.js"),u=t("./js/components/base/InfoButton.js"),d=t("./js/components/base/TextArea.js"),h=t("./js/components/base/FileInput.js"),m=t("./js/components/base/AutoSuggest/AutoSuggestInput.js"),p=t("./runtime-repl/auth/authUtil.js"),f=t("./js/stores/StoreManager.js"),b=t("./runtime-repl/_common/components/stores/ActionMenuStore.js"),g=t("./runtime-repl/auth/RequestOAuth1SignatureMethodConstants.js"),y=t("./runtime-repl/auth/AuthAdvancedToggle.js"),v=t("./runtime-repl/auth/AuthAdvancedDescription.js"),T=t("./node_modules/lodash/lodash.js");class A extends r.Component{constructor(e){super(e),this.handlePrivateKeyFileSelect=this.handlePrivateKeyFileSelect.bind(this),this.actionMenuStore=(0,f.resolveStoreInstance)(b.default)}getValue(e,n){return(0,p.getAuthValue)(this.props.oauth1,e,n)}handleFieldChange(e,n){"disableHeaderEncoding"===e&&(n=!n),this.props.onFieldChange&&this.props.onFieldChange(e,n)}handlePrivateKeyFileSelect(e){pm.runtime.readFile(e[0],((e,n)=>{if(e)return pm.toasts.error(e.message);this.handleFieldChange("privateKey",n.toString())}))}handleSelectionChange(e,n,t){const r=e&&(0,a.findDOMNode)(this.refs[e]);if(!n||!r)return this.actionMenuStore.clear();this.actionMenuStore.setActionMenuState(!0,r,n,t,"autoSuggest",this.handleFieldChange.bind(this,e))}render(){const{disableEdit:e}=this.props,n=T.includes(this.getValue("signatureMethod",g.SIGNATURE_METHOD_HMAC_SHA1),"RSA");return r.createElement("div",{className:"auth-o-auth-1-container"},r.createElement("div",{className:"auth-input-wrapper"},r.createElement("div",{className:"auth-input-group auth-input--signatureMethod"},r.createElement("div",{className:"auth-label"},"Signature Method",r.createElement(u.default,{tooltip:"The signature method the Consumer used to sign the request."})),r.createElement("div",{className:"auth-input"},r.createElement(o.Dropdown,{onSelect:this.handleFieldChange.bind(this,"signatureMethod")},r.createElement(o.DropdownButton,{type:"secondary",size:"small"},r.createElement(l.Button,null,r.createElement("span",null,this.getValue("signatureMethod",g.SIGNATURE_METHOD_HMAC_SHA1)))),r.createElement(o.DropdownMenu,{fluid:!0},r.createElement(o.MenuItem,{refKey:g.SIGNATURE_METHOD_HMAC_SHA1,disabled:e},r.createElement("span",null,g.SIGNATURE_METHOD_HMAC_SHA1)),r.createElement(o.MenuItem,{refKey:g.SIGNATURE_METHOD_HMAC_SHA256,disabled:e},r.createElement("span",null,g.SIGNATURE_METHOD_HMAC_SHA256)),r.createElement(o.MenuItem,{refKey:g.SIGNATURE_METHOD_HMAC_SHA512,disabled:e},r.createElement("span",null,g.SIGNATURE_METHOD_HMAC_SHA512)),r.createElement(o.MenuItem,{refKey:g.SIGNATURE_METHOD_RSA_SHA1,disabled:e},r.createElement("span",null,g.SIGNATURE_METHOD_RSA_SHA1)),r.createElement(o.MenuItem,{refKey:g.SIGNATURE_METHOD_RSA_SHA256,disabled:e},r.createElement("span",null,g.SIGNATURE_METHOD_RSA_SHA256)),r.createElement(o.MenuItem,{refKey:g.SIGNATURE_METHOD_RSA_SHA512,disabled:e},r.createElement("span",null,g.SIGNATURE_METHOD_RSA_SHA512)),r.createElement(o.MenuItem,{refKey:g.SIGNATURE_METHOD_HMAC_PLAINTEXT,disabled:e},r.createElement("span",null,g.SIGNATURE_METHOD_HMAC_PLAINTEXT)))))),r.createElement("div",{className:"auth-input-group auth-input--consumerKey"},r.createElement("div",{className:"auth-label"},"Consumer Key",r.createElement(u.default,{tooltip:"A value used by the Consumer to identify itself to the Service Provider."})),r.createElement("div",{className:"auth-input"},r.createElement(m.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"Consumer Key",value:this.getValue("consumerKey"),onChange:this.handleFieldChange.bind(this,"consumerKey"),readOnly:e,ref:"consumerKey",onSelectionChange:this.handleSelectionChange.bind(this,"consumerKey")}))),!n&&r.createElement("div",{className:"auth-input-group auth-input--consumerSecret"},r.createElement("div",{className:"auth-label"},"Consumer Secret",r.createElement(u.default,{tooltip:"A secret used by the Consumer to establish ownership of the Consumer Key."})),r.createElement("div",{className:"auth-input"},r.createElement(m.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"Consumer Secret",value:this.getValue("consumerSecret"),onChange:this.handleFieldChange.bind(this,"consumerSecret"),readOnly:e,ref:"consumerSecret",onSelectionChange:this.handleSelectionChange.bind(this,"consumerSecret")}))),r.createElement("div",{className:"auth-input-group auth-input--token"},r.createElement("div",{className:"auth-label"}," Access Token "),r.createElement("div",{className:"auth-input"},r.createElement(m.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"Access Token",value:this.getValue("token"),onChange:this.handleFieldChange.bind(this,"token"),readOnly:e,ref:"token",onSelectionChange:this.handleSelectionChange.bind(this,"token")}))),!n&&r.createElement("div",{className:"auth-input-group auth-input--tokenSecret"},r.createElement("div",{className:"auth-label"},"Token Secret",r.createElement(u.default,{tooltip:"A secret used by the Consumer to establish ownership of a given Token."})),r.createElement("div",{className:"auth-input"},r.createElement(m.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"Token Secret",value:this.getValue("tokenSecret"),onChange:this.handleFieldChange.bind(this,"tokenSecret"),readOnly:e,ref:"tokenSecret",onSelectionChange:this.handleSelectionChange.bind(this,"tokenSecret")}))),n&&r.createElement(r.Fragment,null,r.createElement("div",{className:"auth-input-group auth-input--privateKey-file"},r.createElement("div",{className:"auth-label"},"Private Key",r.createElement(u.default,{tooltip:"RSA private key in PEM format for signing the request."})),r.createElement("div",{className:"auth-input"},r.createElement(h.default,{onSelect:this.handlePrivateKeyFileSelect,disabled:e}))),r.createElement("div",{className:"auth-input-group auth-input--privateKey"},r.createElement("div",{className:"auth-label"}),r.createElement("div",{className:"auth-input-dynamic"},r.createElement(d.default,{className:"oauth1-private-key-value",placeholder:"-----BEGIN RSA PRIVATE KEY-----\nprivate key in PEM format\n-----END RSA PRIVATE KEY-----",value:this.getValue("privateKey"),onChange:this.handleFieldChange.bind(this,"privateKey"),disabled:e})))),r.createElement("div",{className:"auth-form-group"},r.createElement(y.default,{isOpen:this.props.showAuthAdvancedFields,onToggleAdvancedFields:this.props.onToggleAdvancedFields})),this.props.showAuthAdvancedFields&&r.createElement("div",null,r.createElement(v.default,null),r.createElement("div",{className:"auth-input-group auth-input--callback"},r.createElement("div",{className:"auth-label"},"Callback URL",r.createElement(u.default,{tooltip:"An absolute URL where the service provider will redirect to after obtaining user authorization."})),r.createElement("div",{className:"auth-input"},r.createElement(m.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"Callback URL",value:this.getValue("callback"),onChange:this.handleFieldChange.bind(this,"callback"),readOnly:e,ref:"callback",onSelectionChange:this.handleSelectionChange.bind(this,"callback")}))),r.createElement("div",{className:"auth-input-group auth-input--verifier"},r.createElement("div",{className:"auth-label"},"Verifier",r.createElement(u.default,{tooltip:"The verification code given by the service provider after obtaining user authorization."})),r.createElement("div",{className:"auth-input"},r.createElement(m.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"Verifier",value:this.getValue("verifier"),onChange:this.handleFieldChange.bind(this,"verifier"),readOnly:e,ref:"verifier",onSelectionChange:this.handleSelectionChange.bind(this,"verifier")}))),r.createElement("div",{className:"auth-input-group auth-input--timestamp"},r.createElement("div",{className:"auth-label"}," Timestamp "),r.createElement("div",{className:"auth-input"},r.createElement(m.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"Timestamp",value:this.getValue("timestamp"),onChange:this.handleFieldChange.bind(this,"timestamp"),readOnly:e,ref:"timestamp",onSelectionChange:this.handleSelectionChange.bind(this,"timestamp")}))),r.createElement("div",{className:"auth-input-group auth-input--nonce"},r.createElement("div",{className:"auth-label"},"Nonce",r.createElement(u.default,{tooltip:"A random string generated by the client."})),r.createElement("div",{className:"auth-input"},r.createElement(m.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"Nonce",value:this.getValue("nonce"),onChange:this.handleFieldChange.bind(this,"nonce"),readOnly:e,ref:"nonce",onSelectionChange:this.handleSelectionChange.bind(this,"nonce")}))),r.createElement("div",{className:"auth-input-group auth-input--version"},r.createElement("div",{className:"auth-label"}," Version "),r.createElement("div",{className:"auth-input"},r.createElement(m.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"e.g. 1.0",value:this.getValue("version"),onChange:this.handleFieldChange.bind(this,"version"),readOnly:e,ref:"version",onSelectionChange:this.handleSelectionChange.bind(this,"version")}))),r.createElement("div",{className:"auth-input-group auth-input--realm"},r.createElement("div",{className:"auth-label"},"Realm",r.createElement(u.default,{tooltip:"This is a string specified by the server in the WWW-Authenticate response header. It should contain at least the name of the host performing the authentication and might additionally indicate the collection of users who might have access."})),r.createElement("div",{className:"auth-input"},r.createElement(m.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"testrealm@example.com",value:this.getValue("realm"),onChange:this.handleFieldChange.bind(this,"realm"),readOnly:e,ref:"realm",onSelectionChange:this.handleSelectionChange.bind(this,"realm")}))),r.createElement("div",{className:"auth-input--add-empty-params-to-signature--wrapper"},r.createElement("div",{className:"auth-input-group auth-input--include-body-hash"},r.createElement("div",{className:"auth-input"},r.createElement(c.Checkbox,{checked:this.getValue("includeBodyHash",!1),onChange:this.handleFieldChange.bind(this,"includeBodyHash"),disabled:e}),r.createElement("span",{className:"auth-input__checkbox-label",onClick:this.handleFieldChange.bind(this,"includeBodyHash",!this.getValue("includeBodyHash",!1))},"Include body hash",r.createElement(u.default,{tooltip:"OAuth Request Body Hash extension provides support for request body integrity check for content types other than application/x-www-form-urlencoded. If this option is selected, the oauth_body_hash parameter will be calculated and added to the request."})))),r.createElement("div",{className:"auth-input-group auth-input--add-empty-params-to-signature"},r.createElement("div",{className:"auth-input"},r.createElement(c.Checkbox,{checked:this.getValue("addEmptyParamsToSign",!1),onChange:this.handleFieldChange.bind(this,"addEmptyParamsToSign"),disabled:e}),r.createElement("span",{className:"auth-input__checkbox-label",onClick:this.handleFieldChange.bind(this,"addEmptyParamsToSign",!this.getValue("addEmptyParamsToSign",!1))},"Add empty parameters to signature",r.createElement(u.default,{tooltip:"Some implementations of OAuth1.0 require empty parameters to be added to the signature. If this option is selected, any of the above fields which have been left empty will be included in the authorization data."})))),this.getValue("addParamsToHeader")&&r.createElement("div",{className:"auth-input-group auth-input--encode-auth-header-param"},r.createElement("div",{className:"auth-input"},r.createElement(c.Checkbox,{checked:!this.getValue("disableHeaderEncoding",!1),onChange:this.handleFieldChange.bind(this,"disableHeaderEncoding"),disabled:e}),r.createElement("span",{className:"auth-input__checkbox-label",onClick:this.handleFieldChange.bind(this,"disableHeaderEncoding",this.getValue("disableHeaderEncoding",!1))},"Encode the parameters in the Authorization header")))))))}}A.propTypes={oauth1:s().array.isRequired,onFieldChange:s().func.isRequired,onToggleAdvancedFields:s().func.isRequired,showAuthAdvancedFields:s().bool.isRequired}},"./runtime-repl/auth/OAuth2AdvancedGetAccessTokenFields.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return v}});var r=t("../../node_modules/react/index.js"),a=t("../../node_modules/react-dom/index.js"),i=t("./node_modules/classnames/index.js"),s=t.n(i),o=t("../../node_modules/@postman/aether/esmLib/src/components/Button/Button.js"),l=t("../../node_modules/@postman/aether/esmLib/src/components/Text/Text.js"),c=t("./node_modules/uuid/v4.js"),u=t.n(c),d=t("./js/stores/StoreManager.js"),h=t("./runtime-repl/_common/components/stores/ActionMenuStore.js"),m=t("./js/components/base/Buttons.js"),p=t("./js/components/base/InfoButton.js"),f=t("./js/components/base/AutoSuggest/AutoSuggestInput.js"),b=t("./node_modules/lodash/lodash.js");const g={authorization_code:"Authorization Code",authorization_code_with_pkce:"Authorization Code (With PKCE)",implicit:"Implicit",password_credentials:"Password Credentials",client_credentials:"Client Credentials"},y="This has been moved to Configurations > Advanced.";class v extends r.Component{constructor(e){super(e),this.state={audience:{},resource:{}},this.handleFieldChange=this.handleFieldChange.bind(this),this.handleSelectionChange=this.handleSelectionChange.bind(this),this.handleAddAudience=this.handleAddAudience.bind(this),this.handleAddResource=this.handleAddResource.bind(this),this.handleRemoveAudience=this.handleRemoveAudience.bind(this),this.handleRemoveResource=this.handleRemoveResource.bind(this),this.handleAudienceInputChange=this.handleAudienceInputChange.bind(this),this.handleResourceInputChange=this.handleResourceInputChange.bind(this),this.actionMenuStore=(0,d.resolveStoreInstance)(h.default)}componentDidMount(){const e=b.cloneDeep(this.props.oAuth2.audience),n=b.cloneDeep(this.props.oAuth2.resource);b.isEmpty(e)?this.handleAddAudience():this.setState({audience:e}),b.isEmpty(n)?this.handleAddResource():this.setState({resource:n})}getFieldClasses(e,n){return s()({[e]:!0,disabled:n})}getWrapperClassNames(e,n){return s()({[e]:!0,added:Object.keys(n).length>1})}getAudienceFields(){const e=this.state.audience,n=e&&Object.keys(e),{usingLocalTokenConfig:t}=this.props;return e?n.map((a=>r.createElement("div",{className:this.getWrapperClassNames("oauth2-advanced-fields__field-wrapper",e),key:a},r.createElement("div",{className:this.getFieldClasses("auth-input",t)},r.createElement(f.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"Audience",value:e[a],readOnly:!0,ref:a,onChange:e=>this.handleAudienceInputChange(a,e),onSelectionChange:this.handleSelectionChange.bind(this,a)})),n.length>1&&r.createElement(o.default,{className:"oauth2-advanced-fields__field-wrapper__close-button",icon:"icon-action-close-stroke",type:"tertiary",size:"medium",onClick:()=>this.handleRemoveAudience(a)})))):null}getResourceFields(){const e=this.state.resource,n=e&&Object.keys(e),{usingLocalTokenConfig:t}=this.props;return e?n.map((a=>r.createElement("div",{className:this.getWrapperClassNames("oauth2-advanced-fields__field-wrapper",e),key:a},r.createElement("div",{className:this.getFieldClasses("auth-input",t)},r.createElement(f.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"Resource",value:e[a],readOnly:!0,ref:a,onChange:e=>this.handleResourceInputChange(a,e),onSelectionChange:this.handleSelectionChange.bind(this,a)})),n.length>1&&r.createElement(o.default,{className:"oauth2-advanced-fields__field-wrapper__close-button",icon:"icon-action-close-stroke",type:"tertiary",size:"medium",onClick:()=>this.handleRemoveResource(a)})))):null}handleFieldChange(e,n){this.props.onFieldChange&&this.props.onFieldChange(e,n)}handleSelectionChange(e,n,t){const r=e&&(0,a.findDOMNode)(this.refs[e]);if(!n||!r)return this.actionMenuStore.clear();this.actionMenuStore.setActionMenuState(!0,r,n,t,"autoSuggest",this.handleFieldChange.bind(this,e))}handleAddAudience(){const e=b.cloneDeep(this.state.audience);if(e){e[u()()]="",this.setState({audience:e})}}handleAddResource(){const e=b.cloneDeep(this.state.resource);if(e){e[u()()]="",this.setState({resource:e})}}handleAudienceInputChange(e,n){const t=b.cloneDeep(this.props.oAuth2.audience),r=b.cloneDeep(this.state.audience);t&&(""===n?delete t[e]:t[e]=n,this.handleFieldChange("audience",t)),r&&(r[e]=n,this.setState({audience:r}))}handleResourceInputChange(e,n){const t=b.cloneDeep(this.props.oAuth2.resource),r=b.cloneDeep(this.state.resource);t&&(""===n?delete t[e]:t[e]=n,this.handleFieldChange("resource",t)),r&&(r[e]=n,this.setState({resource:r}))}handleRemoveAudience(e){const n=b.cloneDeep(this.props.oAuth2.audience),t=b.cloneDeep(this.state.audience);n&&(delete n[e],this.handleFieldChange("audience",n)),t&&(delete t[e],this.setState({audience:t}))}handleRemoveResource(e){const n=b.cloneDeep(this.props.oAuth2.resource),t=b.cloneDeep(this.state.resource);n&&(delete n[e],this.handleFieldChange("resource",n)),t&&(delete t[e],this.setState({resource:t}))}render(){const{oAuth2:e}=this.props,n=g[e.grant_type];return r.createElement(r.Fragment,null,(n===g.authorization_code||n===g.authorization_code_with_pkce||n===g.client_credentials)&&r.createElement("div",{className:"auth-input-group auth-oauth2-input--resource"},r.createElement("div",{className:"auth-label"},r.createElement(l.default,{type:"body-medium"},"Resource"),r.createElement(p.default,{tooltip:"A URI that indicates the resource/target service where the token is intended to be used."})),r.createElement("div",{className:"oauth2-advanced-fields"},this.getResourceFields(),r.createElement("div",{className:"oauth2-advanced-fields__add-field-button"},r.createElement(o.default,{type:"secondary",text:"Add another resource",onClick:this.handleAddResource,isDisabled:!0,tooltip:y})))),r.createElement("div",{className:"auth-input-group auth-oauth2-input--audience"},r.createElement("div",{className:"auth-label"},r.createElement(l.default,{type:"body-medium"},"Audience"),r.createElement(p.default,{tooltip:"A URI that indicates the target audience/services where the token is intended to be used."})),r.createElement("div",{className:"oauth2-advanced-fields"},this.getAudienceFields(),r.createElement("div",{className:"oauth2-advanced-fields__add-field-button"},r.createElement(o.default,{type:"secondary",text:"Add another audience",onClick:this.handleAddAudience,isDisabled:!0,tooltip:y})))),r.createElement("div",{className:"auth-oauth2-actions-group"},r.createElement(m.Button,{className:"auth-oauth2-actions__request-token",type:"primary",size:"small",onClick:this.props.onRequestToken},"Get New Access Token")))}}},"./runtime-repl/auth/OAuth2Editor.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return J}});var r=t("../../node_modules/react/index.js"),a=t("../../node_modules/styled-components/dist/styled-components.browser.esm.js"),i=t("../../node_modules/react-dom/index.js"),s=t("./node_modules/prop-types/index.js"),o=t.n(s),l=t("../../node_modules/@postman/aether-icons/esmLib/src/Icon/Icon.js"),c=t("./node_modules/moment/moment.js"),u=t.n(c),d=t("../../node_modules/mobx/lib/mobx.module.js"),h=t("../../node_modules/@postman/aether/esmLib/src/components/ToggleSwitch/ToggleSwitch.js"),m=t("../../node_modules/@postman/aether/esmLib/src/components/Tooltip/Tooltip.js"),p=t("../../node_modules/@postman/aether/esmLib/src/components/Text/Text.js"),f=t("../../node_modules/@postman/aether/esmLib/src/components/Spinner/Spinner.js"),b=t("../../node_modules/@postman/aether/esmLib/src/components/Button/Button.js"),g=t("../../node_modules/@postman/aether/esmLib/src/components/Heading/Heading.js"),y=t("../../node_modules/@postman/aether/esmLib/src/components/Banner/Banner.js"),v=t("./node_modules/classnames/index.js"),T=t.n(v),A=t("./runtime-repl/auth/authUtil.js"),w=t("./runtime-repl/auth/oauth2/RefreshTokenHelper.js"),E=t("./js/components/base/Text.js"),S=t("./js/components/base/Buttons.js"),k=t("./js/components/base/InfoButton.js"),I=t("./js/components/base/AutoSuggest/AutoSuggestInput.js"),x=t("./js/components/base/Dropdowns.js"),j=t("./js/stores/EditorStore.js"),C=t("./js/stores/StoreManager.js"),R=t("./runtime-repl/_common/components/stores/ActionMenuStore.js"),P=t("./js/modules/services/AnalyticsService.js"),_=t("./runtime-repl/auth/RequestOAuth2Constants.js"),O=t("./runtime-repl/auth/AuthConstants.js"),N=t("./runtime-repl/auth/OAuth2GetAccessTokenTabsConstants.js"),U=t("./runtime-repl/auth/OAuth2GetAccessTokenFields.js"),L=t("./runtime-repl/auth/OAuth2AdvancedGetAccessTokenFields.js"),B=t("./runtime-repl/auth/OAuth2GetAccessTokenTabs.js"),F=t("./runtime-repl/auth/OAuth2GetAccessTokenTabContents.js"),D=t("./runtime-repl/auth/OAuth2GetAccessTokenTabContent.js"),M=t("./node_modules/lodash/lodash.js");const q=["accessTokenUrl","client_authentication","addTokenTo","authUrl","clientId","clientSecret","grant_type","password","redirect_uri","scope","state","useBrowser","username","challengeAlgorithm","code_verifier","tokenName","authRequestParams","tokenRequestParams","refreshRequestParams"],V=["resource","audience"],W="Available Tokens",H="Access token",z="ID token",G=a.default.div`
    display: block
  `;function K({isTokenSynced:e,isEditable:n,hasToken:t,onRemoveSyncedToken:a,onSyncToken:i}){const s=e?n:n&&t,o=r.createElement(h.default,{name:"Share Token",isChecked:e,onChange:e?a:i,isDisabled:!s,className:"oauth2-share-token"});if(s)return o;let l;return n?t||(l="You must have a token to share it."):l="You do not have permission to edit this token.",r.createElement(m.default,{content:l},o)}class J extends r.Component{constructor(e){super(e),this.model=pm.oAuth2Manager,this.state={savedOAuth2Tokens:this.model.get("savedOAuth2Tokens"),savedOAuth2Config:null,activeTab:N.CONFIGURATION_OPTIONS,isRefreshingToken:!1},this.handleFieldChange=this.handleFieldChange.bind(this),this.loadSavedOauth2Tokens=this.loadSavedOauth2Tokens.bind(this),this.loadSavedOauth2Config=this.loadSavedOauth2Config.bind(this),this.handleTokenDropdownSelect=this.handleTokenDropdownSelect.bind(this),this.handleRequestToken=this.handleRequestToken.bind(this),this.removeSyncedToken=this.removeSyncedToken.bind(this),this.syncCurrentToken=this.syncCurrentToken.bind(this),this.useSyncedToken=this.useSyncedToken.bind(this),this.handleUseToken=this.handleUseToken.bind(this),this.copyConfigToShared=this.copyConfigToShared.bind(this),this.handleTabSelect=this.handleTabSelect.bind(this),this.handleRefreshToken=this.handleRefreshToken.bind(this),this.handleTokenRefreshToggle=this.handleTokenRefreshToggle.bind(this),this.updateTokenData=this.updateTokenData.bind(this),this.getRefreshTokenCTA=this.getRefreshTokenCTA.bind(this),this.handleTokenKeySelect=this.handleTokenKeySelect.bind(this),this.handleAudienceAndResourceMigration=this.handleAudienceAndResourceMigration.bind(this),this.actionMenuStore=(0,C.resolveStoreInstance)(R.default)}componentDidMount(){this.loadSavedOauth2Tokens(),this.loadSavedOauth2Config(),this.attachModelListeners(),pm.mediator.on("updatedOAuth2Token",this.updateTokenData)}componentWillUnmount(){this.detachModelListeners(),pm.mediator.off("updatedOAuth2Token",this.updateTokenData)}getRefreshTokenConfig(){const e=this.getSessionValue("token_id");if(e)return(0,w.getRefreshTokenConfig)(e)}getLocalTokenConfig(){const e=pm.oAuth2Manager.get("oAuth2");return e.challengeAlgorithm=e.algorithm,e.tokenName=e.name,delete e.addTokenTo,e}getSavedTokenConfig(){const e=M.transform(this.state.savedOAuth2Config,((e,n)=>{e[n.key]=n.value}),{});return M.defaults(e,_.OAUTH2_CONFIG_DEFAULTS)}getSharedTokenConfig(){const e=M.transform(this.props.oAuth2,((e,n)=>{e[n.key]=n.value}),{});return M.defaults(e,_.OAUTH2_CONFIG_DEFAULTS)}getValue(e){if("headerPrefix"===e){const e=M.get(M.find(this.props.oAuth2,{key:"headerPrefix"}),"value");return M.isNil(e)?"Bearer":e}return(0,A.getAuthValue)(this.props.oAuth2,e)}getSessionValue(e){return"accessToken"===e?M.get(M.find(this.props.oAuth2Session,{key:"accessToken"}),"value"):(0,A.getAuthValue)(this.props.oAuth2Session,e)}getTokenConfigObject(){return this.useSharedTokenConfig()?this.getSharedTokenConfig():this.isSavedTokenConfigEmpty()?this.getLocalTokenConfig():this.getSavedTokenConfig()}attachModelListeners(){this.model.on("change",this.loadSavedOauth2Tokens),pm.mediator.on("savedAuthsUpdated",this.loadSavedOauth2Config)}detachModelListeners(){this.model.off("change",this.loadSavedOauth2Tokens),pm.mediator.off("savedAuthsUpdated",this.loadSavedOauth2Config)}loadSavedOauth2Tokens(){this.setState({savedOAuth2Tokens:this.model.get("savedOAuth2Tokens")})}loadSavedOauth2Config(e){e?this.setState({savedOAuth2Config:e.oauth2}):(0,A.getSavedAuths)((e=>{this.setState({savedOAuth2Config:e.oauth2})}))}handleFieldChange(e,n){this.props.onFieldChange&&this.props.onFieldChange(e,n)}handleFieldDelete(e){this.props.onFieldDelete&&this.props.onFieldDelete(e)}handleSessionFieldChange(e,n){this.props.onSessionFieldChange&&this.props.onSessionFieldChange(e,n)}handleTabSelect(e){this.setState({activeTab:e})}async handleAudienceAndResourceMigration(){var e;const{disableEdit:n}=this.props,t=this.getTokenConfigObject();if(!t||n)return;let r=[],a="";r=t.grant_type===_.GRANT_TYPES.IMPLICIT?M.cloneDeep(t.authRequestParams)||[]:M.cloneDeep(t.tokenRequestParams)||[];const{audience:i}=t,{resource:s}=t;Object.values(i||{}).forEach((e=>{r.push({key:"audience",value:e,enabled:!0})})),Object.values(s||{}).forEach((e=>{r.push({key:"resource",value:e,enabled:!0})})),t.grant_type===_.GRANT_TYPES.IMPLICIT?(this.handleFieldChange("authRequestParams",r),a=".oauth2-auth-request-editor"):(r.forEach((e=>{e.send_as=_.REQUEST_BODY})),this.handleFieldChange("tokenRequestParams",r),a=".oauth2-token-request-editor"),this.handleFieldDelete("audience"),this.handleFieldDelete("resource"),this.props.showAuthAdvancedFields||this.props.onToggleAdvancedFields(),await(0,d.when)((()=>document.querySelector(a)),{timeout:2e3}).catch((()=>{pm.logger.error("OAuth2Editor: Could not find custom editor after migration")})),null===(e=document.querySelector(a))||void 0===e||e.scrollIntoView(),P.default.addEventV2AndPublish({category:"authorization",action:"migrate_audience_and_resource",label:"oauth2",entityType:this.props.entityType,entityId:this.props.entityId})}isSharedTokenConfigEmpty(){return M(this.props.oAuth2).map((e=>e.key)).without("accessToken","headerPrefix","addTokenTo","tokenType").isEmpty()}isLocalTokenConfigEmpty(){return!M(pm.oAuth2Manager.get("oAuth2")).some(((e,n)=>M.has(_.LEGACY_OAUTH2_DEFAULTS,n)&&e!==_.LEGACY_OAUTH2_DEFAULTS[n]))}isSavedTokenConfigEmpty(){return!M(this.getSavedTokenConfig()).some(((e,n)=>M.has(_.OAUTH2_CONFIG_DEFAULTS,n)&&e!==_.OAUTH2_CONFIG_DEFAULTS[n]))}useSharedTokenConfig(){const e=M.get((0,C.resolveStoreInstance)(j.default).find(this.props.editorId),"model");return!(!e||e.getAdditionalData("isSavedRequest"))||!this.isSharedTokenConfigEmpty()||this.isLocalTokenConfigEmpty()&&this.isSavedTokenConfigEmpty()}copyConfigToShared(){const e=this.getTokenConfigObject();M.forEach(M.keys(_.OAUTH2_CONFIG_DEFAULTS),(n=>{e[n]&&this.handleFieldChange(n,e[n])}))}handleTokenDropdownSelect(e){switch(e){case"manage_tokens":this.openManageTokensModal();break;case"synced_token":this.useSyncedToken();break;default:this.props.onUseToken(e),this.updateTokenData()}}handleUseToken(e){this.props.onUseToken&&this.props.onUseToken(e),M.invoke(this,"refs.access_token.scrollIntoView"),M.invoke(this,"refs.access_token.handleFocus"),this.updateTokenData(),pm.toasts.success("Token added.")}openManageTokensModal(){pm.mediator.trigger("openManageTokensModal",null,this.handleUseToken)}handleRequestToken(){var e,n,t;const r=this.getTokenConfigObject(),a=null==r||null===(e=r.authRequestParams)||void 0===e?void 0:e.length,i=null==r||null===(n=r.tokenRequestParams)||void 0===n?void 0:n.length,s=null==r||null===(t=r.refreshRequestParams)||void 0===t?void 0:t.length;this.model.processOAuth2RequestToken(r,this.props.collectionId,this.props.isTransient),pm.mediator.trigger("showTokenWaitingModal",this.handleUseToken),P.default.addEventV2AndPublish({category:"authorization",action:"get_access_token",label:"oauth2",entityType:this.props.entityType,entityId:this.props.entityId}),a&&P.default.addEventV2AndPublish({category:"authorization",action:"get_access_token",label:"oauth2_auth_request_params",value:a,entityType:this.props.entityType,entityId:this.props.entityId}),i&&P.default.addEventV2AndPublish({category:"authorization",action:"get_access_token",label:"oauth2_token_request_params",value:i,entityType:this.props.entityType,entityId:this.props.entityId}),s&&P.default.addEventV2AndPublish({category:"authorization",action:"get_access_token",label:"oauth2_refresh_request_params",value:s,entityType:this.props.entityType,entityId:this.props.entityId})}async handleRefreshToken(){this.setState({isRefreshingToken:!0});const e=this.getRefreshTokenConfig();e&&e.refresh_token?(await Promise.race([(0,w.refreshTokensForModel)(this.props.entityType,this.props.entityId,{forceRefresh:!0,isTransient:this.props.isTransient,timeout:3e4}),new Promise(((e,n)=>{const t=new Error("Timed out while waiting for token to refresh");t.code="TOKEN_REFRESH_TIMEOUT",setTimeout((()=>n(t)),3e4)}))]).catch((e=>{"TOKEN_REFRESH_TIMEOUT"===e.code&&(0,w.cancelRefreshTokenFlow)(new Error("Timed out while refreshing token")),pm.logger.error("OAuth2Editor: Errored out while refreshing token",e)})),this.setState({isRefreshingToken:!1})):pm.toasts.error("Cannot refresh OAuth2.0 Token. Refresh Token Missing",{dedupeId:"oauth2-token-refresh-error"})}isTokenSynced(){const e=this.getValue("accessToken"),n=this.getSessionValue("accessToken");return e&&(e===n||M.isNil(n))}removeSyncedToken(){pm.mediator.trigger("showSyncTokenConfirmation",{action:"removeSyncedToken"},(()=>{this.handleFieldChange("accessToken",""),this.handleFieldChange("tokenType",""),P.default.addEventV2AndPublish({category:"authorization",action:"remove_synced_token",label:"oauth2",entityType:this.props.entityType,entityId:this.props.entityId})}))}syncCurrentToken(){pm.mediator.trigger("showSyncTokenConfirmation",{action:this.getValue("accessToken")?"replaceSyncedToken":"syncToken",saveBeforeSyncing:!this.canSyncToken(),editorId:this.props.editorId},(()=>{this.handleFieldChange("accessToken",this.getSessionValue("accessToken")),this.handleFieldChange("tokenType",this.getSessionValue("tokenType")),P.default.addEventV2AndPublish({category:"authorization",action:"sync_token",label:"oauth2",entityType:this.props.entityType,entityId:this.props.entityId})}))}useSyncedToken(){this.props.onUseToken({access_token:this.getValue("accessToken"),token_type:this.getValue("tokenType")})}canSyncToken(){const e=M.get((0,C.resolveStoreInstance)(j.default).find(this.props.editorId),"model");return!e||e.getAdditionalData("isSavedRequest")}handleSelectionChange(e,n,t,r){const a=e&&(0,i.findDOMNode)(this.refs[e]);if(!t||!a)return this.actionMenuStore.clear();this.actionMenuStore.setActionMenuState(!0,a,t,r,"autoSuggest",n)}isConfigOptionsChanged(){const e=this.getTokenConfigObject();return!!e&&M(q).some((n=>e[n]!==_.OAUTH2_CONFIG_DEFAULTS[n]))}isAdvancedOptionsChanged(){const e=this.getTokenConfigObject();return!!e&&M(V).some((n=>!M.isEmpty(e[n])))}getExpiryInfo(e){return`Expires at ${u()(e).format("h:mm a")} today.`}isTokenRefreshable(){const e=this.getSessionValue("token_id");return!!e&&(0,w.isTokenRefreshable)(e)}getRefreshTokenCTA(){const e=this.getTokenExpiryTime()||0,n=Date.now(),t=this.getRefreshTokenConfig(),a=this.isTokenRefreshable();if(!t||!a)return;if(this.state.isRefreshingToken)return r.createElement("div",{className:"oauth2-refresh-token-cta-wrapper"},r.createElement(p.default,{hasBottomSpacing:!0,color:"content-color-secondary",className:"oauth2-refresh-token-expiry-info"},"Refreshing token"),r.createElement(f.default,null));if(!e)return r.createElement("div",{className:"oauth2-refresh-token-cta-wrapper"},r.createElement(p.default,{type:"link-default",hasBottomSpacing:!0,className:"oauth2-refresh-token-cta"},r.createElement("div",{onClick:this.handleRefreshToken},"Refresh")));const i=Number(e),s=u()(i).format("YYYY-MM-DD")===u()(n).format("YYYY-MM-DD");let o;if(this.isTokenExpired())o=r.createElement("div",{className:"oauth2-refresh-token-info-wrapper"},r.createElement(l.default,{className:"oauth2-refresh-token-expiry-icon",name:"icon-state-error-stroke",color:"content-color-error",size:"small"}),r.createElement(p.default,{hasBottomSpacing:!0,color:"content-color-error",className:"oauth2-refresh-token-expiry-info"},"Token expired."));else if(s){const e=this.getExpiryInfo(i);o=r.createElement("div",{className:"oauth2-refresh-token-info-wrapper"},r.createElement(l.default,{className:"oauth2-refresh-token-expiry-icon",name:"icon-descriptive-time-stroke",color:"content-color-secondary",size:"medium"}),r.createElement(p.default,{hasBottomSpacing:!0,color:"content-color-secondary",className:"oauth2-refresh-token-expiry-info"},e))}return r.createElement("div",{className:"oauth2-refresh-token-cta-wrapper"},o,r.createElement(p.default,{type:"link-default",hasBottomSpacing:!0,className:"oauth2-refresh-token-cta"},r.createElement("div",{onClick:this.handleRefreshToken},"Refresh")))}getTokenExpiryTime(){const e=this.getSessionValue("timestamp"),n=this.getSessionValue("expires_in");if(e&&n)return Number(e)+1e3*Number(n)}isTokenExpired(){const e=this.getTokenExpiryTime();return!!e&&e<Date.now()}getTokenName(){const e=this.getSessionValue("token_id");if(!e)return W;const n=this.model.getAccessToken(e);return n?n.get("name"):W}get isTokenRefreshEnabled(){const e=this.getSessionValue("token_id");if(!e)return;const n=this.model.getAccessToken(e);return n?n.isAutoRefreshEnabled():void 0}updateTokenData(){this.forceUpdate()}handleTokenRefreshToggle(){this.isTokenRefreshEnabled?P.default.addEventV2AndPublish({category:"authorization",action:"toggle_auto_refresh_off",label:"oauth2",entityType:this.props.entityType,entityId:this.props.entityId}):P.default.addEventV2AndPublish({category:"authorization",action:"toggle_auto_refresh_on",label:"oauth2",entityType:this.props.entityType,entityId:this.props.entityId}),pm.oAuth2Manager.updateOAuth2Token({id:this.getSessionValue("token_id"),isTokenRefreshEnabled:!this.isTokenRefreshEnabled})}handleTokenKeySelect(e){const n=this.getSessionValue("token_id");if(!n)return;const t=this.model.getAccessToken(n);if(t)switch(e){case O.TOKEN_KEY_MAP.ID_TOKEN:pm.oAuth2Manager.updateOAuth2Token({id:n,token_key:O.TOKEN_KEY_MAP.ID_TOKEN}),this.handleSessionFieldChange("accessToken",t.getData(O.TOKEN_KEY_MAP.ID_TOKEN));break;case O.TOKEN_KEY_MAP.ACCESS_TOKEN:pm.oAuth2Manager.updateOAuth2Token({id:n,token_key:O.TOKEN_KEY_MAP.ACCESS_TOKEN}),this.handleSessionFieldChange("accessToken",t.getData(O.TOKEN_KEY_MAP.ACCESS_TOKEN));break;default:pm.logger.error("OAuth2TokenManager~handleTokenKeySelect: Unknown token key selected")}}get sessionTokenKey(){const e=this.getSessionValue("token_id"),n=e&&this.model.getAccessToken(e);return(n&&n.getData("token_key"))===O.TOKEN_KEY_MAP.ID_TOKEN?z:H}get isIdTokenPresent(){const e=this.getSessionValue("token_id"),n=e&&this.model.getAccessToken(e);return n&&n.getData(O.TOKEN_KEY_MAP.ID_TOKEN)}get isAccessTokenPresent(){const e=this.getSessionValue("token_id"),n=e&&this.model.getAccessToken(e);return n&&n.getData(O.TOKEN_KEY_MAP.ACCESS_TOKEN)}renderRefreshTokenToggleSwitch(){const e=this.isTokenRefreshable(),n=r.createElement(h.default,{name:"Refresh Token",onChange:this.handleTokenRefreshToggle,isDisabled:!e,isChecked:e&&this.isTokenRefreshEnabled,className:"oauth2-share-token"});if(e)return n;const t=this.getRefreshTokenConfig();let a;return t?t.refresh_token?t.accessTokenUrl||(a="Access token URL is not present. Generate a new token to refresh it automatically on expire."):a="Refresh token is not present. Generate a new token to refresh it automatically on expire.":a="Select a token from available tokens to refresh it automatically on expire.",r.createElement(m.default,{content:a},n)}getAccessTokenMenuItem(e){return e?r.createElement(x.MenuItem,{key:"key_access_token",refKey:"access_token"},r.createElement("div",{className:"auth-oauth2--key-access-token"},H)):r.createElement(x.MenuItem,{key:"key_access_token",refKey:"access_token",disabled:!0},r.createElement(m.default,{content:"Access token is not available"},r.createElement("div",{className:"auth-oauth2--key-access-token"},H)))}getIdTokenMenuItem(e){return e?r.createElement(x.MenuItem,{key:"key_id_token",refKey:"id_token"},r.createElement("div",{className:"auth-oauth2--key-id-token"},z)):r.createElement(x.MenuItem,{key:"key_id_token",refKey:"id_token",disabled:!0},r.createElement(m.default,{content:"ID token is not available"},r.createElement("div",{className:"auth-oauth2--key-id-token"},z)))}renderAuthForm(e,n){const t=M.has(e,"audience"),a=M.has(e,"resource");return t||a?r.createElement(r.Fragment,null,r.createElement(B.default,{onSelect:this.handleTabSelect,activeTab:this.state.activeTab,isConfigOptionsChanged:this.isConfigOptionsChanged(),isAdvancedOptionsChanged:this.isAdvancedOptionsChanged()}),r.createElement(F.default,{activeKey:this.state.activeTab},r.createElement(D.default,{key:N.CONFIGURATION_OPTIONS},r.createElement(U.default,{oAuth2:e,showAuthAdvancedFields:this.props.showAuthAdvancedFields,onToggleAdvancedFields:this.props.onToggleAdvancedFields,onFieldChange:this.handleFieldChange,onRequestToken:this.handleRequestToken,disableEdit:n,usingLocalTokenConfig:!this.useSharedTokenConfig()})),r.createElement(D.default,{key:N.AUDIENCE_AND_RESOURCE},r.createElement(L.default,{oAuth2:e,onFieldChange:this.handleFieldChange,onRequestToken:this.handleRequestToken,disableEdit:n,usingLocalTokenConfig:!this.useSharedTokenConfig()})))):r.createElement(r.Fragment,null,r.createElement(U.default,{oAuth2:e,showAuthAdvancedFields:this.props.showAuthAdvancedFields,onToggleAdvancedFields:this.props.onToggleAdvancedFields,onFieldChange:this.handleFieldChange,onRequestToken:this.handleRequestToken,disableEdit:n,usingLocalTokenConfig:!this.useSharedTokenConfig()}))}render(){const{disableEdit:e,entityType:n}=this.props,t=this.getSessionValue("accessToken"),a=M.isNil(t)?this.getValue("accessToken"):t,i=M.isEmpty(this.state.savedOAuth2Tokens)&&!this.getValue("accessToken"),s=this.getTokenName(),o=this.isTokenSynced(),c=this.getTokenConfigObject(),u=M.has(c,"audience"),d=M.has(c,"resource"),h={type:"neutral",body:r.createElement(G,null,r.createElement(p.default,{type:"para",hasBottomSpacing:!0,color:"content-color-secondary"},"Get more control and customizations over your Auth2 requests by moving audience and resource parameters to Configurations > Advanced."),r.createElement(b.default,{onClick:this.handleAudienceAndResourceMigration,text:"Move Audience and Resource",type:"secondary"}))};return r.createElement("div",{className:"auth-o-auth-2-container"},r.createElement("div",{className:"auth-input-wrapper"},r.createElement("div",{className:"oauth2-main-section-header"},r.createElement("div",null,"Current Token"),r.createElement("div",{className:"oauth2-main-section-header--sync-message "},t&&!this.isTokenSynced()&&"This token is only available to you. Sync the token to let collaborators on this request use it.")),r.createElement("div",{className:"auth-input-group auth-input--token-selection"},r.createElement("div",{className:"auth-label"},"  Token "),r.createElement("div",{className:"auth-input-subgroup-wrapper"},r.createElement("div",{className:"auth-input-subgroup"},r.createElement("div",{className:T()({"auth-oauth2--use-existing-token":!0,"auth-input":!0})},r.createElement(x.Dropdown,{onSelect:this.handleTokenDropdownSelect},r.createElement(x.DropdownButton,{type:"secondary",size:"small"},r.createElement(S.Button,null,r.createElement("span",null,s))),r.createElement(x.DropdownMenu,{fluid:!0},this.getValue("accessToken")&&r.createElement(x.MenuItem,{key:"synced_token",refKey:"synced_token"},r.createElement("div",{className:"auth-oauth2--shared-token"},"Shared token",r.createElement(l.default,{name:"icon-state-synced-stroke"}))),M.map(this.state.savedOAuth2Tokens,(e=>r.createElement(x.MenuItem,{key:e.id,refKey:e},r.createElement("span",null,e.name)))),i&&r.createElement("div",{className:"auth-oauth2--no-tokens"},"No Tokens Available"),!M.isEmpty(this.state.savedOAuth2Tokens)&&r.createElement(x.MenuItem,{key:"manage_tokens",refKey:"manage_tokens"},r.createElement("div",{className:"auth-oauth2--manage-tokens"},"Manage Tokens")))))))),r.createElement("div",{className:T()({"auth-input-group":!0,"auth-input--token-type-dropdown":!0,"is-hidden":!this.isIdTokenPresent})},r.createElement("div",{className:"auth-label"}," Use Token Type "),r.createElement("div",{className:"auth-input-subgroup-wrapper"},r.createElement("div",{className:"auth-input-subgroup"},this.isIdTokenPresent&&r.createElement("div",{className:T()({"auth-oauth2--token-key":!0,"auth-input":!0})},r.createElement(x.Dropdown,{onSelect:this.handleTokenKeySelect},r.createElement(x.DropdownButton,{type:"secondary",size:"small"},r.createElement(S.Button,null,r.createElement("span",null,this.sessionTokenKey))),r.createElement(x.DropdownMenu,{fluid:!0},this.getAccessTokenMenuItem(this.isAccessTokenPresent),this.getIdTokenMenuItem(this.isIdTokenPresent))))))),r.createElement("div",{className:"auth-input-group auth-input--header-prefix"},r.createElement("div",{className:"auth-label"}),r.createElement("div",{className:"auth-input-subgroup-wrapper"},r.createElement("div",{className:"auth-input-subgroup"},r.createElement("div",{className:"auth-input"},r.createElement(I.AutoSuggestInput,{ref:"access_token",enableVariableSuggestions:!0,inputStyle:"box",placeholder:"Token",value:a,allowFocus:!0,onChange:this.handleSessionFieldChange.bind(this,"accessToken"),onSelectionChange:this.handleSelectionChange.bind(this,"access_token",this.handleSessionFieldChange.bind(this,"accessToken"))})),this.getRefreshTokenCTA()))),r.createElement("div",{className:"auth-input-group auth-input--header-prefix"},r.createElement("div",{className:"auth-label"},"Header Prefix",r.createElement(k.default,{tooltip:"Added to the Authorization header before the token."})),r.createElement("div",{className:"auth-input"},r.createElement(I.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"e.g. Bearer",value:this.getValue("headerPrefix"),onChange:this.handleFieldChange.bind(this,"headerPrefix"),readOnly:e,ref:"headerPrefix",onSelectionChange:this.handleSelectionChange.bind(this,"headerPrefix",this.handleFieldChange.bind(this,"headerPrefix"))}))),r.createElement("div",{className:"auth-oauth2-token-actions-group auth-input--refresh-token-toggle"},r.createElement("div",{className:"auth-oauth2-refresh-access-token-title"},r.createElement("div",{className:"auth-label"},r.createElement(g.default,{type:"h6",text:"Auto-refresh token",color:"content-color-secondary"})),this.renderRefreshTokenToggleSwitch()),r.createElement(p.default,{type:"para",hasBottomSpacing:!0,color:"content-color-secondary"},"Your expired token will be auto-refreshed before sending a request.")),r.createElement("div",{className:"auth-oauth2-token-actions-group"},r.createElement("div",{className:"auth-oauth2-share-access-token-title"},r.createElement("div",{className:"auth-label"},r.createElement(g.default,{type:"h6",text:"Share token",color:"content-color-secondary"})),r.createElement(K,{isTokenSynced:o,isEditable:!e,hasToken:!!a,onRemoveSyncedToken:this.removeSyncedToken,onSyncToken:this.syncCurrentToken})),r.createElement(p.default,{type:"para",hasBottomSpacing:!0,color:"content-color-secondary"},"This will allow anyone with access to this request to view and use it.")),r.createElement("div",{className:"auth-form-title"},r.createElement(g.default,{type:"h4",text:"Configure New Token"})),(u||d)&&!this.props.disableEdit&&r.createElement(y.default,{status:h.type,hideIcon:!0},h.body),!this.useSharedTokenConfig()&&r.createElement("div",{className:"oauth2-token-config-msg"},r.createElement("div",{className:"oauth2-token-config-msg__title"},r.createElement(E.default,{type:"heading-h6",value:"Some changes to the Token configurations"})),r.createElement("div",null,r.createElement(E.default,{type:"body-medium",value:`Token configuration settings are now shared as a part of the ${n}. The fields under reflect the last settings you used to configure an OAuth2.0 token. They are not shared with anyone just yet. You can still use these settings to generate a new token. However, if you wish to edit them, they will be shared as a part of the ${n} and `}),r.createElement(E.default,{type:"heading-h5",value:`will be visible to everyone who can view this ${n}.`})),r.createElement(S.Button,{type:"primary",size:"small",className:"oauth2-token-config-msg__action",onClick:this.copyConfigToShared},"Edit token configuration")),this.renderAuthForm(c,e)))}}J.propTypes={oAuth2:o().array.isRequired,onFieldChange:o().func.isRequired,onUseToken:o().func.isRequired}},"./runtime-repl/auth/OAuth2GetAccessTokenFields.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return q}});var r=t("../../node_modules/react/index.js"),a=t("../../node_modules/react-dom/index.js"),i=t("./node_modules/classnames/index.js"),s=t.n(i),o=t("../../node_modules/@postman/aether-icons/esmLib/src/Icon/Icon.js"),l=t("../../node_modules/@postman/aether/esmLib/src/components/Banner/Banner.js"),c=t("../../node_modules/@postman/aether/esmLib/src/components/Text/Text.js"),u=t("./js/components/base/Buttons.js"),d=t("./runtime-repl/auth/RequestOAuth2Constants.js"),h=t("./js/constants/AppUrlConstants.js"),m=t("./appsdk/components/link/Link.js"),p=t("./js/components/base/InfoButton.js"),f=t("./js/components/base/PasswordInput.js"),b=t("./js/components/base/AutoSuggest/AutoSuggestInput.js"),g=t("./js/components/base/Dropdowns.js"),y=t("./js/components/base/Inputs.js"),v=t("./js/components/base/Tooltips.js"),T=t("./js/stores/StoreManager.js"),A=t("./runtime-repl/_common/components/stores/ActionMenuStore.js"),w=t("./js/utils/util.js"),E=t("./runtime-repl/_common/components/keyvalue-editor/KeyValueEditor.js"),S=t("./runtime-repl/auth/OAuth2URLConstants.js"),k=t("./runtime-repl/auth/AuthAdvancedToggle.js"),I=t("./runtime-repl/auth/oauth2/AuthAdvancedParamsHelper.js"),x=t("./node_modules/lodash/lodash.js");const j={authorization_code:"Authorization Code",authorization_code_with_pkce:"Authorization Code (With PKCE)",implicit:"Implicit",password_credentials:"Password Credentials",client_credentials:"Client Credentials"},C={header:"Send as Basic Auth header",body:"Send client credentials in body"},R={S256:"SHA-256",plain:"Plain"},P="browser"===window.SDK_PLATFORM,_=/\{\{([^{}]*?)}}/,O=P?"https://oauth.pstmn.io/v1/browser-callback":"https://oauth.pstmn.io/v1/callback",N=[{rule:/^[A-Za-z0-9*-._%]+$/,message:"This field contains characters that might need to be percent-encoded depending on the authentication server. You can encode by right-clicking on this field.",type:"warning",invertRule:!0}],U=[{rule:/^[A-Za-z0-9-.~_]+$/,message:"This field contains characters which are not valid. Use the following valid characters: [A-Z] / [a-z] / [0-9] / “-” / “.” / “_” / “~”.",type:"error",invertRule:!0}],L=[{validator:e=>!e||e.length>=43&&e.length<=128,message:"The length must be within 43 to 128 characters long.",type:"error"}],B=[{validator:e=>!e||_.test(e),message:"Use variables instead to keep sensitive data secure.",type:"warning"}],F=["key","value"],D=["key","value","option"],M=["key","value","option"];class q extends r.Component{constructor(e){super(e),this.state={showCallbackTooltip:!1,showLCBanner:pm.settings.getSetting("showOAuth2AdvancedConfigLCBanner")},this.getSuggestions=this.getSuggestions.bind(this),this.handleFieldChange=this.handleFieldChange.bind(this),this.handleClearCookies=this.handleClearCookies.bind(this),this.handleAuthRequestParamChange=this.handleAuthRequestParamChange.bind(this),this.handleTokenRequestParamChange=this.handleTokenRequestParamChange.bind(this),this.handleRefreshRequestParamChange=this.handleRefreshRequestParamChange.bind(this),this.actionMenuStore=(0,T.resolveStoreInstance)(A.default),this.handleSettingUpdate=this.handleSettingUpdate.bind(this),this.handleDismissLCBanner=this.handleDismissLCBanner.bind(this),this.clearingCookies=!1}getSuggestions(e){return x.map(e,(e=>({value:e})))}getFieldClasses(e,n){return s()({[e]:!0,disabled:n})}componentDidMount(){pm.settings.on("setSetting:showOAuth2AdvancedConfigLCBanner",this.handleSettingUpdate)}componentWillUnmount(){pm.settings.off("setSetting:showOAuth2AdvancedConfigLCBanner",this.handleSettingUpdate)}handleSettingUpdate(){this.setState({showLCBanner:pm.settings.getSetting("showOAuth2AdvancedConfigLCBanner")})}handleDismissLCBanner(){pm.settings.setSetting("showOAuth2AdvancedConfigLCBanner",!1)}handleClearCookies(){this.clearingCookies||(this.clearingCookies=!0,pm.runtime.clearAllOAuth2Cookies(w.default.getCookiePartition(),(e=>{this.clearingCookies=!1,e?pm.toasts.error("Cookies couldn’t be cleared. Try again.",{dedupeId:"oauth2-clear-cookie-error"}):pm.toasts.success("Cookies have been cleared successfully",{dedupeId:"oauth2-clear-cookie-success"})})))}handleFieldChange(e,n){this.props.onFieldChange&&this.props.onFieldChange(e,n)}handleSelectionChange(e,n,t){const r=e&&(0,a.findDOMNode)(this.refs[e]);if(!n||!r)return this.actionMenuStore.clear();this.actionMenuStore.setActionMenuState(!0,r,n,t,"autoSuggest",this.handleFieldChange.bind(this,e))}handleAuthRequestParamChange(e){this.handleFieldChange("authRequestParams",(0,I.getParamsToSave)(e,d.REQUEST_URL))}handleTokenRequestParamChange(e){this.handleFieldChange("tokenRequestParams",(0,I.getParamsToSave)(e,d.REQUEST_BODY))}handleRefreshRequestParamChange(e){this.handleFieldChange("refreshRequestParams",(0,I.getParamsToSave)(e,d.REQUEST_BODY))}getAuthAdvancedConfigLCBanner(){return r.createElement("div",{className:"auth-target-description__lc-banner"},r.createElement(l.default,{onDismiss:this.handleDismissLCBanner},r.createElement(c.default,{type:"para",lineLengthType:"none"},"You can add more specific customizations to your OAuth2 requests here. Learn more about ",r.createElement(m.default,{className:"auth-target-description__link",to:h.OAUTH_ADVANCED_CONFIG_DOCS,target:"_blank"},r.createElement(c.default,{color:"content-color-secondary"},r.createElement(c.default,{type:"link-default",isExternal:!0},"configuration"))))))}getAdvancedAuthFields(e,n,t,a){const i=Object.keys(d.SEND_OPTIONS).map((e=>({value:e,label:d.SEND_OPTIONS[e]})));return r.createElement("div",{className:"auth-input-group auth-oauth2-input--advanced"},this.state.showLCBanner&&this.getAuthAdvancedConfigLCBanner(),r.createElement("div",{className:"auth-input-group auth-oauth2-input--refresh-url"},r.createElement("div",{className:"auth-label"},"Refresh Token URL",r.createElement(p.default,{tooltip:"Postman uses this endpoint to exchange the refresh token for an access token. If empty, it will use the access token URL instead."})),r.createElement("div",{className:this.getFieldClasses("auth-input",a)},r.createElement(b.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:e.accessTokenUrl||"https://example.com/login/oauth/refresh_token",suggestions:this.getSuggestions(S.oAuth2TokenUrls),value:e.refreshTokenUrl,onChange:this.handleFieldChange.bind(this,"refreshTokenUrl"),readOnly:t,ref:"refreshTokenUrl",onSelectionChange:this.handleSelectionChange.bind(this,"refreshTokenUrl")}))),(n===j.authorization_code||n===j.authorization_code_with_pkce||n===j.implicit)&&r.createElement("div",{className:"auth-request-wrapper"},r.createElement("div",{className:"auth-input-group auth-oauth2-input--auth-request"},r.createElement("div",{className:"auth-label"},"Auth Request",r.createElement(p.default,{tooltip:"Added as query parameters in the request URL of the authorization request."}))),r.createElement("div",{className:"oauth2-auth-request-editor"},r.createElement(E.default,{enableVariableSuggestions:!0,disableMultilineKey:!0,disableMultilineValue:!0,entityType:this.props.entityType,keyHeading:"Key",keyPlaceholder:"Create parameter",keySuggestions:d.OAUTH2_AUTO_COMPLETE_SUGGESTIONS,valueHeading:"Value",valuePlaceholder:"Value",showColumns:F,allowedColumns:F,values:(0,I.getParamsToDisplay)(e.authRequestParams)||[],onChange:this.handleAuthRequestParamChange,disableSorting:!0,containment:{bleed:this.props.bleed},hideBulkOptions:!0,nonEditableToggles:t,nonEditableKeys:t,nonEditableValues:t,nonEditableOptions:t,shouldNotScrollToBottomOnLoad:!0}))),n!==j.implicit&&r.createElement("div",{className:"token-request-wrapper"},r.createElement("div",{className:"auth-input-group auth-oauth2-input--token-request"},r.createElement("div",{className:"auth-label"},"Token Request",r.createElement(p.default,{tooltip:"Added as parameters to the header, body or URL of the token request. Ignores headers with empty keys."}))),r.createElement("div",{className:"oauth2-token-request-editor"},r.createElement(E.default,{enableVariableSuggestions:!0,disableMultilineKey:!0,disableMultilineValue:!0,entityType:this.props.entityType,keyHeading:"Key",keyPlaceholder:"Create parameter",keySuggestions:d.OAUTH2_AUTO_COMPLETE_SUGGESTIONS,optionsHeading:"Send In",optionsTooltip:"This decides how the param is added to the request",optionDropdownValues:i,valueHeading:"Value",valuePlaceholder:"Value",showColumns:D,allowedColumns:D,values:(0,I.getParamsToDisplay)(e.tokenRequestParams)||[],onChange:this.handleTokenRequestParamChange,disableSorting:!0,containment:{bleed:this.props.bleed},hideBulkOptions:!0,nonEditableToggles:t,nonEditableKeys:t,nonEditableValues:t,nonEditableOptions:t,shouldNotScrollToBottomOnLoad:!0}))),r.createElement("div",{className:"auth-input-group auth-oauth2-input--refresh-request"},r.createElement("div",{className:"auth-label"},"Refresh Request",r.createElement(p.default,{tooltip:"When adding or updating parameters, you need to generate and use a new access token to apply the changes."}))),r.createElement("div",{className:"oauth2-refresh-request-editor"},r.createElement(E.default,{enableVariableSuggestions:!0,disableMultilineKey:!0,disableMultilineValue:!0,entityType:this.props.entityType,keyHeading:"Key",keyPlaceholder:"Create parameter",keySuggestions:d.OAUTH2_AUTO_COMPLETE_SUGGESTIONS,optionsHeading:"Send In",optionsTooltip:"This decides how the param is added to the request",optionDropdownValues:i,valueHeading:"Value",valuePlaceholder:"Value",showColumns:M,allowedColumns:M,values:(0,I.getParamsToDisplay)(e.refreshRequestParams)||[],onChange:this.handleRefreshRequestParamChange,disableSorting:!0,containment:{bleed:this.props.bleed},hideBulkOptions:!0,nonEditableToggles:t,nonEditableKeys:t,nonEditableValues:t,nonEditableOptions:t,shouldNotScrollToBottomOnLoad:!0})))}render(){const{oAuth2:e,usingLocalTokenConfig:n}=this.props,t=j[e.grant_type],a=t===j.client_credentials?N:void 0,i=t===j.authorization_code_with_pkce?U:void 0,s=t===j.authorization_code_with_pkce?L:void 0;P&&(e.useBrowser=!0);const l=this.props.disableEdit||n;return r.createElement(r.Fragment,null,r.createElement("div",{className:"auth-input-group auth-oauth2-input--token-name"},r.createElement("div",{className:"auth-label"},"Token Name"),r.createElement("div",{className:this.getFieldClasses("auth-input",n)},r.createElement(b.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"Enter a token name...",value:e.tokenName,onChange:this.handleFieldChange.bind(this,"tokenName"),readOnly:l,ref:"tokenName",onSelectionChange:this.handleSelectionChange.bind(this,"tokenName")}))),r.createElement("div",{className:"auth-input-group auth-oauth2-input--grant-type"},r.createElement("div",{className:"auth-label"},"Grant Type"),r.createElement("div",{className:this.getFieldClasses("auth-input",n)},r.createElement(g.Dropdown,{onSelect:this.handleFieldChange.bind(this,"grant_type")},r.createElement(g.DropdownButton,{size:"small",type:"secondary"},r.createElement(u.Button,null,r.createElement("span",null,j[e.grant_type]))),r.createElement(g.DropdownMenu,{fluid:!0},r.createElement(g.MenuItem,{refKey:"authorization_code",disabled:l},r.createElement("span",null,j.authorization_code)),r.createElement(g.MenuItem,{refKey:"authorization_code_with_pkce",disabled:l},r.createElement("span",null,j.authorization_code_with_pkce)),r.createElement(g.MenuItem,{refKey:"implicit",disabled:l},r.createElement("span",null,j.implicit)),r.createElement(g.MenuItem,{refKey:"password_credentials",disabled:l},r.createElement("span",null,j.password_credentials)),r.createElement(g.MenuItem,{refKey:"client_credentials",disabled:l},r.createElement("span",null,j.client_credentials)))))),(t===j.authorization_code||t===j.authorization_code_with_pkce||t===j.implicit)&&r.createElement(r.Fragment,null,r.createElement("div",{className:"auth-input-group auth-oauth2-input--callback-url"},r.createElement("div",{className:"auth-label"},"Callback URL",r.createElement(p.default,{tooltip:"This is the callback URL that you will be redirected to, after your application is authorized. Postman uses this to extract the authorization code or access token. The callback URL should match the one you use during the application registration process."})),r.createElement("div",{className:this.getFieldClasses("auth-input",n||e.useBrowser),onMouseEnter:()=>this.setState({showCallbackTooltip:!0}),onMouseLeave:()=>this.setState({showCallbackTooltip:!1}),ref:"callback"},r.createElement(b.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"http://your-application.com/registered/callback",value:e.useBrowser?O:e.redirect_uri,onChange:this.handleFieldChange.bind(this,"redirect_uri"),readOnly:l||e.useBrowser,ref:"redirect_uri",onSelectionChange:this.handleSelectionChange.bind(this,"redirect_uri")}),e.useBrowser&&r.createElement(v.Tooltip,{immediate:!0,show:this.state.showCallbackTooltip,placement:"bottom",target:this.refs.callback},r.createElement(v.TooltipBody,null,"The callback URL cannot be modified when authenticating via the browser.")))),!P&&r.createElement("div",{className:"auth-input-group auth-oauth2-input--use-browser"},r.createElement("div",{className:"auth-label"}),r.createElement("div",{className:this.getFieldClasses("auth-input",n)},r.createElement(y.Checkbox,{checked:e.useBrowser,onChange:this.handleFieldChange.bind(this,"useBrowser"),disabled:l}),r.createElement("span",{className:"checkbox-label"},"Authorize using browser")))),(t===j.authorization_code||t===j.authorization_code_with_pkce||t===j.implicit)&&r.createElement("div",{className:"auth-input-group auth-oauth2-input--oauth2-url"},r.createElement("div",{className:"auth-label"},"Auth URL",r.createElement(p.default,{tooltip:"The endpoint for authorization server. This is used to get the authorization code."})),r.createElement("div",{className:this.getFieldClasses("auth-input",n)},r.createElement(b.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"https://example.com/login/oauth/authorize",suggestions:this.getSuggestions(S.oAuth2AuthorizationUrls),value:e.authUrl,onChange:this.handleFieldChange.bind(this,"authUrl"),readOnly:l,ref:"authUrl",onSelectionChange:this.handleSelectionChange.bind(this,"authUrl")}))),t!==j.implicit&&r.createElement("div",{className:"auth-input-group auth-oauth2-input--token-url"},r.createElement("div",{className:"auth-label"},"Access Token URL",r.createElement(p.default,{tooltip:"The endpoint for authentication server. This is used to exchange the authorization code for an access token."})),r.createElement("div",{className:this.getFieldClasses("auth-input",n)},r.createElement(b.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"https://example.com/login/oauth/access_token",suggestions:this.getSuggestions(S.oAuth2TokenUrls),value:e.accessTokenUrl,onChange:this.handleFieldChange.bind(this,"accessTokenUrl"),readOnly:l,ref:"accessTokenUrl",onSelectionChange:this.handleSelectionChange.bind(this,"accessTokenUrl")}))),r.createElement("div",{className:"auth-input-group auth-oauth2-input--client-id"},r.createElement("div",{className:"auth-label"},"Client ID",r.createElement(p.default,{tooltip:"The client identifier issued to the client during the Application registration process."})),r.createElement("div",{className:this.getFieldClasses("auth-input",n)},r.createElement(b.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"Client ID",value:e.clientId,onChange:this.handleFieldChange.bind(this,"clientId"),highlight:a,validation:B,readOnly:l,ref:"clientId",onSelectionChange:this.handleSelectionChange.bind(this,"clientId")}))),t!==j.implicit&&r.createElement("div",{className:"auth-input-group auth-oauth2-input--client-secret"},r.createElement("div",{className:"auth-label"},"Client Secret",r.createElement(p.default,{tooltip:"The client secret issued to the client during the Application registration process."})),r.createElement("div",{className:this.getFieldClasses("auth-input",n)},r.createElement(b.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"Client Secret",value:e.clientSecret,onChange:this.handleFieldChange.bind(this,"clientSecret"),highlight:a,validation:B,readOnly:l,ref:"clientSecret",onSelectionChange:this.handleSelectionChange.bind(this,"clientSecret")}))),t===j.password_credentials&&r.createElement("div",{className:"auth-input-group auth-oauth2-input--username"},r.createElement("div",{className:"auth-label"},"Username"),r.createElement("div",{className:this.getFieldClasses("auth-input",n)},r.createElement(b.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"Username",value:e.username,onChange:this.handleFieldChange.bind(this,"username"),validation:B,readOnly:l,ref:"username",onSelectionChange:this.handleSelectionChange.bind(this,"username")}))),t===j.password_credentials&&r.createElement("div",null,r.createElement("div",{className:"auth-input-group auth-oauth2-input--password"},r.createElement("div",{className:"auth-label"},"Password"),r.createElement("div",{className:this.getFieldClasses("auth-input",n)},r.createElement(f.default,{enableVariableSuggestions:!0,className:"auth-oauth2-input--password",inputStyle:"box",placeholder:"Password",value:e.password,onChange:this.handleFieldChange.bind(this,"password"),validation:B,readOnly:l})))),t===j.authorization_code_with_pkce&&r.createElement("div",{className:"auth-input-group auth-oauth2-input--algorithm"},r.createElement("div",{className:"auth-label"},"Code Challenge Method",r.createElement(p.default,{tooltip:"Algorithm used for generating the Code Challenge."})),r.createElement("div",{className:this.getFieldClasses("auth-input",n)},r.createElement(g.Dropdown,{onSelect:this.handleFieldChange.bind(this,"challengeAlgorithm")},r.createElement(g.DropdownButton,{size:"small",type:"secondary"},r.createElement(u.Button,null,r.createElement("span",null,R[e.challengeAlgorithm]))),r.createElement(g.DropdownMenu,{fluid:!0},r.createElement(g.MenuItem,{refKey:"S256",disabled:l},r.createElement("span",null,R.S256)),r.createElement(g.MenuItem,{refKey:"plain",disabled:l},r.createElement("span",null,R.plain)))))),t===j.authorization_code_with_pkce&&r.createElement("div",{className:"auth-input-group auth-oauth2-input--code-verifier"},r.createElement("div",{className:"auth-label"},"Code Verifier",r.createElement(p.default,{tooltip:"A random, 43-128 character string used to connect the authorization request to the token request. Uses the following characters: [A-Z] / [a-z] / [0-9] / “-” / “.” / “_” / “~”."})),r.createElement("div",{className:this.getFieldClasses("auth-input",n)},r.createElement(b.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"Automatically generated if left blank",value:e.code_verifier,onChange:this.handleFieldChange.bind(this,"code_verifier"),highlight:i,validation:s,readOnly:l,ref:"code_verifier",onSelectionChange:this.handleSelectionChange.bind(this,"code_verifier")}))),r.createElement("div",{className:"auth-input-group auth-oauth2-input--scope"},r.createElement("div",{className:"auth-label"},"Scope",r.createElement(p.default,{tooltip:"The scope of the access request. It may have multiple space-delimited values."})),r.createElement("div",{className:this.getFieldClasses("auth-input",n)},r.createElement(b.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"e.g. read:org",value:e.scope,onChange:this.handleFieldChange.bind(this,"scope"),readOnly:l,ref:"scope",onSelectionChange:this.handleSelectionChange.bind(this,"scope")}))),(t===j.authorization_code||t===j.authorization_code_with_pkce||t===j.implicit)&&r.createElement("div",{className:"auth-input-group auth-oauth2-input--state"},r.createElement("div",{className:"auth-label"},"State",r.createElement(p.default,{tooltip:"An opaque value that is used for preventing cross-site request forgery."})),r.createElement("div",{className:this.getFieldClasses("auth-input",n)},r.createElement(b.AutoSuggestInput,{enableVariableSuggestions:!0,inputStyle:"box",placeholder:"State",value:e.state,onChange:this.handleFieldChange.bind(this,"state"),readOnly:l,ref:"state",onSelectionChange:this.handleSelectionChange.bind(this,"state")}))),r.createElement("div",{className:"auth-input-group auth-oauth2-input--client-authentication"},r.createElement("div",{className:"auth-label"},"Client Authentication"),r.createElement("div",{className:this.getFieldClasses("auth-input",n)},r.createElement(g.Dropdown,{onSelect:this.handleFieldChange.bind(this,"client_authentication")},r.createElement(g.DropdownButton,{size:"small",type:"secondary"},r.createElement(u.Button,null,r.createElement("span",null,C[e.client_authentication]))),r.createElement(g.DropdownMenu,{fluid:!0},r.createElement(g.MenuItem,{refKey:"header",disabled:l},r.createElement("span",null,C.header)),r.createElement(g.MenuItem,{refKey:"body",disabled:l},r.createElement("span",null,C.body)))))),r.createElement("div",{className:"auth-form-group"},r.createElement(k.default,{title:"Advanced",isOpen:this.props.showAuthAdvancedFields,onToggleAdvancedFields:this.props.onToggleAdvancedFields})),this.props.showAuthAdvancedFields&&this.getAdvancedAuthFields(e,t,l,n),r.createElement("div",{className:"auth-oauth2-actions-group"},"browser"!==window.SDK_PLATFORM&&r.createElement("div",{className:"auth-oauth2-actions-group__clear-cookies"},r.createElement(u.Button,{type:"secondary",size:"small",onClick:this.handleClearCookies},r.createElement(o.default,{name:"icon-descriptive-cookie-stroke",color:"content-color-primary",size:"small",className:"auth-oauth2-actions-group__clear-cookies__icon"}),"Clear cookies"),r.createElement(p.default,{tooltipPlacement:"top",tooltip:"Clear all cookies from previous OAuth 2.0 sessions."})),r.createElement(u.Button,{className:"auth-oauth2-actions__request-token",type:"primary",size:"small",onClick:this.props.onRequestToken},"Get New Access Token")))}}},"./runtime-repl/auth/OAuth2GetAccessTokenTabContent.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return s}});var r=t("../../node_modules/react/index.js"),a=t("./node_modules/classnames/index.js"),i=t.n(a);class s extends r.Component{getClasses(){return i()({"oauth2-tab-content":!0,"is-hidden":!this.props.active},this.props.className)}render(){return r.createElement("div",{className:this.getClasses()},this.props.children)}}},"./runtime-repl/auth/OAuth2GetAccessTokenTabContents.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return a}});var r=t("../../node_modules/react/index.js");function a({activeKey:e,children:n}){return r.createElement("div",{className:"oauth2-tab-contents"},r.Children.map(n,(n=>r.cloneElement(n,{active:e===n.key}))))}},"./runtime-repl/auth/OAuth2GetAccessTokenTabs.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return o}});var r=t("../../node_modules/react/index.js"),a=t("./runtime-repl/_common/components/EntityEditorTabs.js"),i=t("./runtime-repl/_common/ListTypeConstants.js"),s=t("./runtime-repl/auth/OAuth2GetAccessTokenTabsConstants.js");class o extends r.Component{getMeta(e){return e&&r.createElement("div",{className:"oauth2-access-token-tabs-badge"})}getTabsList(){return[{refKey:s.CONFIGURATION_OPTIONS,label:"Configuration Options",getBadge:()=>this.getMeta(this.props.isConfigOptionsChanged)},{refKey:s.AUDIENCE_AND_RESOURCE,label:"Audience and Resource",getBadge:()=>this.getMeta(this.props.isAdvancedOptionsChanged)}]}render(){return r.createElement(a.default,{className:"oauth2-get-access-token-tabs",activeTab:this.props.activeTab,tabsList:this.getTabsList(),tabsListType:i.HORIZONTAL_LIST,onTabSelect:this.props.onSelect})}}o.defaultProps={isConfigOptionsChanged:!1,isAdvancedOptionsChanged:!1}},"./runtime-repl/auth/OAuth2GetAccessTokenTabsConstants.js":function(e,n,t){"use strict";t.r(n),t.d(n,{AUDIENCE_AND_RESOURCE:function(){return a},CONFIGURATION_OPTIONS:function(){return r}});const r="configuration-options",a="audience-and-resource"},"./runtime-repl/auth/OAuth2URLConstants.js":function(e,n,t){"use strict";t.r(n),t.d(n,{oAuth2AuthorizationUrls:function(){return r},oAuth2TokenUrls:function(){return a}});const r=["https://accounts.google.com/o/oauth2/auth","https://github.com/login/oauth/authorize","https://www.box.com/api/oauth2/authorize","https://api.createsend.com/oauth?type=web_server","https://foursquare.com/oauth2/authenticate","https://launchpad.37signals.com/authorization/new?type=web_server","https://secure.meetup.com/oauth2/authorize","https://soundcloud.com/connect","https://login.live.com/oauth20_authorize.srf","https://login.uber.com/oauth/v2/authorize","https://angel.co/api/oauth/authorize","https://app.asana.com/-/oauth_authorize","https://bitbucket.org/api/1.0/oauth/authenticate","https://www.dropbox.com/1/oauth2/authorize","https://accounts.spotify.com/authorize"],a=["https://accounts.google.com/o/oauth2/token","https://github.com/login/oauth/access_token","https://www.box.com/api/oauth2/token","https://api.createsend.com/oauth/token","https://foursquare.com/oauth2/access_token","https://launchpad.37signals.com/authorization/token","https://secure.meetup.com/oauth2/access","https://api.soundcloud.com/oauth2/token","https://login.live.com/oauth20_token.srf","https://login.uber.com/oauth/v2/token","https://angel.co/api/oauth/token","https://app.asana.com/-/oauth_authorize","https://bitbucket.org/api/1.0/oauth/access_token","https://www.dropbox.com/1/oauth2/authorize","https://accounts.spotify.com/api/token"]},"./runtime-repl/auth/jwt/AuthJWTOptions.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return m}});var r,a=t("../../node_modules/react/index.js"),i=t("./node_modules/prop-types/index.js"),s=t.n(i),o=t("../../node_modules/mobx-react/dist/mobx-react.module.js"),l=t("../../node_modules/@postman/aether/esmLib/src/components/Label/Label.js"),c=t("./js/components/base/Buttons.js"),u=t("./js/components/base/Dropdowns.js"),d=t("./runtime-repl/auth/authUtil.js"),h=t("./runtime-repl/auth/jwt/JWTConstants.js");let m=(0,o.observer)(r=class extends a.Component{getValue(e,n){const{jwtAuth:t}=this.props;return(0,d.getAuthValue)(t,e,n)}render(){const{disableEdit:e,onFieldChange:n}=this.props,t=this.getValue(h.TOKEN_ADD_TO);return a.createElement("div",{className:"auth-target-input"},a.createElement("div",{className:"auth-target-input__selector"},a.createElement("div",{className:"auth-label"},a.createElement(l.default,{type:"primary",color:"content-color-primary",text:"Add JWT token to"})),a.createElement("div",{className:"auth-input"},a.createElement(u.Dropdown,{fullWidth:!0,onSelect:e=>{n(h.TOKEN_ADD_TO,e)}},a.createElement(u.DropdownButton,{type:"secondary",size:"small"},a.createElement(c.Button,null,a.createElement("span",null,h.TOKEN_ADD_TO_OPT_MAP[t]))),a.createElement(u.DropdownMenu,{fluid:!0},a.createElement(u.MenuItem,{refKey:h.AUTHORIZATION_HEADER,disabled:e},a.createElement("span",null,h.TOKEN_ADD_TO_OPT_LABEL.AUTH_HEADER)),a.createElement(u.MenuItem,{refKey:h.QUERY_PARAM,disabled:e},a.createElement("span",null,h.TOKEN_ADD_TO_OPT_LABEL.QUERY_PARAM)))))))}})||r;m.propTypes={disableEdit:s().bool.isRequired,jwtAuth:s().array.isRequired,onFieldChange:s().func.isRequired}},"./runtime-repl/collection/CollectionVariablesProvider.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return d}});var r,a=t("../../node_modules/react/index.js"),i=t("../../node_modules/mobx-react/dist/mobx-react.module.js"),s=t("./node_modules/prop-types/index.js"),o=t.n(s),l=t("./runtime-repl/_common/GenericVariablesProvider.js"),c=t("./runtime-repl/_common/VariableGetters.js"),u=t("./runtime-repl/collection/CollectionVariablesProviderStore.js");let d=(0,i.observer)(r=class extends a.Component{UNSAFE_componentWillMount(){this.collectionVariablesStore=new u.CollectionVariablesProviderStore,this.props.collectionId?this.collectionVariablesStore.setCollectionInfo(this.props.collectionId,this.props.collection,this.props.isTransientCollection):this.props.collectionVariables&&this.collectionVariablesStore.setOverrides(this.props.collectionVariables)}componentWillUnmount(){this.collectionVariablesStore&&this.collectionVariablesStore.unsubscribe&&this.collectionVariablesStore.unsubscribe()}UNSAFE_componentWillReceiveProps(e){e.collectionId&&this.props.collectionId!==e.collectionId?this.collectionVariablesStore.setCollectionInfo(e.collectionId,e.collection,e.isTransientCollection):this.props.collectionVariables!==e.collectionVariables&&this.collectionVariablesStore.setOverrides(e.collectionVariables)}render(){return a.createElement(l.default,{variables:(0,c.getActiveVariables)(this.collectionVariablesStore)},this.props.children)}})||r;d.contextTypes={variablesCache:o().object}},"./runtime-repl/folder/FolderConfigurationList.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return h}});var r,a=t("../../node_modules/react/index.js"),i=t("../../node_modules/mobx-react/dist/mobx-react.module.js"),s=t("./js/modules/services/AnalyticsService.js"),o=t("./runtime-repl/_common/components/configuration-list-item/ConfigurationListItem.js"),l=t("./runtime-repl/request-http/ConfigurationConstants.js"),c=t("./runtime-repl/agent/AgentConstants.js"),u=t("./runtime-repl/_common/components/ArtemisEmptyState/ArtemisEmptyState.js"),d=t("./node_modules/lodash/lodash.js");let h=(0,i.observer)(r=class extends a.Component{handleFieldChange(e,n){if(this.props.updateProtocolProfileBehavior&&this.props.updateProtocolProfileBehavior(e,n),"disableUrlEncoding"===e){const e=n?"set_encoding_false":"set_encoding_true";s.default.addEvent("request",e,"setting_modal",1)}}handleRestoreDefault(e){this.props.removeKeyFromProtocolProfileBehavior&&this.props.removeKeyFromProtocolProfileBehavior(e)}render(){return d.get(pm.runtime,"agent.stat.type")===c.TYPES.XHR?a.createElement(u.default,{className:"collection-configuration-unavailable",title:"Folder settings unavailable",message:"Postman uses the browser's default settings for sending requests. Switch to the desktop agent to customize your folder further."}):a.createElement("div",{className:"collection-configuration-list"},d.map(l.CONFIGURATIONS,(e=>a.createElement(o.default,{key:e.id,title:e.title,description:e.description,value:d.get(this.props.configuration,[e.id]),inheritedState:d.get(this.props.inheritedConfigParent,[e.id]),defaultValue:e.defaultValue,inputFieldType:e.inputFieldType,inputType:e.inputType,handleFieldChange:this.handleFieldChange.bind(this,e.id),handleRestoreDefault:this.handleRestoreDefault.bind(this,e.id),menuOptions:e.menuOptions,menuLabels:e.menuLabels}))))}})||r},"./runtime-repl/folder/FolderConstants.js":function(e,n,t){"use strict";t.r(n),t.d(n,{FOLDER_AUTHORIZATION:function(){return a},FOLDER_CONFIGURATIONS:function(){return o},FOLDER_DESCRIPTION:function(){return r},FOLDER_PRE_REQUEST_SCRIPTS:function(){return i},FOLDER_TESTS:function(){return s}});const r="description",a="authorization",i="pre-request-scripts",s="tests",o="configurations"},"./runtime-repl/folder/FolderEditorTabs.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return c}});var r=t("../../node_modules/react/index.js"),a=t("./runtime-repl/_common/components/EntityEditorTabs.js"),i=t("./runtime-repl/_common/ListTypeConstants.js"),s=t("./js/stores/StoreManager.js"),o=t("./js/stores/FeatureFlagsStore.js"),l=t("./runtime-repl/folder/FolderConstants.js");class c extends r.Component{getMeta(e){return e&&r.createElement("div",{className:"collection-modal-tabs-badge"})}getTabsList(){const e=(0,s.resolveStoreInstance)(o.default).isEnabled("collectionAndFolderConfigurations"),n=[{refKey:l.FOLDER_AUTHORIZATION,label:"Authorization",shortLabel:"Auth",getBadge:()=>this.getMeta(this.props.isAuthSelected)},{refKey:l.FOLDER_PRE_REQUEST_SCRIPTS,label:"Pre-request Script",shortLabel:"Pre-req.",getBadge:()=>this.getMeta(this.props.isPreRequestScriptAvailable)},{refKey:l.FOLDER_TESTS,label:"Tests",getBadge:()=>this.getMeta(this.props.isTestsAvailable)}];return e&&n.push({refKey:l.FOLDER_CONFIGURATIONS,label:"Settings",getBadge:()=>this.getMeta(!1)}),n}render(){let e=i.HORIZONTAL_LIST;return this.props.width<300?e=i.DROPDOWN:this.props.width<400&&(e=i.SHORT_HORIZONTAL_LIST),r.createElement(a.default,{activeTab:this.props.activeTab,tabsList:this.getTabsList(),tabsListType:e,onTabSelect:this.props.onSelect,className:"folder-editor-tabs"})}}c.defaultProps={isAuthSelected:!1,isPreRequestScriptAvailable:!1,isTestsAvailable:!1}},"./runtime-repl/folder/FolderModalTabContent.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return s}});var r=t("../../node_modules/react/index.js"),a=t("./node_modules/classnames/index.js"),i=t.n(a);class s extends r.Component{getClasses(){return i()({"collection-modal-tab-content":!0,"is-hidden":!this.props.active},this.props.className)}render(){const e=this.getClasses();return r.createElement("div",{className:e},this.props.children)}}s.defaultProps={keepMountedWhenInactive:null}},"./runtime-repl/folder/FolderModalTabContents.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return a}});var r=t("../../node_modules/react/index.js");class a extends r.PureComponent{constructor(e){super(e),this.focusedChildren=new Set}render(){const e=[];return r.Children.forEach(this.props.children,(n=>{let t=this.props.activeKey===n.key,a=null===n.props.keepMountedWhenInactive?this.props.keepChildrenMountedWhenInactive:n.props.keepMountedWhenInactive,i=!1;(t||a&&this.focusedChildren.has(n.key))&&(i=!0),i&&(this.props.activeKey&&this.focusedChildren.add(this.props.activeKey),e.push(r.cloneElement(n,{active:t,identifier:n.key})))})),r.createElement("div",{className:"collection-modal-tab-contents"},e)}}a.defaultProps={keepChildrenMountedWhenInactive:!1}},"./runtime-repl/folder/FolderPreRequestScripts.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return p}});var r=t("../../node_modules/react/index.js"),a=t("../../node_modules/@postman/aether/esmLib/src/components/Text/Text.js"),i=t("./node_modules/prop-types/index.js"),s=t.n(i),o=t("./runtime-repl/scripts/SnippetsConstants.js"),l=t("./js/constants/AppUrlConstants.js"),c=t("./js/components/base/keymaps/KeyMaps.js"),u=t("./runtime-repl/scripts/ScriptEditorContainer.js"),d=t("./appsdk/components/link/Link.js"),h=t("./node_modules/lodash/lodash.js");const m={beautifyCollectionPRScript:"mod+b"};class p extends r.Component{constructor(e){super(e),this.editorRef=r.createRef(),this.handleBeautify=this.handleBeautify.bind(this)}focus(){this.editorRef.focus()}refresh(){this.editorRef.refresh()}handleBeautify(){h.invoke(this,"props.onBeautify")}getKeyMapHandlers(){return{beautifyCollectionPRScript:this.handleBeautify}}render(){return r.createElement(c.default,{keyMap:m,handlers:this.getKeyMapHandlers()},r.createElement("div",{className:"collection-modal-tab-content-container"},r.createElement("div",{className:"collection-modal-tab-content-description"},"This script will execute before every request in this folder. Learn more about  ",r.createElement(d.default,{className:"external-link",to:l.PRE_REQUEST_SCRIPT_DOCS,target:"_blank"},r.createElement(a.default,{type:"link-default",isExternal:!0},"Postman’s execution order"))),r.createElement(u.default,{type:o.SNIPPETS_PROP_PRSCRIPT,ref:this.editorRef,value:this.props.value,onChange:this.props.onChange,commentMode:!1,parent:"folder",model:this.props.model,readOnly:!1===this.props.canEditFolder})))}}p.contextTypes={variablesCache:s().object}},"./runtime-repl/folder/FolderTests.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return g}});var r,a=t("../../node_modules/react/index.js"),i=t("./node_modules/pure-render-decorator/index.js"),s=t.n(i),o=t("../../node_modules/@postman/aether/esmLib/src/components/Text/Text.js"),l=t("./node_modules/prop-types/index.js"),c=t.n(l),u=t("./runtime-repl/scripts/SnippetsConstants.js"),d=t("./js/constants/AppUrlConstants.js"),h=t("./js/components/base/keymaps/KeyMaps.js"),m=t("./runtime-repl/scripts/ScriptEditorContainer.js"),p=t("./appsdk/components/link/Link.js"),f=t("./node_modules/lodash/lodash.js");const b={beautifyCollectionTests:"mod+b"};let g=s()(r=class extends a.Component{constructor(e){super(e),this.editorRef=a.createRef(),this.handleBeautify=this.handleBeautify.bind(this)}focus(){this.editorRef.focus()}refresh(){this.editorRef.refresh()}handleBeautify(){f.invoke(this,"props.onBeautify")}getKeyMapHandlers(){return{beautifyCollectionTests:this.handleBeautify}}render(){return a.createElement(h.default,{keyMap:b,handlers:this.getKeyMapHandlers()},a.createElement("div",{className:"collection-modal-tab-content-container"},a.createElement("div",{className:"collection-modal-tab-content-description"},"These tests will execute after every request in this folder. Learn more about ",a.createElement(p.default,{className:"external-link",to:d.TEST_SCRIPT_DOCS,target:"_blank"},a.createElement(o.default,{type:"link-default",isExternal:!0},"Postman’s execution order"))),a.createElement(m.default,{type:u.SNIPPETS_PROP_TESTS,ref:this.editorRef,value:this.props.value,onChange:this.props.onChange,commentMode:!1,parent:"folder",model:this.props.model,readOnly:!1===this.props.canEditFolder})))}})||r;g.contextTypes={variablesCache:c().object}},"./runtime-repl/folder/modals/FolderAuthEditorContainer.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return c}});var r=t("../../node_modules/react/index.js"),a=t("./node_modules/classnames/index.js"),i=t.n(a),s=t("./js/constants/AppUrlConstants.js"),o=t("./js/external-navigation/ExternalNavigationService.js"),l=t("./runtime-repl/auth/AuthEditor.js");class c extends r.Component{constructor(e){super(e),this.state={showAuthVariablesAlert:pm.settings.getSetting("showAuthVariablesAlert"),showAuthAdvancedFields:pm.settings.getSetting("showAuthAdvancedFields")},this.handleVariablesLearnMore=this.handleVariablesLearnMore.bind(this),this.handleDismissVariablesAlert=this.handleDismissVariablesAlert.bind(this),this.toggleAdvancedFields=this.toggleAdvancedFields.bind(this)}handleVariablesLearnMore(){(0,o.openExternalLink)(s.VARIABLE_DOCS,"_blank")}handleDismissVariablesAlert(){this.setState({showAuthVariablesAlert:!1},(()=>{pm.settings.setSetting("showAuthVariablesAlert",!1)}))}toggleAdvancedFields(){const e=!this.state.showAuthAdvancedFields;this.setState({showAuthAdvancedFields:e},(()=>{pm.settings.setSetting("showAuthAdvancedFields",e)}))}getContentClasses(){return i()({"collection-modal-tab-content-container":!0},this.props.className)}render(){return r.createElement("div",{className:this.getContentClasses()},r.createElement("div",{className:"collection-modal-tab-content-description"},"This authorization method will be used for every request in this folder. You can override this by specifying one in the request."),r.createElement(l.default,{auth:this.props.auth,isTransient:this.props.isTransient,authSession:this.props.authSession,inheritedAuth:this.props.inheritedAuth,type:"folder",entityId:this.props.entityId,collectionId:this.props.collectionId,showPreviewButton:!1,showAuthVariablesAlert:this.state.showAuthVariablesAlert,showAuthAdvancedFields:this.state.showAuthAdvancedFields,onAuthTypeSelect:this.props.handleAuthTypeSelect,onVariablesLearnMore:this.handleVariablesLearnMore,onDismissVariablesAlert:this.handleDismissVariablesAlert,onToggleAdvancedFields:this.toggleAdvancedFields,onFieldChange:this.props.handleFieldChange,onFieldDelete:this.props.handleFieldDelete,onSessionFieldChange:this.props.handleSessionFieldChange,onUseToken:this.props.onUseToken,layout:this.props.layout,handleAuthAnalytics:this.props.handleAuthAnalytics,disableEdit:!1===this.props.canEditFolder,userCanEdit:!0===this.props.canEditFolder}))}}},"./runtime-repl/folder/view/FolderMetaIcons/FolderMetaIcons.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return c}});var r,a=t("../../node_modules/react/index.js"),i=t("./node_modules/prop-types/index.js"),s=t.n(i),o=t("../../node_modules/mobx-react/dist/mobx-react.module.js"),l=t("../../node_modules/@postman/aether-icons/esmLib/src/Icon/Icon.js");let c=(0,o.observer)(r=class extends a.Component{render(){const e=!this.props.isEditable&&a.createElement(l.default,{name:"icon-state-locked-stroke",className:"folder-meta-icons__item",size:this.props.iconSize,title:"Read only"});return e?a.createElement("div",{className:"folder-meta-icons"},e):null}})||r;c.propTypes={isEditable:s().bool.isRequired,iconSize:s().string},c.defaultProps={iconSize:"small"}},"./runtime-repl/folder/workbench/FolderEditor/FolderEditor.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return w}});var r,a=t("../../node_modules/react/index.js"),i=t("../../node_modules/mobx-react/dist/mobx-react.module.js"),s=t("./node_modules/prop-types/index.js"),o=t.n(s),l=t("./js/components/base/Panes.js"),c=t("./js/constants/AppSettingsDefaults.js"),u=t("./js/constants/Panes.js"),d=t("./api-dev/interfaces/APIInterface.js"),h=t("./collaboration/utils/commentUtils.js"),m=t("./appsdk/contextbar/ContextBar.js"),p=t("./runtime-repl/folder/workbench/FolderEditorContent/FolderEditorContentPane.js"),f=t("./runtime-repl/folder/workbench/FolderWorkbenchModel.js"),b=t("./runtime-repl/folder/workbench/FolderWorkbenchController.js"),g=t("./runtime-repl/_common/ContextBarIdentifiers.js"),y=t("./documentation/constants.js"),v=t("./collaboration/constants/comments.js"),T=t("./api-dev/components/api-version/context-bar/api-source-control/APISourceControlContextBarView/SourceControlUtils.js"),A=t("./node_modules/lodash/lodash.js");let w=(0,i.observer)(r=class extends a.Component{renderContextBar(){const e=(0,T.getRepoLinkedAPI)(A.get(this.props.model,"parentCollectionUID")||A.get(this.props.model,"parentCollectionItem.uid"),"collections"),n=!A.isEmpty(e)&&(0,d.isBranchView)(),{model:t,modelId:r,parentModel:i,parentModelId:s}=(0,h.getCommentModelInfo)({model:v.MODEL_TYPE.FOLDER,modelId:A.get(this.props.model,"folderUID"),parentModelId:A.get(this.props.model,"parentCollectionUID")||A.get(this.props.model,"parentCollectionItem.uid"),parentModel:v.MODEL_TYPE.COLLECTION});if(this.props.model&&this.props.model.isTransient){var o,u,p;const h=[],f=null===(o=this.props.model)||void 0===o||null===(u=o.transientFolderItem)||void 0===u||null===(p=u.meta)||void 0===p?void 0:p.parent;return f&&h.push(y.DOCUMENTATION_CONTEXT_IDENTIFIER),((0,d.isBranchView)()||(0,d.isVersionView)())&&h.push(v.COMMENTS_CONTEXT_IDENTIFIER),n&&h.push(T.API_SOURCE_CONTROL),h.length?a.createElement(m.ContextBarPane,{allowedContexts:h,contextData:{id:A.get(this.props.model,"folderId"),parentCollectionId:A.get(this.props.model,"parentCollectionId")||A.get(this.props.model,"parentCollectionItem.id"),parentCollectionUid:A.get(this.props.model,"parentCollectionUID")||A.get(this.props.model,"parentCollectionItem.uid"),type:y.DOCUMENTATION_ENTITY.FOLDER,anchor:`${t}/${A.get(this.props.model,"folderId")}`,modelId:r,model:t,parentModel:i,parentModelId:s,parent:f,apiRepositoryStore:e,entityType:"collections"},width:c.default.ui.CONTEXT_BAR_WIDTH_CONFIG,editorId:this.props.editorId}):a.createElement(l.Pane,{collapsedByDefault:!0,width:{default:0,resizableByDefault:!1}})}return a.createElement(m.ContextBarPane,{allowedContexts:[y.DOCUMENTATION_CONTEXT_IDENTIFIER,v.COMMENTS_CONTEXT_IDENTIFIER,g.FOLDER_INFO],contextData:{id:A.get(this.props.model,"folderId"),parentCollectionId:A.get(this.props.model,"parentCollectionId")||A.get(this.props.model,"parentCollectionItem.id"),parentCollectionUid:A.get(this.props.model,"parentCollectionUID")||A.get(this.props.model,"parentCollectionItem.uid"),type:y.DOCUMENTATION_ENTITY.FOLDER,anchor:`${t}/${A.get(this.props.model,"folderId")}`,modelId:r,model:t,parentModel:i,parentModelId:s},onExpand:this.handleExpand,width:c.default.ui.CONTEXT_BAR_WIDTH_CONFIG,collapsedByDefault:!1,editorId:this.props.editorId})}render(){return a.createElement(l.PaneGroup,{defaultLayout:u.PANE_LAYOUT_HORIZONTAL},a.createElement(p.default,{width:{min:c.default.ui.WORKBENCH_MIN_WIDTH},className:"folder-editor",model:this.props.model,controller:this.props.controller}),this.renderContextBar())}})||r;w.propTypes={controller:o().instanceOf(b.default).isRequired,model:o().instanceOf(f.default).isRequired,editorId:o().string.isRequired}},"./runtime-repl/folder/workbench/FolderEditorContent/FolderEditorContentPane.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return O}});var r,a=t("../../node_modules/react/index.js"),i=t("./node_modules/prop-types/index.js"),s=t.n(i),o=t("../../node_modules/mobx-react/dist/mobx-react.module.js"),l=t("./node_modules/classnames/index.js"),c=t.n(l),u=t("./js/components/base/Panes.js"),d=t("./runtime-repl/folder/FolderConfigurationList.js"),h=t("./js/stores/StoreManager.js"),m=t("./js/stores/FeatureFlagsStore.js"),p=t("./js/stores/CurrentUserStore.js"),f=t("./runtime-repl/folder/FolderConstants.js"),b=t("./runtime-repl/auth/AuthConstants.js"),g=t("./runtime-repl/request-http/RequesterTabLayoutConstants.js"),y=t("./runtime-repl/collection/CollectionVariablesProvider.js"),v=t("./runtime-repl/folder/modals/FolderAuthEditorContainer.js"),T=t("./runtime-repl/folder/FolderTests.js"),A=t("./runtime-repl/folder/FolderPreRequestScripts.js"),w=t("./runtime-repl/folder/FolderModalTabContent.js"),E=t("./runtime-repl/folder/FolderModalTabContents.js"),S=t("./runtime-repl/folder/FolderEditorTabs.js"),k=t("./runtime-repl/collection/_api/CollectionInterface.js"),I=t("./runtime-repl/folder/workbench/FolderWorkbenchModel.js"),x=t("./runtime-repl/collection/CollectionActionsConstants.js"),j=t("./runtime-repl/_common/components/compound.js"),C=t("./runtime-repl/_common/WorkspaceHelpers.js"),R=t("./runtime-repl/folder/workbench/FolderEditorHeader/FolderEditorHeader.js"),P=t("./runtime-repl/folder/workbench/FolderWorkbenchController.js"),_=t("./node_modules/lodash/lodash.js");let O=(0,o.observer)(r=class extends u.Pane{constructor(e){super(e),this.handleAuthSessionFieldChange=_.debounce(((e,n,t)=>{this.model.setAuthSessionField(e,n,t),this.model.debouncedUpdateAuthSession()}),300,{leading:!1,trailing:!0}),this.handleTabSelect=this.handleTabSelect.bind(this),this.handleTestsChange=this.handleTestsChange.bind(this),this.handleUseOauth2Token=this.handleUseOauth2Token.bind(this),this.handleAuthTypeSelect=this.handleAuthTypeSelect.bind(this),this.handleAuthFieldChange=this.handleAuthFieldChange.bind(this),this.handleAuthFieldDelete=this.handleAuthFieldDelete.bind(this),this.handleRequestForAccess=this.handleRequestForAccess.bind(this),this.handlePreRequestScriptChange=this.handlePreRequestScriptChange.bind(this),this.handleAuthSessionFieldChange=this.handleAuthSessionFieldChange.bind(this),this.updateProtocolProfileBehavior=this.updateProtocolProfileBehavior.bind(this),this.removeKeyFromProtocolProfileBehavior=this.removeKeyFromProtocolProfileBehavior.bind(this),this.model=e.model}getInfobarText(){let e="folder";switch(this.model.activeTab){case f.FOLDER_AUTHORIZATION:e="authorization";break;case f.FOLDER_PRE_REQUEST_SCRIPTS:e="pre-request scripts";break;case f.FOLDER_TESTS:e="tests";break;case f.FOLDER_CONFIGURATIONS:e="settings";break;default:e="folder"}return`To change the ${e} for this folder, request additional access to its parent collection.`}handleTabSelect(e){this.model.set("activeTab",e)}handleNameUpdate(e){this.model.updateName(e)}handleAuthTypeSelect(e){this.model.setAuthType(e)}handleAuthFieldChange(e,n,t){this.model.setAuthField(e,n,t)}handleAuthFieldDelete(e,n){this.model.deleteAuthField(e,n)}handleUseOauth2Token(e={}){if(!e)return;let n=e.access_token;e.token_key===b.TOKEN_KEY_MAP.ID_TOKEN&&(n=e.id_token),this.model.setAuthSessionField("oauth2","accessToken",n),this.model.setAuthSessionField("oauth2","tokenType",e.token_type),this.model.setAuthSessionField("oauth2","token_id",e.id),this.model.setAuthSessionField("oauth2","timestamp",e.timestamp),this.model.setAuthSessionField("oauth2","expires_in",e.expires_in),this.model.debouncedUpdateAuthSession()}handlePreRequestScriptChange(e){this.model.set("preRequestScript",e)}handleTestsChange(e){this.model.set("tests",e)}updateProtocolProfileBehavior(e,n){const t=this.model.protocolProfileBehavior||{};this.model.set("protocolProfileBehavior",{...t,[e]:n})}removeKeyFromProtocolProfileBehavior(e){this.model.set("protocolProfileBehavior",_.omit(this.model.protocolProfileBehavior,[e]))}handleRequestForAccess(){(0,k.collectionActions)(this.model.parentCollectionUID,x.ACTION_REQUEST_ACCESS)}render(){var e,n,t;const r=(0,h.resolveStoreInstance)(m.default).isEnabled("collectionAndFolderConfigurations"),i=_.get(this.model,"isEditable",!0),s=this.model&&this.model.folderUID,o=(0,C.canRequestAccess)(),l=_.get((0,h.resolveStoreInstance)(p.default),"isCurrentUserPartner",!1),b=_.get((0,h.resolveStoreInstance)(p.default),"isCurrentUserGuest",!1),k={height:this.state.height,width:this.state.width,...this.props.style||{}},I=c()({pane:!0,resizableX:this.isResizable("x"),resizableY:this.isResizable("y"),collapsedX:this.state.collapsedX,collapsedY:this.state.collapsedY},this.props.className);return a.createElement("div",{className:I,style:k},a.createElement(R.default,{model:this.props.model,controller:this.props.controller}),a.createElement(u.PaneContent,null,a.createElement("div",{className:"folder-editor-content"},!(null!==(e=this.props.model)&&void 0!==e&&e.isTransient)&&!i&&o&&!l&&!b&&a.createElement(j.RequestPermissionInfoBar,{message:this.getInfobarText(),onRequestForAccess:this.handleRequestForAccess}),a.createElement(S.default,{width:this.state.width,onSelect:this.handleTabSelect,activeTab:this.model.activeTab,isAuthSelected:!_.isEmpty(this.model.auth),isPreRequestScriptAvailable:!!this.model.preRequestScript,isTestsAvailable:!!this.model.tests,canEditFolder:i}),a.createElement(y.default,{collectionId:this.model.parentCollectionUID,isTransientCollection:null===(n=this.model)||void 0===n?void 0:n.isTransient,collection:this.model.parentCollectionItem},a.createElement(E.default,{activeKey:this.model.activeTab,keepChildrenMountedWhenInactive:!0},a.createElement(w.default,{key:f.FOLDER_AUTHORIZATION},a.createElement(v.default,{auth:this.model.auth,entityId:s,authSession:this.model.authSession,inheritedAuth:this.model.inheritedAuth,onUseToken:this.handleUseOauth2Token,collectionId:this.model.parentCollectionId,handleAuthTypeSelect:this.handleAuthTypeSelect,handleFieldChange:this.handleAuthFieldChange,handleFieldDelete:this.handleAuthFieldDelete,handleSessionFieldChange:this.handleAuthSessionFieldChange,canEditFolder:i,isTransient:null===(t=this.model)||void 0===t?void 0:t.isTransient,className:g.REQUESTER_TAB_LAYOUT_2_COLUMN})),a.createElement(w.default,{key:f.FOLDER_PRE_REQUEST_SCRIPTS},a.createElement(A.default,{value:this.model.preRequestScript,onChange:this.handlePreRequestScriptChange,canEditFolder:i,model:this.model})),a.createElement(w.default,{key:f.FOLDER_TESTS},a.createElement(T.default,{value:this.model.tests,onChange:this.handleTestsChange,canEditFolder:i,model:this.model})),a.createElement(w.default,{key:f.FOLDER_CONFIGURATIONS},r&&a.createElement(d.default,{configuration:this.model.protocolProfileBehavior,updateProtocolProfileBehavior:this.updateProtocolProfileBehavior,removeKeyFromProtocolProfileBehavior:this.removeKeyFromProtocolProfileBehavior,inheritedConfigParent:this.model.inheritedConfigParent})))))))}})||r;O.propTypes={controller:s().instanceOf(P.default).isRequired,model:s().instanceOf(I.default).isRequired}},"./runtime-repl/folder/workbench/FolderEditorHeader/FolderEditorHeader.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return W}});var r,a=t("../../node_modules/react/index.js"),i=t("./node_modules/prop-types/index.js"),s=t.n(i),o=t("../../node_modules/mobx-react/dist/mobx-react.module.js"),l=t("../../node_modules/@postman/aether-icons/esmLib/src/Icon/Icon.js"),c=t("../../node_modules/@postman/aether/esmLib/src/components/Popover/Popover.js"),u=t("./collaboration/workspace/model/ActiveWorkspacePermissionStore.ts"),d=t("./js/stores/StoreManager.js"),h=t("./js/stores/OnlineStatusStore.js"),m=t("./js/stores/CurrentUserStore.js"),p=t("./js/stores/ActiveWorkspaceStore.js"),f=t("./js/components/base/Buttons.js"),b=t("./runtime-repl/transient-collection/datastores/stores/TransientFolderStore.ts"),g=t("./runtime-repl/transient-collection/datastores/stores/TransientCollectionStore.ts"),y=t("./runtime-repl/_common/uid-helper.ts"),v=t("./collaboration/workspace/types/PermissionTypes.ts"),T=t("./appsdk/components/link/Link.js"),A=t("./api-dev/util/navigationHelper.js"),w=t("./js/services/NavigationService.js"),E=t("./runtime-repl/_common/navigation.js"),S=t("./runtime-repl/runner/_api/RunnerInterface.js"),k=t("./collaboration/workspace/constants/accessRequests.ts"),I=t("./collaboration/utils/workspace.js"),x=t("./universe/utils/UniverseExperimentSignupUtil.js"),j=t("./runtime-repl/_common/components/molecule.js"),C=t("./runtime-repl/folder/view/FolderActionsDropdown.js"),R=t("./runtime-repl/collection/_api/CollectionInterface.js"),P=t("./runtime-repl/folder/_api/FolderInterface.js"),_=t("./runtime-repl/folder/view/FolderMetaIcons/FolderMetaIcons.js"),O=t("./runtime-repl/_common/components/ForkRecommendationTooltip.js"),N=t("./collaboration/workspace/components/workspace-request-access/RequestForAccessPopover.tsx"),U=t("./runtime-repl/folder/workbench/FolderWorkbenchModel.js"),L=t("./runtime-repl/folder/workbench/FolderWorkbenchController.js"),B=t("./runtime-repl/collection/CollectionActionsConstants.js"),F=t("./runtime-repl/_common/DisabledTooltipConstants.js"),D=t("./runtime-repl/_common/ModelConstant.js"),M=t("./runtime-repl/_common/WorkspaceHelpers.js"),q=t("./node_modules/lodash/lodash.js");const V=100;let W=(0,o.observer)(r=class extends a.Component{constructor(e){super(e),this.state={isRunTooltipOpen:!1,isSaveTooltipOpen:!1,isRunPopoverOpen:!1,isSavePopoverOpen:!1},this.showRunToolTip=this.showRunToolTip.bind(this),this.hideRunToolTip=this.hideRunToolTip.bind(this),this.showSaveToolTip=this.showSaveToolTip.bind(this),this.hideSaveToolTip=this.hideSaveToolTip.bind(this),this.toggleSavePopover=this.toggleSavePopover.bind(this),this.hideSavePopover=this.toggleSavePopover.bind(this,!1,!0,!1),this.toggleRunPopover=this.toggleRunPopover.bind(this),this.hideRunPopover=this.toggleRunPopover.bind(this,!1,!0,!1),this.handleSave=this.handleSave.bind(this),this.handleRun=this.handleRun.bind(this),this.handleActions=this.handleActions.bind(this),this.renderActions=this.renderActions.bind(this),this.renderDecorators=this.renderDecorators.bind(this),this.handleNameUpdate=this.handleNameUpdate.bind(this),this.handleBreadCrumbItemClick=this.handleBreadCrumbItemClick.bind(this),this.handleForkCollection=this.handleForkCollection.bind(this),this.model=e.model,this.folderItem=this.model&&this.model.folderItem,this.getBreadCrumbRouteConfig=this.getBreadCrumbRouteConfig.bind(this)}componentDidMount(){const{model:e}=this.props;q.get(e,"additionalContext.rename")&&(this.handleActions(B.ACTION_TYPE_RENAME_TOGGLE),e&&q.isFunction(e.unsetContext)&&e.unsetContext("rename"))}getTooltipForSave(){var e;const n=q.get(this.folderItem,"permissions.edit",!0),{userCanSave:t}=(0,d.resolveStoreInstance)(h.default);if(!n&&(0,M.isLoggedIn)()&&(null===(e=this.props.model)||void 0===e||!e.isTransient))return(0,I.shouldShowForGuestUser)()?a.createElement(c.default,{triggerRef:this.saveButtonContainerRef,triggerEvent:"click",isOpen:this.state.isSavePopoverOpen,pointer:!0,placement:"bottom",onClickOutside:this.hideSavePopover},a.createElement(N.default,{model:"collection",modelId:q.get(this.model,"parentCollectionUID"),action:"grant_role",trigger:k.GUEST_ACCESS_REQUEST_CONFIG.SAVE.trigger,workspaceId:(0,d.resolveStoreInstance)(p.default).id,onClose:this.hideSavePopover})):a.createElement(O.default,{isOpen:this.state.isSaveTooltipOpen,targetRef:this.saveButtonContainerRef,onMouseEnter:this.showSaveToolTip,onMouseLeave:this.hideSaveToolTip,title:"Create a fork to save changes",primaryMessage:"You don't have permission to make changes to this collection. Fork the collection to your workspace to save changes.",primaryAction:"Create Fork & Save",onPrimaryAction:this.handleForkCollection});let r;return r=this.model.isDirty?t?"Save folder":F.DISABLED_TOOLTIP_IS_OFFLINE:"No new changes to save.",a.createElement(j.Tooltip,{target:this.saveButtonContainerRef,show:this.state.isSaveTooltipOpen,placement:"bottom"},a.createElement(j.TooltipBody,null,r))}getTooltipForRun(){var e;if(!(0,M.isLoggedIn)())return null;if(null!==(e=this.props.model)&&void 0!==e&&e.isTransient)return;const n=(0,d.resolveStoreInstance)(u.default),t=n&&n.permissions,r=q.get(t,v.WORKSPACE_PERMISSIONS.ADD_HISTORY_TO_WORKSPACE,!0);return(0,I.shouldShowForGuestUser)()?a.createElement(c.default,{triggerRef:this.runButtonContainerRef,triggerEvent:"click",isOpen:this.state.isRunPopoverOpen,pointer:!0,placement:"bottom",onClickOutside:this.hideRunPopover},a.createElement(N.default,{model:"collection",modelId:q.get(this.model,"parentCollectionUID"),action:"grant_role",trigger:k.GUEST_ACCESS_REQUEST_CONFIG.RUN.trigger,workspaceId:(0,d.resolveStoreInstance)(p.default).id,onClose:this.hideRunPopover})):r?null:a.createElement(O.default,{isOpen:this.state.isRunTooltipOpen,targetRef:this.runButtonContainerRef,onMouseEnter:this.showRunToolTip,onMouseLeave:this.hideRunToolTip,primaryMessage:"Folders can't be run in public workspaces right now – though we're working on that for a future release!",secondaryMessage:"Fork this collection to your own workspace to run it.",primaryAction:"Create a fork",onPrimaryAction:this.handleForkCollection})}handleForkCollection(){(0,R.collectionActions)(this.model.parentCollectionUID,B.ACTION_TYPE_FORK,null,{origin:"folder-tab"}),this.setState({isRunTooltipOpen:!1,isSaveTooltipOpen:!1})}showRunToolTip(){this.dismissRunTooltipTimeout&&clearTimeout(this.dismissRunTooltipTimeout),this.dismissRunTooltipTimeout=setTimeout((()=>{this.setState({isRunTooltipOpen:!0})}),V)}hideRunToolTip(){this.dismissRunTooltipTimeout&&clearTimeout(this.dismissRunTooltipTimeout),this.dismissRunTooltipTimeout=setTimeout((()=>{this.setState({isRunTooltipOpen:!1})}),V)}toggleRunPopover(e,n,t){t||(n?this.setState({isRunPopoverOpen:e}):this.setState({isRunPopoverOpen:!this.state.isRunPopoverOpen}))}showSaveToolTip(){this.dismissSaveTooltipTimeout&&clearTimeout(this.dismissSaveTooltipTimeout),this.dismissSaveTooltipTimeout=setTimeout((()=>{this.setState({isSaveTooltipOpen:!0})}),V)}hideSaveToolTip(){this.dismissSaveTooltipTimeout&&clearTimeout(this.dismissSaveTooltipTimeout),this.dismissSaveTooltipTimeout=setTimeout((()=>{this.setState({isSaveTooltipOpen:!1})}),V)}toggleSavePopover(e,n,t){t||(n?this.setState({isSavePopoverOpen:e}):this.setState({isSavePopoverOpen:!this.state.isSavePopoverOpen}))}handleActions(e,n={}){var t;const r=b.default.find(this.model.folderId);if(null!==(t=this.props.model)&&void 0!==t&&t.isTransient)switch(e){case B.ACTION_TYPE_DELETE:return void r.delete();case B.ACTION_TYPE_RENAME:return void r.model.update({id:this.model.folderId,name:n.name});case B.ACTION_TYPE_RENAME_TOGGLE:return void q.invoke(this.folderEditorHeader,"handleEditName");case B.ACTION_TYPE_RUN:r.run();default:return}if(e===B.ACTION_TYPE_RUN)return!(0,M.isLoggedIn)()&&(0,x.isUniverseExperimentModalEnabled)()?(0,x.openUniverseExperimentSignupModal)({action:"run",entity:this.model.name||"folder",entityType:"folder",entityId:this.model.folderUID}):(0,S.openFolderInRunner)(this.model.folderUID,this.model.parentCollectionUID,{newTab:!0,apiId:this.props.controller.parentApiId,shouldGetParentMeta:!1});(0,P.folderActions)(this.model.folderUID,this.folderItem,e,n,{origin:"tab",collectionId:this.model.parentCollectionUID},(()=>{if(e===B.ACTION_TYPE_RENAME_TOGGLE)q.invoke(this.folderEditorHeader,"handleEditName")}))}handleNameUpdate(e){this.handleActions(B.ACTION_TYPE_RENAME,{name:e})}handleRun(){(0,I.shouldShowForGuestUser)()||this.handleActions(B.ACTION_TYPE_RUN)}handleSave(){var e;if((null===(e=this.props.model)||void 0===e||!e.isTransient)&&!q.get(this.folderItem,"permissions.edit",!0)||(0,I.shouldShowForGuestUser)())return!(0,M.isLoggedIn)()&&(0,x.isUniverseExperimentModalEnabled)()?(0,x.openUniverseExperimentSignupModal)({action:"save",entity:this.model.name||"folder",entityType:"folder",entityId:this.model.folderUID}):void 0;this.model.requestSave&&this.model.requestSave()}handleBreadCrumbItemClick(e){if(!e)return;const n=(0,y.composeUID)(e.id,e.owner),t=(0,y.composeUID)(e.collection,e.owner),r=w.default.getCurrentRouteParams(),a=(null==r?void 0:r.apiId)?{type:"api",id:null==r?void 0:r.apiId}:{};if((null==e?void 0:e.type)===D.API_ENTITY){var i;const n=null===(i=w.default.getActiveQueryParams())||void 0===i?void 0:i.get(),t={};return null!=n&&n.version&&(t.version=null==n?void 0:n.version),null!=n&&n.branch&&(t.branch=null==n?void 0:n.branch),(0,A.transitionToAPI)({apiId:e.id},t)}var s,o;return e.type===D.COLLECTION?null!==(s=this.props.model)&&void 0!==s&&s.isTransient?g.default.find(e.id)&&g.default.find(e.id).openInWorkbench():(0,R.openCollectionInTab)(n,{},a):e.type===D.FOLDER?null!==(o=this.props.model)&&void 0!==o&&o.isTransient?b.default.find(e.id)&&b.default.find(e.id).openInWorkbench():(0,P.openFolderInTab)(n,t,{},a):void 0}getBreadCrumbRouteConfig(e){if(!e)return;const n=(0,y.composeUID)(e.id,e.owner);var t,r;return e.type===D.COLLECTION?null!==(t=this.props.model)&&void 0!==t&&t.isTransient?null:(0,R.collectionRouteConfig)(n):e.type===D.FOLDER?null!==(r=this.props.model)&&void 0!==r&&r.isTransient?null:(0,P.folderRouteConfig)(n):null}renderActions(){var e,n,t,r,i,s;const o=null===(e=this.props.model)||void 0===e?void 0:e.isEditable,c=null!==(n=this.props.model)&&void 0!==n&&n.isTransient?o:q.get(this.folderItem,"permissions.delete",!0),p=(0,d.resolveStoreInstance)(u.default),b=(0,d.resolveStoreInstance)(m.default),{isCurrentUserGuest:g}=b,y=p&&p.permissions,A=(null===(t=this.props.model)||void 0===t?void 0:t.isTransient)||q.get(y,v.WORKSPACE_PERMISSIONS.ADD_HISTORY_TO_WORKSPACE,!0)&&!(0,I.shouldShowForGuestUser)(),w=(0,M.isLoggedIn)()&&!A&&!g,{userCanSave:E}=(0,d.resolveStoreInstance)(h.default),S=!(null!==(r=this.props.model)&&void 0!==r&&r.isTransient)&&!E||!this.model.isDirty||(0,M.isLoggedIn)()&&!o&&!(0,I.shouldShowForGuestUser)();return a.createElement(a.Fragment,null,a.createElement("div",{onMouseEnter:this.showRunToolTip,onMouseLeave:this.hideRunToolTip,onClick:this.toggleRunPopover.bind(this,null,!1,w),ref:e=>{this.runButtonContainerRef=e}},null!==(i=this.props.model)&&void 0!==i&&i.isTransient?a.createElement(f.Button,{type:"tertiary",className:"folder-editor-header__action",onClick:this.handleRun,disabled:w},a.createElement(l.default,{name:"icon-action-run-stroke"}),"Run"):a.createElement(T.default,{to:{routeIdentifier:"build.run.create",routeParams:{},queryParams:{folder:this.model.folderUID,collection:this.model.parentCollectionUID}},onClick:e=>{e.metaKey||e.ctrlKey||(e.preventDefault(),this.handleRun())}},a.createElement(f.Button,{type:"tertiary",className:"folder-editor-header__action",disabled:w},a.createElement(l.default,{name:"icon-action-run-stroke"}),"Run"))),a.createElement("div",{onMouseEnter:this.showSaveToolTip,onMouseLeave:this.hideSaveToolTip,onClick:this.toggleSavePopover.bind(this,null,!1,S),ref:e=>{this.saveButtonContainerRef=e}},a.createElement(f.Button,{type:"tertiary",className:"folder-editor-header__action",disabled:S||this.model.isSaving,onClick:this.handleSave},a.createElement(l.default,{name:"icon-action-save-stroke"}),this.model.isSaving?"Saving...":"Save")),!(0,I.shouldShowForGuestUser)()&&a.createElement(C.default,{id:this.model.folderId,onSelect:this.handleActions,actions:[{type:B.ACTION_TYPE_DELETE,label:"Delete",shortcut:"delete",isEnabled:E&&c}],isPublished:null===(s=this.model)||void 0===s?void 0:s.isPublished}),this.getTooltipForRun(),this.getTooltipForSave())}renderDecorators(){return a.createElement(_.default,{isEditable:q.get(this.folderItem,"permissions.edit",!0)})}render(){var e,n,t,r;const i=null===(e=this.props.model)||void 0===e?void 0:e.isEditable,s=q.get(this.props.model,"folderUID"),o=(0,E.getAPIIdFromURL)();return a.createElement(j.EntityTabHeader,{ref:e=>{this.folderEditorHeader=e},name:this.model.name,path:null!==(n=this.props.model)&&void 0!==n&&n.isTransient?q.get(b.default.find(this.model.folderId),"model.path"):q.get(this.props.model,"folderItem.path"),placeholder:"Folder Name",isEntityEditable:i,onSubmit:this.handleNameUpdate,onBreadCrumbItemClick:this.handleBreadCrumbItemClick,renderActions:this.renderActions,renderDecorators:this.renderDecorators,entityType:"folder",entityUID:s,breadCrumbRouteConfig:this.getBreadCrumbRouteConfig,routeConfig:null===(t=this.props.controller)||void 0===t||null===(r=t.getRouteConfig)||void 0===r?void 0:r.call(t),apiId:o})}})||r;W.propTypes={controller:s().instanceOf(L.default).isRequired,model:s().instanceOf(U.default).isRequired}},"./runtime-repl/folder/workbench/FolderWorkbenchController.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return W}});var r,a,i,s=t("../../node_modules/mobx/lib/mobx.module.js"),o=t("./runtime-repl/auth/oauth2/datastores/controllers/AuthSessionController.js"),l=t("./collaboration/workspace/controller/ActivePublicWorkspaceController.ts"),c=t("./js/stores/StoreManager.js"),u=t("./collaboration/workspace/model/ActiveWorkspaceBaseStore.ts"),d=t("./js/stores/SyncStatusStore.js"),h=t("./js/modules/services/DBResourceWatcher.js"),m=t("./js/services/EditorService.js"),p=t("./js/services/NavigationService.js"),f=t("./api-dev/interfaces/APIInterface.js"),b=t("./runtime-repl/_common/VariableSessionHelper.js"),g=t("./js/utils/uid-helper.js"),y=t("./runtime-repl/transient-collection/datastores/stores/TransientFolderStore.ts"),v=t("./runtime-repl/transient-collection/datastores/stores/TransientCollectionStore.ts"),T=t("./runtime-repl/collection/_api/CollectionStoreV2.js"),A=t("./runtime-repl/collection/services/CollectionPerformanceMetricsService.ts"),w=t("./runtime-repl/_common/usage-metrics/UsageController.js"),E=t("./runtime-repl/extensible-collection/configurations/Folder.ts"),S=t("./runtime-repl/extensible-collection/api/ExtensibleCollectionAPI.ts"),k=t("./runtime-repl/extensible-collection/workbench/ECItem/CreateItemController.ts"),I=t("./runtime-repl/extensible-collection/workbench/ECItem/SavedItemController.ts"),x=t("./js/modules/services/APITabUpdateHelpers.js"),j=t("./js/utils/urlUtils.js"),C=t("./appsdk/workbench/WorkbenchService.js"),R=t("./appsdk/workbench/BaseWorkbenchController.js"),P=t("./runtime-repl/folder/workbench/FolderWorkbenchModel.js"),_=t("./runtime-repl/folder/_api/FolderStoreV2.js"),O=t("./runtime-repl/_common/NavigationConstants.js"),N=t("./runtime-repl/_common/ConflictResolutionHelper.js"),U=t("./runtime-repl/_common/ModelConstant.js"),L=t("./runtime-repl/_common/WorkbenchStatusConstants.js"),B=t("./collaboration/services/CollaborationNavigationService.js"),F=t("./runtime-repl/folder/_api/FolderBufferedStore.ts"),D=t("./node_modules/lodash/lodash.js");function M(e,n,t,r,a){var i={};return Object.keys(r).forEach((function(e){i[e]=r[e]})),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=t.slice().reverse().reduce((function(t,r){return r(e,n,t)||t}),i),a&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(a):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(e,n,i),i=null),i}const q="Conflict",V="This folder has been modified since you last opened the tab.";let W=((i=class extends R.default{constructor(){var e,n,t,r;super(),this.type=U.FOLDER,this.model=null,this.folderId=null,this.sessionId=null,this.authSession=null,this.bufferedItemStore=null,this.foldersWatcherId=null,this.authSessionWatcherId=null,this.updateHandlerDisposer=null,this.updateFailHandlerDisposer=null,this._prevQueryParams={},e=this,n="status",r=this,(t=a)&&Object.defineProperty(e,n,{enumerable:t.enumerable,configurable:t.configurable,writable:t.writable,value:t.initializer?t.initializer.call(r):void 0}),this.handleResourceChangedDebounced=D.debounce(this.handleResourceChanged,100),this.handleFolderChanged=this.handleFolderChanged.bind(this),this.handleFolderDeleted=this.handleFolderDeleted.bind(this),this.handleTransientFolderChanged=this.handleTransientFolderChanged.bind(this),this.trackActivationDebounced=D.debounce(this.trackActivation,100)}setWorkbenchStatus(e){this.status=e,e!==L.READY&&e!==L.ERROR||this.setLoading(!1)}handleResourceChanged(e,n){const t=this.model.transform&&this.model.transform(e),r=(0,N.getUpdates)(this.model.initialState,t),a=this.model.updates;(0,N.detectConflict)(r,a,this.model.isDirty,(t=>{t?this.setStatus(q,V):(this.clearStatus(),this.model.handleIncomingUpdates(e,n))}))}restoreFolderState(){const e=this.getPersistedTrackedState();e&&e.isDirty&&this.model&&(this.model._trackedFolder.set((0,s.toJS)(e.updates)),(0,N.detectConflict)(this.model.initialState,e.initialState,this.model.isDirty,(n=>{n&&(this.model._trackedFolder.setInitialState((0,s.toJS)(e.initialState)),this.setStatus(q,V))})))}async handleFolderChanged(e){if(!this.model)return void pm.logger.warn("FolderWorkbenchController~handleFolderChanged: Model not found");let n=this.authSession;try{n=n&&await o.default.get({id:this.sessionId})}catch(e){pm.logger.error("FolderWorkbenchController~handleFolderChanged: Error in fetching the auth session",e)}this.handleResourceChangedDebounced(e,n)}handleTransientFolderChanged(){const e=D.get(y.default.find(this.folderId),"model");e&&this.handleFolderChanged(e.definition)}async handleAuthSessionCreatedOrChanged(e){if(!this.model)return void pm.logger.warn("FolderWorkbenchController~handleAuthSessionCreatedOrChanged: Model not found");let n;this.authSession=e;try{n=this.isTransient?D.get(y.default.find(this.folderId),"model.definition"):this.bufferedItemStore.getItem()}catch(e){pm.logger.error("FolderWorkbenchController~handleAuthSessionCreatedOrChanged: Error in fetching the folder",e)}this.handleResourceChangedDebounced(n,e)}handleFolderDeleted(e,n){if("SYNC_CLIENT"===n)return this.setWorkbenchStatus(L.DELETED),void this.cleanUp();m.default.close({id:this._tabId},{force:!0})}startWatching(){const e=D.get(y.default.find(this.folderId),"model");this.isTransient&&e?(e.subscribe("updateModel",this.handleTransientFolderChanged),e.subscribe("delete",this.handleFolderDeleted)):this.foldersWatcherId||(this.updateHandlerDisposer=this.bufferedItemStore&&this.bufferedItemStore.onUpdate(this.handleFolderChanged),this.updateFailHandlerDisposer=this.bufferedItemStore&&this.bufferedItemStore.onUpdateFail(((e,n)=>{pm.logger.error("FolderWorkbenchController~startWatching: Error in updating collection:",e),this.model&&this.model.resetUpdates&&this.model.resetUpdates(n)})),this.greedyDeleteReactionDisposer&&this.greedyDeleteReactionDisposer(),this.greedyDeleteReactionDisposer=(0,s.when)((()=>this.model.folderItem&&this.model.folderItem.isDeleting),(()=>this.handleFolderDeleted({id:this.model.folderItem.id}))),this.foldersWatcherId=h.default.watch({model:U.FOLDER,modelId:this.folderId},{onDeleted:this.handleFolderDeleted})),!this.authSessionWatcherId&&(this.authSessionWatcherId=h.default.watch({model:U.AUTH_SESSION,modelId:this.sessionId},{onCreated:this.handleAuthSessionCreatedOrChanged.bind(this),onChanged:this.handleAuthSessionCreatedOrChanged.bind(this)}))}stopWatching(){const e=D.get(y.default.find(this.folderId),"model");this.updateHandlerDisposer&&this.updateHandlerDisposer(),this.updateFailHandlerDisposer&&this.updateFailHandlerDisposer(),this.bufferedItemStore&&F.default.unsubscribe(this.bufferedItemStore),this.foldersWatcherId&&h.default.unwatch({model:U.FOLDER,modelId:this.folderId},this.foldersWatcherId),this.isTransient&&e&&(e.unsubscribe("updateModel",this.handleTransientFolderChanged),e.unsubscribe("delete",this.handleFolderDeleted)),this.greedyDeleteReactionDisposer&&this.greedyDeleteReactionDisposer(),this.authSessionWatcherId&&h.default.unwatch({model:U.AUTH_SESSION,modelId:this.sessionId},this.authSessionWatcherId),this.foldersWatcherId=null,this.authSessionWatcherId=null}async didCreate({routeParams:e,queryParams:n,additionalContext:t}){if(this._cacheQueryParams(),S.default.isBetaCollection(String(e&&e.fid),!0)){const r=new((0,k.default)(pm.ECItemRegistry.getSDK(E.default.type),I.default));return Object.keys(this).forEach((e=>{e.startsWith("_")&&(r[e]=this[e])})),r._editorModel.tabController=r,void r.didCreate({routeParams:{...e,ecid:e.fid},queryParams:n,additionalContext:t})}if(!e||!e.fid)return pm.logger.error("FolderWorkbenchController~didCreate: Missing folder id"),this.setWorkbenchStatus(L.ERROR);const{fid:r,apiId:a}=e,{branch:i,version:h,"feature-branch":m,comment:j,collection:C}=n||{},R=Boolean(m||D.get(t,"isTransient"));let N;return this.__collectionPerfTraceId=A.CollectionPerformanceTraces.WORKBENCH("folder",r),A.default.startTrace(this.__collectionPerfTraceId),A.default.addMarker(this.__collectionPerfTraceId,A.CollectionPerformanceMarkers.WORKBENCH_DID_CREATE_START),this.folderId=(0,g.decomposeUID)(r).modelId,this.isTransient=R||a&&(i||h),this.collectionId=t&&t.parentCollectionUID||(this.isTransient?C:await(0,_.getParentCollectionId)(r)),this.parentApiId=e.apiId,this.parentCollectionUID=t&&t.parentCollectionUID||!this.isTransient&&await(0,_.getParentCollectionId)(r),(this.isTransient||(0,_.isOneCached)(r,this.collectionId))&&A.default.destroyTrace(this.__collectionPerfTraceId),this.workspace=(0,c.resolveStoreInstance)(u.default).id,N=this.isTransient?function(e,n,t,r,a){return n&&(t||r)&&a?(0,c.resolveStoreInstance)(d.default).onSyncAvailable({timeout:1e4}).then((()=>x.default.resolveActiveModeForLinkedEntities(n,{branch:t,version:r}))).then((e=>(0,f.getAPILinkedEntityModel)(n,e,"collection",a))).then((n=>n.getFolder(e))):new Promise(((n,t)=>{const r=y.default.find((0,g.decomposeUID)(e).modelId);return r?n(r):t(new Error("Could not find transient folder instance"))}))}(r,a,i,h,C).then((e=>{var n;return null==e||null===(n=e.model)||void 0===n?void 0:n.definition})):(0,_.subscribeOne)(r,this.collectionId,{permissions:this.constructor.folderPermissions,exclude:["response","request"]}),this.setWorkbenchStatus(L.LOADING),N.then((async n=>n?(this.folderUId=n.id,this.folderId=(0,g.decomposeUID)(n.id).modelId,this.sessionId=(0,b.getSessionId)(U.FOLDER,this.folderId,(0,c.resolveStoreInstance)(u.default).id,this.isTransient),(this.isTransient?Promise.resolve(D.get(v.default.find(n.collection),"model.definition")):(0,T.subscribeOne)(this.collectionId,{exclude:["response","request"]})).then((e=>o.default.get({id:this.sessionId}).then((t=>({folder:n,authSession:t,collectionItem:e})))))):Promise.reject(new Error(`FolderWorkbenchController~didCreate: Folder '${e.fid}' not found`)))).then((({folder:e,authSession:n,collectionItem:r})=>{if(this.folder=e,this.authSession=n,this.collectionItem=r,this.model=new P.default(e,n,{isTransient:this.isTransient,parentCollectionItem:r,rename:D.get(t,"rename")}),!this.isTransient&&(this.bufferedItemStore=F.default.createBufferedItem(e)),this.attachTrackedState(this.model._trackedFolder,this.model.save.bind(this.model,(e=>this.bufferedItemStore&&this.bufferedItemStore.update(e))),{persist:!0}),this.nameReactionDisposer=(0,s.reaction)((()=>this.model.name),(e=>this.setTitle(e)),{fireImmediately:!0}),this.setConflictOptions({entityType:"folder"}),this.restoreFolderState(),this.startWatching(),this.setWorkbenchStatus(L.READY),A.default.addMarker(this.__collectionPerfTraceId,A.CollectionPerformanceMarkers.WORKBENCH_DID_CREATE_END),!this.isTransient){const n=JSON.stringify(e.toJSON()).length;this.folderUId&&w.default.trackOpens({id:this.folderUId,model:U.FOLDER,size:n}).catch((e=>{pm.logger.error("FolderWorkbenchController~didCreate: Error while tracking opens ",e)}))}})).then((()=>{j&&B.default.handleOpenComment(this.folderId,j)})).then((()=>{(async()=>{if(a||this.isTransient)return;const e=(0,c.resolveStoreInstance)(u.default).id;if(!(0,T.isMetaCached)(e,"api"))return;const n=await(0,T.getMeta)(e,{parent:["api"]}).catch((e=>{pm.logger.error("CollectionWorkbenchController~didCreate: Error while fetching collection meta",e)}));if(!n)return;const{id:t,type:r}=n.getParent(this.parentCollectionUID);"api"===r&&p.default.setURL(O.WORKFLOW_IDENTIFIER.OPEN_FOLDER_IN_API_CONTEXT,{fid:this.folderUId,apiId:t})})()})).catch((e=>{pm.logger.error("FolderWorkbenchController~didCreate: Error in loading folder or its sessions",e),this.setWorkbenchStatus(L.ERROR)})).then((()=>{if("public"===D.get((0,c.resolveStoreInstance)(u.default),"visibilityStatus")){const e=l.default.get().publicName,n=`Discover APIs in ${this.model.name}, ${this.collectionItem.name} by ${e} on Postman Public API Network`,t={description:D.get(this.folder,"description")||n};this.setPublicEntityMetaData(t)}})).catch((e=>{pm.logger.error("FolderWorkbenchController~didCreate: Error while setting public entity meta",e)})).finally((()=>{A.default.endTrace(this.__collectionPerfTraceId)}))}trackActivation(){!this.isTransient&&this.folderUId&&w.default.trackActivations({id:this.folderUId,model:U.FOLDER}).catch((e=>{pm.logger.error("FolderWorkbenchController~trackActivation: Error while tracking activation",e)})),!this.isTransient&&this.parentCollectionUID&&w.default.trackChildrenUsage({id:this.collectionId,model:U.COLLECTION}).catch((e=>{pm.logger.error("FolderWorkbenchController~trackActivation: Error while tracking children usage ",e)}))}didActivate(){A.default.addMarker(this.__collectionPerfTraceId,A.CollectionPerformanceMarkers.WORKBENCH_DID_ACTIVATE),this.trackActivationDebounced()}cleanUp(){this.model&&this.model.unsubscribe(),this.stopWatching(),this.nameReactionDisposer&&this.nameReactionDisposer(),this.detachTrackedState(),this.model=null}didQueryParamsChange(e){(0,j.getUpdatedQueryParamsList)(e,this._prevQueryParams).some((e=>["version","branch"].includes(e)))&&(0,s.transaction)((()=>{C.default.suspendEditor(this.tabId),C.default.restoreEditor(this.tabId)})),this._cacheQueryParams(e)}_cacheQueryParams(){this._prevQueryParams=this.getQueryParams()}beforeDestroy(){this.cleanUp()}get transientStoreItem(){return this.folderId&&y.default.find(this.folderId)}}).editableProperties=["description","auth","events","protocolProfileBehavior"],i.folderPermissions=["edit","delete","duplicate","addRequest","addFolder"],a=M((r=i).prototype,"status",[s.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return L.LOADING}}),M(r.prototype,"setWorkbenchStatus",[s.action],Object.getOwnPropertyDescriptor(r.prototype,"setWorkbenchStatus"),r.prototype),r)},"./runtime-repl/folder/workbench/FolderWorkbenchModel.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return U}});var r,a,i,s,o,l,c=t("../../node_modules/mobx/lib/mobx.module.js"),u=t("./node_modules/postman-collection/index.js"),d=t("./runtime-repl/auth/oauth2/datastores/controllers/AuthSessionController.js"),h=t("./js/stores/ActiveWorkspaceStore.js"),m=t("./js/stores/OnlineStatusStore.js"),p=t("./js/stores/StoreManager.js"),f=t("./js/stores/ActiveWorkspaceSessionStore.js"),b=t("./js/common/model-event.js"),g=t("./js/modules/pipelines/user-action.js"),y=t("./runtime-repl/auth/authUtil.js"),v=t("./js/utils/configurationsUtil.js"),T=t("./js/services/EditorService.js"),A=t("./runtime-repl/_common/VariableSessionHelper.js"),w=t("./js/utils/uid-helper.js"),E=t("./runtime-repl/collection/_api/CollectionStoreV2.js"),S=t("./runtime-repl/auth/AuthConstants.js"),k=t("./js/modules/services/AnalyticsService.js"),I=t("./runtime-repl/folder/FolderConstants.js"),x=t("./runtime-repl/transient-collection/datastores/stores/TransientFolderStore.ts"),j=t("./runtime-repl/_common/ModelConstant.js"),C=t("./appsdk/tracked-state/ObservableTrackedState.js"),R=t("./runtime-repl/_common/WorkspaceHelpers.js"),P=t("./runtime-repl/_common/ToastHelpers.js"),_=t("./node_modules/lodash/lodash.js");function O(e,n,t,r){t&&Object.defineProperty(e,n,{enumerable:t.enumerable,configurable:t.configurable,writable:t.writable,value:t.initializer?t.initializer.call(r):void 0})}function N(e,n,t,r,a){var i={};return Object.keys(r).forEach((function(e){i[e]=r[e]})),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=t.slice().reverse().reduce((function(t,r){return r(e,n,t)||t}),i),a&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(a):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(e,n,i),i=null),i}let U=((l=class{get name(){var e,n;return this.isTransient?null===(e=x.default.find(this.folderId))||void 0===e||null===(n=e.model)||void 0===n?void 0:n.name:this.folderItem.name}constructor(e,n,t){this.folderId=null,this.parentCollectionId=null,this._trackedFolder=null,O(this,"inheritedConfigParent",a,this),O(this,"activeTab",i,this),O(this,"authSession",s,this),O(this,"isSaving",o,this),this.folderId=(0,w.decomposeUID)(e.id).modelId,this.additionalContext=t,this.isTransient=t.isTransient,this.owner=e.owner,this.isTransient?(this.parentCollectionId=e.collection,this.parentCollectionUID=(0,w.composeUID)(e.collection,e.owner),this.folderUID=e.uid):(this.parentCollectionId=(0,w.decomposeUID)(e.collection).modelId,this.parentCollectionUID=e.collection,this.folderUID=e.id),this.folderItem=e,this.parentCollectionItem=t.parentCollectionItem,this._trackedFolder=new C.ObservableTrackedState(this.transform(e)),this.set("authSession",n?n.value:null),this.debouncedUpdateAuthSession=_.debounce(this.updateAuthSession,100,{leading:!1,trailing:!0})}get transientStoreItem(){return this.folderId&&x.default.find(this.folderId)}get isPublished(){var e,n;return null===(e=this.transientStoreItem)||void 0===e||null===(n=e.model)||void 0===n?void 0:n.isPublished}get isEditable(){return this.isTransient?_.get(this.transientStoreItem,"model.isEditable",!0):_.get(this.folderItem,"permissions.edit",!0)}set preRequestScript(e){this._trackedFolder.set({preRequestScript:e})}get preRequestScript(){return this._trackedFolder.get("preRequestScript")}set tests(e){this._trackedFolder.set({tests:e})}get tests(){return this._trackedFolder.get("tests")}set auth(e){this._trackedFolder.set({auth:e})}get auth(){return this._trackedFolder.get("auth")}set protocolProfileBehavior(e){this._trackedFolder.set({protocolProfileBehavior:e})}get protocolProfileBehavior(){return this._trackedFolder.get("protocolProfileBehavior")}get isDirty(){return this._trackedFolder.isDirty}get initialState(){return this._trackedFolder.initialState}get updates(){return this._trackedFolder.updates}get actionMenuContext(){return{activeCollectionId:this.parentCollectionUID,isTransient:this.isTransient,canEditEntity:_.get(this.folderItem,"permissions.edit",!0),collection:this.parentCollectionItem}}get transientFolderItem(){var e;return this.isTransient&&(null===(e=x.default.find(this.folderId))||void 0===e?void 0:e.model)}handleIncomingUpdates(e,n){e&&(0,c.transaction)((()=>{this._trackedFolder.setInitialState(this.transform(e)),this.set("authSession",n?n.value:null)}))}resetTracking(){this._trackedFolder.reset({auth:this.auth,preRequestScript:this.preRequestScript,tests:this.tests,protocolProfileBehavior:this.protocolProfileBehavior})}unsubscribe(){this.folderItem&&this.folderItem.unsubscribe&&this.folderItem.unsubscribe(),this.parentCollectionItem&&this.parentCollectionItem.unsubscribe&&this.parentCollectionItem.unsubscribe()}setSavingState(e){this.isSaving=e}transform(e){if(e)return _.assign(_.pick(e,["auth","protocolProfileBehavior"]),function(e){if(_.isEmpty(e))return{};const n=new u.EventList({},Array.isArray(e.events)?e.events:[]),t=_.head(n.listenersOwn("prerequest")),r=_.head(n.listenersOwn("test"));return{preRequestScript:_.isEmpty(t)?"":_.invoke(t,"script.toSource"),tests:_.isEmpty(r)?"":_.invoke(r,"script.toSource")}}(e));pm.logger.warn("FolderWorkbenchModel~transform: Folder not found")}get folder(){return _.pick(this,this.constructor.editableKeys)}get inheritedAuth(){let e=_.get(this.folderItem,"parent");if(!e&&!this.parentCollectionId)return{};for(;e;){if(e.auth)return{entity:{id:(0,w.decomposeUID)(e.id).modelId,type:e.type,name:e.name,uid:e.id,parentCollectionUID:this.parentCollectionUID},type:e.auth.type};e=e.parent}const n=this.parentCollectionItem;return n&&{entity:{id:(0,w.decomposeUID)(n.id).modelId,type:"collection",name:n.name,uid:n.id},type:S.AUTH_TYPE_RAW_NO_AUTH}}set(e,n){this[e]=n}setInheritedConfig(){(0,E.getOne)(this.parentCollectionUID).then((e=>{_.isEmpty(e)||this.set("inheritedConfigParent",(0,v.getFolderInheritedState)(e,this.folderId,"edit"))})).catch((e=>{pm.logger.error("FolderWorkbenchModel~setInheritedConfig: Error in fetching collection",e)}))}setAuthType(e){if(_.get(this.auth,"type")!==e)return e===S.AUTH_TYPE_RAW_INHERIT?this.set("auth",null):e===S.AUTH_TYPE_RAW_NO_AUTH?this.set("auth",{type:e}):void this.set("auth",{type:e,[e]:(0,y.getDefaultAuthProps)(e)})}setAuthField(e,n,t){const r={type:e,[e]:(0,y.setAuthValue)(this.auth,e,n,t)};this.set("auth",r)}deleteAuthField(e,n){const t={type:e,[e]:(0,y.deleteAuthValue)(this.auth,e,n)};this.set("auth",t)}setAuthSessionField(e,n,t){const r={type:e,[e]:(0,y.setAuthValue)(this.authSession,e,n,t)};this.set("authSession",r)}resetUpdates(e){this._trackedFolder.set(e)}requestSave(){T.default.requestSave({id:(0,p.resolveStoreInstance)(f.default).activeEditor})}save(e){if(!this.isDirty)return Promise.resolve();if(this.isTransient){try{k.default.addEventV2({category:"folder-git-linked",action:"save",entityId:this.folderId})}catch(e){pm.logger.error("FolderWorkbenchModel~save Error while sending analytics events",e)}return Promise.resolve().then((()=>{const e=new u.Event({listen:"prerequest",script:this.preRequestScript}),n=new u.Event({listen:"test",script:this.tests});let t=_.pick(this,["auth","protocolProfileBehavior"]);t.events=new u.EventList({},[e,n]).toJSON(),t=(0,c.toJS)(t,{recurseEverything:!0});x.default.find(this.folderId).model.update({id:this.folderId,...t})})).then((()=>this.resetTracking())).catch((e=>(pm.logger.error("Error while updating folder",e),pm.toasts.error("Something went wrong while saving the folder.",{dedupeId:"folder-tab-save"}),Promise.reject(new Error("Error while updating folder")))))}if(!(0,p.resolveStoreInstance)(m.default).userCanSave)return(0,P.showOfflineActionDisabledToast)();if(!this.folderId)return pm.logger.error("FolderWorkbenchController~save: Fodler id not found"),Promise.reject(new Error("Folder id not found"));if(!(0,R.isWorkspaceMember)())return(0,R.canJoinWorkspace)()?pm.mediator.trigger("openUnjoinedWorkspaceModal"):(0,R.isLoggedIn)()?pm.toasts.error("You do not have permissions required to perform the action."):pm.mediator.trigger("showSignInModal",{type:"folder",origin:"save_folder"});const n=_.get(this.folderItem,"permissions.edit",!0);return Promise.resolve().then((()=>{if(!n)return Promise.resolve();const t=new u.Event({listen:"prerequest",script:this.preRequestScript}),r=new u.Event({listen:"test",script:this.tests});let a=_.pick(this,["auth","protocolProfileBehavior"]);a.events=new u.EventList({},[t,r]).toJSON(),a=(0,c.toJS)(a,{recurseEverything:!0}),this.setSavingState(!0),e(_.assign({id:this.folderId},a)).finally((()=>this.setSavingState(!1))).catch((e=>{pm.logger.error("Error while updating folder",e),pm.toasts.error("Something went wrong while saving the folder.",{dedupeId:"folder-tab-save"})}))})).then((()=>this.resetTracking())).catch((e=>(this.setSavingState(!1),pm.logger.error("Error while updating folder",e),pm.toasts.error("Something went wrong while saving the folder.",{dedupeId:"folder-tab-save"}),Promise.reject(new Error("Error while updating folder")))))}updateAuthSession(){const e=(0,p.resolveStoreInstance)(h.default).id,n=(0,A.getSessionId)(j.FOLDER,this.folderId,e,this.isTransient);return _.get(this.folderItem,"permissions.edit",!0)?d.default.get({id:n}).then((t=>{if(t)return(0,g.default)((0,b.createEvent)("update",j.AUTH_SESSION,_.assign({},_.cloneDeep(t),{value:(0,c.toJS)(this.authSession)})));if(!_.isEmpty(this.authSession)){const t={id:n,model:j.FOLDER,modelId:this.folderId,workspace:e,value:(0,c.toJS)(this.authSession)};return(0,g.default)((0,b.createEvent)("create",j.AUTH_SESSION,t))}})):Promise.resolve()}unsetContext(e){this.additionalContext&&delete this.additionalContext[e]}}).editableKeys=["auth","preRequestScript","tests","protocolProfileBehavior"],a=N((r=l).prototype,"inheritedConfigParent",[c.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),i=N(r.prototype,"activeTab",[c.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return I.FOLDER_AUTHORIZATION}}),s=N(r.prototype,"authSession",[c.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),o=N(r.prototype,"isSaving",[c.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),N(r.prototype,"name",[c.computed],Object.getOwnPropertyDescriptor(r.prototype,"name"),r.prototype),N(r.prototype,"transientStoreItem",[c.computed],Object.getOwnPropertyDescriptor(r.prototype,"transientStoreItem"),r.prototype),N(r.prototype,"isPublished",[c.computed],Object.getOwnPropertyDescriptor(r.prototype,"isPublished"),r.prototype),N(r.prototype,"isEditable",[c.computed],Object.getOwnPropertyDescriptor(r.prototype,"isEditable"),r.prototype),N(r.prototype,"preRequestScript",[c.computed],Object.getOwnPropertyDescriptor(r.prototype,"preRequestScript"),r.prototype),N(r.prototype,"tests",[c.computed],Object.getOwnPropertyDescriptor(r.prototype,"tests"),r.prototype),N(r.prototype,"auth",[c.computed],Object.getOwnPropertyDescriptor(r.prototype,"auth"),r.prototype),N(r.prototype,"protocolProfileBehavior",[c.computed],Object.getOwnPropertyDescriptor(r.prototype,"protocolProfileBehavior"),r.prototype),N(r.prototype,"isDirty",[c.computed],Object.getOwnPropertyDescriptor(r.prototype,"isDirty"),r.prototype),N(r.prototype,"initialState",[c.computed],Object.getOwnPropertyDescriptor(r.prototype,"initialState"),r.prototype),N(r.prototype,"updates",[c.computed],Object.getOwnPropertyDescriptor(r.prototype,"updates"),r.prototype),N(r.prototype,"actionMenuContext",[c.computed],Object.getOwnPropertyDescriptor(r.prototype,"actionMenuContext"),r.prototype),N(r.prototype,"transientFolderItem",[c.computed],Object.getOwnPropertyDescriptor(r.prototype,"transientFolderItem"),r.prototype),N(r.prototype,"setSavingState",[c.action],Object.getOwnPropertyDescriptor(r.prototype,"setSavingState"),r.prototype),N(r.prototype,"folder",[c.computed],Object.getOwnPropertyDescriptor(r.prototype,"folder"),r.prototype),N(r.prototype,"inheritedAuth",[c.computed],Object.getOwnPropertyDescriptor(r.prototype,"inheritedAuth"),r.prototype),N(r.prototype,"set",[c.action],Object.getOwnPropertyDescriptor(r.prototype,"set"),r.prototype),r)},"./runtime-repl/folder/workbench/FolderWorkbenchView.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return A}});var r,a=t("./node_modules/prop-types/index.js"),i=t.n(a),s=t("../../node_modules/react/index.js"),o=t("../../node_modules/mobx-react/dist/mobx-react.module.js"),l=t("../../node_modules/@postman/aether/esmLib/src/components/Illustration/illustrations/UnauthorizedError.js"),c=t("../../node_modules/@postman/aether/esmLib/src/components/Text/Text.js"),u=t("./js/stores/StoreManager.js"),d=t("./js/stores/SyncStatusStore.js"),h=t("./runtime-repl/extensible-collection/configurations/Folder.ts"),m=t("./runtime-repl/extensible-collection/workbench/ECItem/SavedItemController.ts"),p=t("./js/components/empty-states/AetherCrashHandler.js"),f=t("./runtime-repl/folder/workbench/FolderEditor/FolderEditor.js"),b=t("./runtime-repl/_common/components/molecule.js"),g=t("./runtime-repl/folder/workbench/FolderWorkbenchModel.js"),y=t("./runtime-repl/_common/WorkbenchStatusConstants.js"),v=t("./runtime-repl/_common/components/EntityTabEmptyShell/EntityTabEmptyShell.js"),T=t("./node_modules/lodash/lodash.js");let A=(0,o.observer)(r=class extends s.Component{constructor(e){super(e),this.state={ECFolderView:null,loadError:!1},this.props.controller instanceof m.default&&(async()=>{try{const e=[t.e(21).then(t.bind(t,"./runtime-repl/extensible-collection/workbench/ECItem/CreateItemView.tsx")),t.e(24).then(t.bind(t,"./runtime-repl/extensible-collection/workbench/ECFolder/FolderEditor.jsx"))];await Promise.all(e).then((([e,n])=>{const t=e.default(pm.ECItemRegistry.getSDK(h.default.type),n.default);this.setState({ECFolderView:t,loadError:!1})}))}catch(e){this.setState({loadError:!0}),pm.logger.warn(`FolderWorkbenchView#constructor: Failed to fetch extensible-collection/workbench/ECFolder/FolderEditor: ${e}`)}})()}render(){const{model:e,status:n}=this.props.controller,t=T.get(e,"isTransient"),r=e&&e.folderItem,{ECFolderView:a,loadError:i}=this.state;return this.props.controller instanceof m.default&&a?s.createElement(a,{controller:this.props.controller,id:this.props.id}):!(0,u.resolveStoreInstance)(d.default).isConsistentlyOffline||r||t?i?s.createElement(p.default,{title:"Editor failed to load",showError:!0,illustration:s.createElement(l.default,null),message:s.createElement(c.default,null,"Our team has been notified. If the problem persists, please contact ",s.createElement(c.default,{type:"body-medium",color:"content-color-secondary"},s.createElement("a",{href:"mailto:help@postman.com"},s.createElement(c.default,{type:"link-default"},"Postman Support"))),".")}):n===y.ERROR?s.createElement(b.EntityTabLoadingError,{type:"error",userFriendlyEntityName:"folder"}):n===y.DELETED?s.createElement(b.EntityTabLoadingError,{type:"deleted",userFriendlyEntityName:"folder"}):n===y.READY?s.createElement(f.default,{editorId:this.props.id,model:e,controller:this.props.controller}):s.createElement(v.default,null):s.createElement(b.EntityTabLoadingError,{type:"offline",userFriendlyEntityName:"folder"})}})||r;A.propTypes={controller:i().shape({model:i().instanceOf(g.default),status:i().oneOf([y.ERROR,y.DELETED,y.READY,y.LOADING])}).isRequired,id:i().string.isRequired}},"./runtime-repl/request-http/ConfigurationConstants.js":function(e,n,t){"use strict";t.r(n),t.d(n,{BASE:function(){return r},CONFIGURATIONS:function(){return s},CONFIGURATION_INPUT_TYPES:function(){return i},CONFIGURATION_MAP:function(){return a}});const r={GLOBAL:"global",COLLECTION:"request",FOLDER:"folder",REQUEST:"request"},a={followRedirects:"interceptorRedirect",strictSSL:"SSLCertVerify"},i={BOOLEAN:"boolean",NUMBER:"number",STRING:"text",ARRAY:"array"},s=[{id:"strictSSL",title:"Enable SSL certificate verification",description:"Verify SSL certificates when sending a request. Verification failures will result in the request being aborted.",inputFieldType:"toggle",inputType:i.BOOLEAN,defaultValue:!1,base:r.GLOBAL},{id:"followRedirects",title:"Automatically follow redirects",description:"Follow HTTP 3xx responses as redirects.",inputFieldType:"toggle",inputType:i.BOOLEAN,defaultValue:!0,base:r.GLOBAL},{id:"followOriginalHttpMethod",title:"Follow original HTTP Method",description:"Redirect with the original HTTP method instead of the default behavior of redirecting with GET.",inputFieldType:"toggle",inputType:i.BOOLEAN,defaultValue:!1,base:r.COLLECTION},{id:"followAuthorizationHeader",title:"Follow Authorization header",description:"Retain authorization header when a redirect happens to a different hostname.",inputFieldType:"toggle",inputType:i.BOOLEAN,defaultValue:!1,base:r.COLLECTION},{id:"removeRefererHeaderOnRedirect",title:"Remove referer header on redirect",description:"Remove the referer header when a redirect happens.",inputFieldType:"toggle",inputType:i.BOOLEAN,defaultValue:!1,base:r.COLLECTION},{id:"insecureHTTPParser",title:"Enable strict HTTP parser",description:"Restrict responses with invalid HTTP headers.",inputFieldType:"invertedToggle",inputType:i.BOOLEAN,defaultValue:!0,base:r.COLLECTION},{id:"disableUrlEncoding",title:"Encode URL automatically",description:"Encode the URL's path, query parameters, and authentication fields.",inputFieldType:"invertedToggle",inputType:i.BOOLEAN,defaultValue:!1,base:r.COLLECTION},{id:"disableCookies",title:"Disable cookie jar",description:"Prevent cookies used in this request from being stored in the cookie jar. Existing cookies in the cookie jar will not be added as headers for this request.",inputFieldType:"toggle",inputType:i.BOOLEAN,defaultValue:!1,base:r.COLLECTION},{id:"tlsPreferServerCiphers",title:"Use server cipher suite during handshake",description:"Use the server's cipher suite order instead of the client's during handshake.",inputFieldType:"toggle",inputType:i.BOOLEAN,defaultValue:!1,base:r.COLLECTION},{id:"maxRedirects",title:"Maximum number of redirects",description:"Set a cap on the maximum number of redirects to follow.",inputFieldType:"input",inputType:i.NUMBER,defaultValue:10,base:r.COLLECTION},{id:"tlsDisabledProtocols",title:"Protocols disabled during handshake",description:"Specify the SSL and TLS protocol versions to be disabled during handshake. All other protocols will be enabled.",inputFieldType:"multiSelectDropdown",inputType:i.ARRAY,menuOptions:["TLSv1","TLSv1_1","TLSv1_2","TLSv1_3"],menuLabels:["TLS v1","TLS v1.1","TLS v1.2","TLS v1.3"],defaultValue:[],base:r.COLLECTION},{id:"tlsCipherSelection",title:"Cipher suite selection",description:"Order of cipher suites that the SSL server profile uses to establish a secure connection.",inputFieldType:"multipleInput",inputType:i.ARRAY,defaultValue:[],base:r.COLLECTION}]},"./runtime-repl/request-http/RequestApiKeyAuthConstants.js":function(e,n,t){"use strict";t.r(n),t.d(n,{IN:function(){return r}});const r={QUERY:"query",HEADER:"header"}},"./runtime-repl/scripts/ScriptEditor.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return R}});var r,a=t("../../node_modules/react/index.js"),i=t("../../node_modules/react-dom/index.js"),s=t("../../node_modules/mobx-react/dist/mobx-react.module.js"),o=t("../../node_modules/mobx/lib/mobx.module.js"),l=t("./node_modules/classnames/index.js"),c=t.n(l),u=t("./node_modules/prop-types/index.js"),d=t.n(u),h=t("./js/components/base/XPaths/XPath.js"),m=t("./runtime-repl/_common/_api/type-definition-providers/pre-script-type-definitions-provider.js"),p=t("./runtime-repl/_common/_api/type-definition-providers/tests-type-definitions-provider.js"),f=t("./runtime-repl/scripts/SnippetsConstants.js"),b=t("./js/stores/ActiveWorkspaceSessionStore.js"),g=t("./js/stores/AnnotationStore.js"),y=t("./runtime-repl/_common/components/stores/ActionMenuStore.js"),v=t("./js/stores/StoreManager.js"),T=t("./collaboration/stores/InlineCommentUIStore.js"),A=t("./collaboration/config/CommentModelConfig.js"),w=t("./collaboration/utils/commentUtils.js"),E=t("./appsdk/components/editors/texteditor/TextEditor.js"),S=t("./runtime-repl/scripts/SnippetsList.js"),k=t("./appsdk/components/editors/texteditor/codeCompletion-providers/variableCodeCompletion-provider.js"),I=t("./collaboration/config/InlineCommentTransformerConfig.js"),x=t("./node_modules/lodash/lodash.js");function j(e,n){return!(!e||!n)&&(!(e.startLineNumber<n.startLineNumber||e.endLineNumber>n.endLineNumber)&&(!(e.startLineNumber===n.startLineNumber&&e.startColumn<n.startColumnNumber)&&!(e.endLineNumber===n.endLineNumber&&e.endColumn>n.endColumnNumber)))}function C(e,n){return!(!e||!n)&&(!(e.endLineNumber<n.startLineNumber)&&(!(e.startLineNumber>n.endLineNumber)&&(!(e.startLineNumber===n.endLineNumber&&e.startColumn>=n.endColumnNumber)&&!(e.endLineNumber===n.startLineNumber&&e.endColumn<=n.startColumnNumber))))}let R=(0,s.observer)(r=class extends a.Component{constructor(e){super(e),this.state={snippetListWidth:0},this.handleSnippetSelect=this.handleSnippetSelect.bind(this),this.onSelection=this.onSelection.bind(this),this.onSelectionDebounced=x.debounce(this.onSelection,500),this.registerTextEditor=this.registerTextEditor.bind(this),this.highlightInTextEditor=this.highlightInTextEditor.bind(this),this.onClickInside=this.onClickInside.bind(this),this.onClickInsideDebounced=x.debounce(this.onClickInside,300),this.highlightInTextEditorDebounced=x.debounce(this.highlightInTextEditor,300),this.handleActionMenu=this.handleActionMenu.bind(this),this.textEditorInstance=null,this.decorationsCache=[],this.inlineCommentStore=(0,v.resolveStoreInstance)(T.default),this.actionMenuStore=(0,v.resolveStoreInstance)(y.default)}componentDidMount(){"request"===this.props.parent?this.activeTabSwitchReactionDisposer=(0,o.reaction)((()=>this.props.editor.viewState.activeTab),(e=>{e===this.props.type&&this.textEditor&&this.textEditor.focus()}),{fireImmediately:!0}):"collection"!==this.props.parent&&"folder"!==this.props.parent||(this.activeTabSwitchReactionDisposer=(0,o.reaction)((()=>this.props.editor.activeTab),(e=>{("pre-request-scripts"===e&&this.props.type===f.SNIPPETS_PROP_PRSCRIPT||"tests"===e&&this.props.type===f.SNIPPETS_PROP_TESTS)&&this.textEditor&&this.textEditor.focus()}),{fireImmediately:!0})),this.computeWidth(),pm.mediator.on("highlightInTextEditor",this.highlightInTextEditorDebounced),this.highlightInTextEditorDebounced()}componentDidUpdate(e){this.highlightInTextEditorDebounced(),e.snippetCollapsed===this.props.snippetCollapsed&&e.layoutName===this.props.layoutName||this.computeWidth()}componentWillUnmount(){this.activeTabSwitchReactionDisposer&&this.activeTabSwitchReactionDisposer(),pm.mediator.off("highlightInTextEditor",this.highlightInTextEditorDebounced)}onClickInside({target:e}){if(this.inlineCommentStore.disableComments||!this.props.commentMode)return;const n=e&&e.element&&e.element.classList;if(n&&n.contains("view-line"))return;const t=this.getFilteredAnnotations(),r=this.textEditor&&this.inlineCommentStore.getPathFromTarget((0,i.findDOMNode)(this.textEditor)),a=e&&e.range,s=this.textEditorInstance&&this.textEditorInstance.getSelection(),{startColumn:o,endColumn:l,startLineNumber:c,endLineNumber:u}=s||{},d=o===l&&c===u;let h=!1;x.forEach(t,(n=>{const t=x.get(n,"selection.range");if(j(a,t)){const n={startColumn:t.startColumnNumber,endColumn:t.endColumnNumber,startLineNumber:t.startLineNumber,endLineNumber:t.endLineNumber},a=this.textEditorInstance&&this.textEditorInstance.getModel().getValueInRange(n),i=C(s,t)&&d;this.inlineCommentStore.setCommentPath(e&&e.element,r),!this.inlineCommentStore.disableComments&&i&&(this.inlineCommentStore.setSelectionValue(a),this.inlineCommentStore.setSelectionRange(t),this.inlineCommentStore.setCommentPopoverState(!0),h=!0)}})),!d||h||this.inlineCommentStore.showComments||this.inlineCommentStore.setCommentPopoverState(!1)}onSelection(e){if(!this.props.commentMode)return this.handleActionMenu(e);if(this.inlineCommentStore.disableComments)return;const n=this.getFilteredAnnotations(),t=e&&e.selection;if(t.startColumn===t.endColumn&&t.startLineNumber===t.endLineNumber){let e=!1;return x.forEach(n,(n=>{j(t,x.get(n,"selection.range"))&&(e=!0)})),void(e||(this.inlineCommentStore.setCommentPopoverState(!1),this.inlineCommentStore.setCommentState(!1)))}let r=!1;if(x.forEach(n,(e=>{C(t,x.get(e,"selection.range"))&&(r=!0)})),r)return this.inlineCommentStore.setCommentPopoverState(!1),void this.inlineCommentStore.setCommentState(!1);const a={startLineNumber:t.startLineNumber,endLineNumber:t.endLineNumber,startColumnNumber:t.startColumn,endColumnNumber:t.endColumn},s=this.textEditorInstance&&this.textEditorInstance.getModel().getValueInRange(t);let o;o=t.selectionStartLineNumber===t.startLineNumber&&t.selectionStartColumn===t.startColumn?"forward":"backward";const l=this.textEditorInstance.getDomNode().querySelector(".inputarea"),c=this.textEditor&&this.inlineCommentStore.getPathFromTarget((0,i.findDOMNode)(this.textEditor));this.inlineCommentStore.setTooltipPlacement({forward:"right-top",backward:"left-top"}[o]),this.inlineCommentStore.setCommentPath(l,c),this.inlineCommentStore.setSelectionValue(s),this.inlineCommentStore.setSelectionRange(a),this.inlineCommentStore.setCommentPopoverState(!0),this.inlineCommentStore.setCommentState(!0)}getFilteredAnnotations(){const e=(0,w.getCommentModelInfo)({model:"request"}).model||"request",n=x.find(I.default[e].anchors,(e=>"events/prerequest"===e.schemaPathIdentifier)),t=x.find(I.default[e].anchors,(e=>"events/test"===e.schemaPathIdentifier)),r={prscript:n&&n.schemaPathRegex,tests:t&&t.schemaPathRegex},a=(0,v.resolveStoreInstance)(g.default),i=r[this.props.type];return x.filter(a.values,(e=>x.includes(A.REQUEST_COMMENT_MODELS,e.model)&&e.modelId===x.get(this.props,"editor.requestId")&&e.path&&!(e.status.orphaned||e.status.resolved)&&i&&i.test(e.anchor)))||[]}getStyles(){return{width:`calc(100% - ${this.state.snippetListWidth}px)`}}getContainerClasses(){const e={"request-script-editor":!0};return e[`comment-available__${this.props.currentTheme}`]=this.props.commentMode,c()(e)}focus(){this.textEditor&&this.textEditor.focus()}refreshEditor(){this.textEditor&&this.textEditor.refresh()}handleSnippetSelect(e){if(e&&e.code&&this.textEditor){const n=e.code||"";this.textEditor.insertTextBlock(n)}}computeWidth(){if(this.snippetList){const e=(0,i.findDOMNode)(this.snippetList).getBoundingClientRect().width;e>0&&this.setState({snippetListWidth:e})}}handleActionMenu(e){const n=this.textEditorInstance.getDomNode().querySelector(".selected-text"),t=e&&e.selection,r=this.textEditorInstance&&this.textEditorInstance.getModel().getValueInRange(t),a=this.textEditorInstance&&this.textEditorInstance.getModel().getValueInRange({startColumn:0,startLineNumber:0,endColumn:t.startColumn,endLineNumber:t.startLineNumber}),i=this.textEditorInstance&&this.textEditorInstance.getModel().getLineCount(),s=this.textEditorInstance&&this.textEditorInstance.getModel().getLineMaxColumn(i),o=this.textEditorInstance&&this.textEditorInstance.getModel().getValueInRange({startColumn:t.endColumn,startLineNumber:t.endLineNumber,endColumn:s,endLineNumber:i});if(!r||!n)return this.actionMenuStore.clear();this.actionMenuStore.setActionMenuState(!0,n,r,t,"monaco",this.props.onChange),this.actionMenuStore.setSurroundingText(a,o)}registerTextEditor(e){this.textEditorInstance=e}highlightInTextEditor(e){const{activeEditor:n}=(0,v.resolveStoreInstance)(b.default);if(x.get(this.props,"editor.id")!==n)return;if(!this.textEditorInstance)return;let t=[];if(!this.props.commentMode)return t=this.textEditorInstance.deltaDecorations(this.decorationsCache,[]),void(this.decorationsCache=t);const r=this.getFilteredAnnotations();if(!Array.isArray(r))return;if(x.isEmpty(r))return t=this.textEditorInstance.deltaDecorations(this.decorationsCache,[]),void(this.decorationsCache=t);const a=x.map(r,(e=>{const n=x.get(e,"selection.range");return{range:{startLineNumber:n.startLineNumber,startColumn:n.startColumnNumber,endLineNumber:n.endLineNumber,endColumn:n.endColumnNumber},options:{className:"inline-comment-available"}}}));t=this.textEditorInstance.deltaDecorations(this.decorationsCache,a),this.decorationsCache=t;const s=this.textEditor&&(0,i.findDOMNode)(this.textEditor);(0,w.openCommentPopoverInsideTextEditor)(e,r,this.textEditorInstance,s)}render(){const{editor:e}=this.props;let n;return n="collection"===this.props.source||"folder"===this.props.source?this.props.readOnly:this.props.commentMode,a.createElement("div",{className:this.getContainerClasses()},a.createElement("div",{className:`request-${this.props.type}-editor request-script-editor text-editor-wrapper`,style:this.getStyles()},a.createElement(h.default,{identifier:"scriptEditor"},a.createElement(E.default,{ref:e=>{this.textEditor=e},language:"javascript",hideActionBar:!0,value:this.props.value,onChange:this.props.onChange,codeCompletionProviders:[{provider:k.default.bind(this)}],typeDefinitionsProvider:this.props.typeDefinitionsProvider||(this.props.type===f.SNIPPETS_PROP_PRSCRIPT?m.default:p.default),readOnly:n,onSelection:this.onSelectionDebounced,registerTextEditor:this.registerTextEditor,onClickInside:this.onClickInsideDebounced,onSubmit:this.props.onSubmit}))),!this.props.commentMode&&a.createElement(h.default,{identifier:"snippets"},a.createElement("div",{className:`request-${this.props.type}-editor-snippets request-script-snippets`,ref:e=>{this.snippetList=e}},a.createElement(S.default,{help:{text:this.props.snippetText,link:this.props.snippetLink,action:this.props.onSnippetAction},snippets:this.props.snippets,handleSnippetSelect:this.handleSnippetSelect,snippetCollapsed:this.props.snippetCollapsed,handleCollapseToggle:this.props.handleCollapseToggle,editor:e,mode:this.props.mode}))))}})||r;R.contextTypes={variablesCache:d().object}},"./runtime-repl/scripts/ScriptEditorContainer.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return u}});var r,a=t("../../node_modules/react/index.js"),i=t("../../node_modules/mobx-react/dist/mobx-react.module.js"),s=t("./runtime-repl/scripts/SnippetsConstants.js"),o=t("./js/constants/AppUrlConstants.js"),l=t("./js/external-navigation/ExternalNavigationService.js"),c=t("./runtime-repl/scripts/ScriptEditor.js");let u=(0,i.observer)(r=class extends a.Component{constructor(e){super(e),this.state={snippetCollapsed:pm.settings.getSetting("scriptSnippetCollapsed")},this.editorRef=a.createRef(),this.onLearnMore=this.onLearnMore.bind(this),this.handleCollapseToggle=this.handleCollapseToggle.bind(this),this.updateSnippetCollapsedState=this.updateSnippetCollapsedState.bind(this)}componentDidMount(){pm.settings.on("setSetting:scriptSnippetCollapsed",this.updateSnippetCollapsedState)}componentWillUnmount(){pm.settings.off("setSetting:scriptSnippetCollapsed",this.updateSnippetCollapsedState)}getChildProps(){let e;return e=this.props.type===s.SNIPPETS_PROP_TESTS?{snippets:s.SNIPPETS_TEST,snippetText:s.SNIPPETS_TEXT_TEST,snippetLink:s.SNIPPETS_LINK_TEST,mode:s.SNIPPETS_CONST_TEST}:{snippets:s.SNIPPETS_PREREQ,snippetText:s.SNIPPETS_TEXT_PREREQ,snippetLink:s.SNIPPETS_LINK_PREREQ,mode:s.SNIPPETS_CONST_PREREQUEST},e}focus(){this.editorRef.focus()}refresh(){this.editorRef.refresh()}onLearnMore(){this.props.type===s.SNIPPETS_PROP_TESTS?(0,l.openExternalLink)(o.TEST_SCRIPT_DOCS,"_blank"):(0,l.openExternalLink)(o.PRE_REQUEST_SCRIPT_DOCS,"_blank")}updateSnippetCollapsedState(){this.setState({snippetCollapsed:pm.settings.getSetting("scriptSnippetCollapsed")})}handleCollapseToggle(){const e=pm.settings.getSetting("scriptSnippetCollapsed");pm.settings.setSetting("scriptSnippetCollapsed",!e)}render(){const e=this.getChildProps();return a.createElement("div",{className:`${this.props.type}-editor-container`},a.createElement("div",{className:`${this.props.type}-editor-group`},a.createElement(c.default,{type:this.props.type,ref:this.editorRef,layoutName:"layout-1-column",value:this.props.value,onChange:this.props.onChange,snippets:e.snippets,snippetText:e.snippetText,snippetLink:e.snippetLink,onSnippetAction:this.onLearnMore,handleCollapseToggle:this.handleCollapseToggle,snippetCollapsed:this.state.snippetCollapsed,mode:e.mode,commentMode:this.props.commentMode,parent:this.props.parent,readOnly:this.props.readOnly,editor:this.props.model})))}})||r},"./runtime-repl/scripts/SnippetsConstants.js":function(e,n,t){"use strict";t.r(n),t.d(n,{SNIPPETS_CONST_PREREQUEST:function(){return p},SNIPPETS_CONST_TEST:function(){return m},SNIPPETS_LINK_PREREQ:function(){return l},SNIPPETS_LINK_TEST:function(){return u},SNIPPETS_PREREQ:function(){return i},SNIPPETS_PROP_PRSCRIPT:function(){return h},SNIPPETS_PROP_TESTS:function(){return d},SNIPPETS_TEST:function(){return s},SNIPPETS_TEXT_PREREQ:function(){return o},SNIPPETS_TEXT_TEST:function(){return c}});var r=t("./node_modules/@postman/script-examples/index.js"),a=t.n(r);const i=a().getExamples("prerequest"),s=a().getExamples("test"),o="Pre-request scripts are written in JavaScript, and are run before the request is sent. Learn more about ",l="pre-request scripts",c="Test scripts are written in JavaScript, and are run after the response is received. Learn more about ",u="tests scripts",d="tests",h="prscript",m="test",p="prerequest"},"./runtime-repl/scripts/SnippetsItem.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return a}});var r=t("../../node_modules/react/index.js");class a extends r.Component{constructor(e){super(e),this.handleClick=this.handleClick.bind(this)}handleClick(){this.props.onSelect&&this.props.onSelect(this.props.snippet)}render(){return r.createElement("div",{className:"snippet-item",onClick:this.handleClick},this.props.snippet.name)}}},"./runtime-repl/scripts/SnippetsList.js":function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return f}});var r,a=t("../../node_modules/react/index.js"),i=t("../../node_modules/mobx-react/dist/mobx-react.module.js"),s=t("../../node_modules/@postman/aether-icons/esmLib/src/Icon/Icon.js"),o=t("./js/components/base/Buttons.js"),l=t("../../node_modules/@postman/aether/esmLib/src/components/Text/Text.js"),c=t("../../node_modules/@postman/aether/esmLib/src/components/Heading/Heading.js"),u=t("./growth/foundation/public/amplitude/AmplitudeService.js"),d=t("./js/modules/services/AnalyticsService.js"),h=t("./appsdk/components/link/Link.js"),m=t("./runtime-repl/scripts/SnippetsItem.js"),p=t("./node_modules/lodash/lodash.js");let f=(0,i.observer)(r=class extends a.Component{constructor(e){super(e),this.handleSnippetSelect=this.handleSnippetSelect.bind(this),this.handleCollapseToggle=this.handleCollapseToggle.bind(this)}handleSnippetSelect(e){u.Ampli.requestBuilderCodeSnippetClicked({snippet_name:e.name,editor_mode:p.get(this.props,"mode"),editor_entity:p.get(this.props,"editor.info.model","collection")}),p.get(this.props,"mode")&&d.default.addEventV2({category:`${p.get(this.props,"mode")}-script-snippets`,action:"click",label:e.name}),this.props.handleSnippetSelect&&this.props.handleSnippetSelect(e)}handleCollapseToggle(){this.props.handleCollapseToggle&&this.props.handleCollapseToggle()}render(){return this.props.snippetCollapsed?a.createElement(o.Button,{className:"snippet-toggle-button",onClick:this.handleCollapseToggle},a.createElement(s.default,{name:"icon-direction-left",className:"snippet-toggle-icon snippet-toggle-icon--expand"})):a.createElement("div",{className:"snippet-wrapper"},a.createElement("div",{className:"snippet-header"},a.createElement("div",{className:"snippet-header__left"},a.createElement("div",{className:"snippet-header__help"},a.createElement(l.default,{type:"small"},this.props.help.text),this.props.help.link&&a.createElement(h.default,{onClick:this.props.help.action,target:"_blank"},a.createElement(l.default,{type:"link-default",isExternal:!0},this.props.help.link))),a.createElement("div",{className:"snippet-header__title"},a.createElement(c.default,{type:"h6",text:"Snippets",hasBottomSpacing:!0}))),a.createElement("div",{className:"snippet-header__right"},a.createElement(o.Button,{className:"snippet-toggle-button",onClick:this.handleCollapseToggle},a.createElement(s.default,{name:"icon-direction-right",className:"snippet-toggle-icon snippet-toggle-icon--collapse"})))),a.createElement("div",{className:"snippet-items"},p.map(this.props.snippets,((e,n)=>a.createElement(m.default,{key:n,snippet:e,onSelect:this.handleSnippetSelect})))))}})||r;f.defaultProps={snippets:[]}},"./node_modules/raw-loader/dist/cjs.js!./node_modules/@types/chai/index.d.ts":function(e,n,t){"use strict";t.r(n),n.default="// Type definitions for chai 4.2\n// Project: http://chaijs.com/\n// Definitions by: Jed Mao <https://github.com/jedmao>,\n//                 Bart van der Schoor <https://github.com/Bartvds>,\n//                 Andrew Brown <https://github.com/AGBrown>,\n//                 Olivier Chevet <https://github.com/olivr70>,\n//                 Matt Wistrand <https://github.com/mwistrand>,\n//                 Josh Goldberg <https://github.com/joshuakgoldberg>,\n//                 Shaun Luttin <https://github.com/shaunluttin>,\n//                 Gintautas Miselis <https://github.com/Naktibalda>,\n//                 Satana Charuwichitratana <https://github.com/micksatana>,\n//                 Erik Schierboom <https://github.com/ErikSchierboom>,\n//                 Bogdan Paranytsia <https://github.com/bparan>,\n//                 CXuesong <https://github.com/CXuesong>,\n//                 Joey Kilpatrick <https://github.com/joeykilpatrick>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 3.0\n\ndeclare namespace Chai {\n    type Message = string | (() => string);\n    type ObjectProperty = string | symbol | number;\n\n    interface PathInfo {\n        parent: object;\n        name: string;\n        value?: any;\n        exists: boolean;\n    }\n\n    interface ErrorConstructor {\n        new(...args: any[]): Error;\n    }\n\n    interface ChaiUtils {\n        addChainableMethod(\n            // object to define the method on, e.g. chai.Assertion.prototype\n            ctx: object,\n            // method name\n            name: string,\n            // method itself; any arguments\n            method: (...args: any[]) => void,\n            // called when property is accessed\n            chainingBehavior?: () => void\n        ): void;\n        overwriteChainableMethod(\n            ctx: object,\n            name: string,\n            method: (...args: any[]) => void,\n            chainingBehavior?: () => void\n        ): void;\n        addLengthGuard(\n            fn: Function,\n            assertionName: string,\n            isChainable: boolean\n        ): void;\n        addMethod(ctx: object, name: string, method: Function): void;\n        addProperty(ctx: object, name: string, getter: () => any): void;\n        overwriteMethod(ctx: object, name: string, method: Function): void;\n        overwriteProperty(ctx: object, name: string, getter: () => any): void;\n        compareByInspect(a: object, b: object): -1 | 1;\n        expectTypes(obj: object, types: string[]): void;\n        flag(obj: object, key: string, value?: any): any;\n        getActual(obj: object, args: AssertionArgs): any;\n        getProperties(obj: object): string[];\n        getEnumerableProperties(obj: object): string[];\n        getOwnEnumerablePropertySymbols(obj: object): symbol[];\n        getOwnEnumerableProperties(obj: object): Array<string | symbol>;\n        getMessage(errorLike: Error | string): string;\n        getMessage(obj: any, args: AssertionArgs): string;\n        inspect(obj: any, showHidden?: boolean, depth?: number, colors?: boolean): string;\n        isProxyEnabled(): boolean;\n        objDisplay(obj: object): void;\n        proxify(obj: object, nonChainableMethodName: string): object;\n        test(obj: object, args: AssertionArgs): boolean;\n        transferFlags(assertion: Assertion, obj: object, includeAll?: boolean): void;\n        compatibleInstance(thrown: Error, errorLike: Error | ErrorConstructor): boolean;\n        compatibleConstructor(thrown: Error, errorLike: Error | ErrorConstructor): boolean;\n        compatibleMessage(thrown: Error, errMatcher: string | RegExp): boolean;\n        getConstructorName(constructorFn: Function): string;\n        getFuncName(constructorFn: Function): string | null;\n\n        // Reexports from pathval:\n        hasProperty(obj: object | undefined | null, name: ObjectProperty): boolean;\n        getPathInfo(obj: object, path: string): PathInfo;\n        getPathValue(obj: object, path: string): object | undefined;\n    }\n\n    type ChaiPlugin = (chai: ChaiStatic, utils: ChaiUtils) => void;\n\n    interface ChaiStatic {\n        expect: ExpectStatic;\n        should(): Should;\n        /**\n         * Provides a way to extend the internals of Chai\n         */\n        use(fn: ChaiPlugin): ChaiStatic;\n        util: ChaiUtils;\n        assert: AssertStatic;\n        config: Config;\n        Assertion: AssertionStatic;\n        AssertionError: typeof AssertionError;\n        version: string;\n    }\n\n    export interface ExpectStatic {\n        (val: any, message?: string): Assertion;\n        fail(message?: string): never;\n        fail(actual: any, expected: any, message?: string, operator?: Operator): never;\n    }\n\n    export interface AssertStatic extends Assert {\n    }\n\n    // chai.Assertion.prototype.assert arguments\n    type AssertionArgs = [\n        // 'expression to be tested'\n        // This parameter is unused and the docs list its type as\n        // 'Philosophical', which is mentioned nowhere else in the source. Do\n        // with that what you will!\n        any,\n        Message, // message if value fails\n        Message, // message if negated value fails\n        any, // expected value\n        any?, // actual value\n        boolean? // showDiff\n    ];\n\n    export interface AssertionPrototype {\n        assert(...args: AssertionArgs): void;\n        _obj: any;\n    }\n\n    export interface AssertionStatic extends AssertionPrototype {\n        prototype: AssertionPrototype;\n\n        new(target: any, message?: string, ssfi?: Function, lockSsfi?: boolean): Assertion;\n\n        // Deprecated properties:\n        includeStack: boolean;\n        showDiff: boolean;\n\n        // Partials of functions on ChaiUtils:\n        addProperty(name: string, getter: (this: AssertionStatic) => any): void;\n        addMethod(name: string, method: (this: AssertionStatic, ...args: any[]) => any): void;\n        addChainableMethod(\n            name: string,\n            method: (this: AssertionStatic, ...args: any[]) => void,\n            chainingBehavior?: () => void\n        ): void;\n        overwriteProperty(name: string, getter: (this: AssertionStatic) => any): void;\n        overwriteMethod(name: string, method: (this: AssertionStatic, ...args: any[]) => any): void;\n        overwriteChainableMethod(\n            name: string,\n            method: (this: AssertionStatic, ...args: any[]) => void,\n            chainingBehavior?: () => void\n        ): void;\n    }\n\n    export type Operator = string; // \"==\" | \"===\" | \">\" | \">=\" | \"<\" | \"<=\" | \"!=\" | \"!==\";\n\n    export type OperatorComparable = boolean | null | number | string | undefined | Date;\n\n    interface ShouldAssertion {\n        equal(value1: any, value2: any, message?: string): void;\n        Throw: ShouldThrow;\n        throw: ShouldThrow;\n        exist(value: any, message?: string): void;\n    }\n\n    interface Should extends ShouldAssertion {\n        not: ShouldAssertion;\n        fail(message?: string): never;\n        fail(actual: any, expected: any, message?: string, operator?: Operator): never;\n    }\n\n    interface ShouldThrow {\n        (actual: Function, expected?: string | RegExp, message?: string): void;\n        (actual: Function, constructor: Error | Function, expected?: string | RegExp, message?: string): void;\n    }\n\n    interface Assertion extends LanguageChains, NumericComparison, TypeComparison {\n        not: Assertion;\n        deep: Deep;\n        ordered: Ordered;\n        nested: Nested;\n        own: Own;\n        any: KeyFilter;\n        all: KeyFilter;\n        a: TypeComparison;\n        an: TypeComparison;\n        include: Include;\n        includes: Include;\n        contain: Include;\n        contains: Include;\n        ok: Assertion;\n        true: Assertion;\n        false: Assertion;\n        null: Assertion;\n        undefined: Assertion;\n        NaN: Assertion;\n        exist: Assertion;\n        empty: Assertion;\n        arguments: Assertion;\n        Arguments: Assertion;\n        equal: Equal;\n        equals: Equal;\n        eq: Equal;\n        eql: Equal;\n        eqls: Equal;\n        property: Property;\n        ownProperty: Property;\n        haveOwnProperty: Property;\n        ownPropertyDescriptor: OwnPropertyDescriptor;\n        haveOwnPropertyDescriptor: OwnPropertyDescriptor;\n        length: Length;\n        lengthOf: Length;\n        match: Match;\n        matches: Match;\n        string(string: string, message?: string): Assertion;\n        keys: Keys;\n        key(string: string): Assertion;\n        throw: Throw;\n        throws: Throw;\n        Throw: Throw;\n        respondTo: RespondTo;\n        respondsTo: RespondTo;\n        itself: Assertion;\n        satisfy: Satisfy;\n        satisfies: Satisfy;\n        closeTo: CloseTo;\n        approximately: CloseTo;\n        members: Members;\n        increase: PropertyChange;\n        increases: PropertyChange;\n        decrease: PropertyChange;\n        decreases: PropertyChange;\n        change: PropertyChange;\n        changes: PropertyChange;\n        extensible: Assertion;\n        sealed: Assertion;\n        frozen: Assertion;\n        oneOf(list: ReadonlyArray<any>, message?: string): Assertion;\n    }\n\n    interface LanguageChains {\n        to: Assertion;\n        be: Assertion;\n        been: Assertion;\n        is: Assertion;\n        that: Assertion;\n        which: Assertion;\n        and: Assertion;\n        has: Assertion;\n        have: Assertion;\n        with: Assertion;\n        at: Assertion;\n        of: Assertion;\n        same: Assertion;\n        but: Assertion;\n        does: Assertion;\n    }\n\n    interface NumericComparison {\n        above: NumberComparer;\n        gt: NumberComparer;\n        greaterThan: NumberComparer;\n        least: NumberComparer;\n        gte: NumberComparer;\n        below: NumberComparer;\n        lt: NumberComparer;\n        lessThan: NumberComparer;\n        most: NumberComparer;\n        lte: NumberComparer;\n        within(start: number, finish: number, message?: string): Assertion;\n        within(start: Date, finish: Date, message?: string): Assertion;\n    }\n\n    interface NumberComparer {\n        (value: number | Date, message?: string): Assertion;\n    }\n\n    interface TypeComparison {\n        (type: string, message?: string): Assertion;\n        instanceof: InstanceOf;\n        instanceOf: InstanceOf;\n    }\n\n    interface InstanceOf {\n        (constructor: any, message?: string): Assertion;\n    }\n\n    interface CloseTo {\n        (expected: number, delta: number, message?: string): Assertion;\n    }\n\n    interface Nested {\n        include: Include;\n        includes: Include;\n        contain: Include;\n        contains: Include;\n        property: Property;\n        members: Members;\n    }\n\n    interface Own {\n        include: Include;\n        includes: Include;\n        contain: Include;\n        contains: Include;\n        property: Property;\n    }\n\n    interface Deep {\n        equal: Equal;\n        equals: Equal;\n        eq: Equal;\n        include: Include;\n        includes: Include;\n        contain: Include;\n        contains: Include;\n        property: Property;\n        members: Members;\n        ordered: Ordered;\n        nested: Nested;\n        own: Own;\n    }\n\n    interface Ordered {\n        members: Members;\n    }\n\n    interface KeyFilter {\n        keys: Keys;\n        members: Members;\n    }\n\n    interface Equal {\n        (value: any, message?: string): Assertion;\n    }\n\n    interface Property {\n        (name: string, value: any, message?: string): Assertion;\n        (name: string, message?: string): Assertion;\n    }\n\n    interface OwnPropertyDescriptor {\n        (name: string, descriptor: PropertyDescriptor, message?: string): Assertion;\n        (name: string, message?: string): Assertion;\n    }\n\n    interface Length extends LanguageChains, NumericComparison {\n        (length: number, message?: string): Assertion;\n    }\n\n    interface Include {\n        (value: any, message?: string): Assertion;\n        keys: Keys;\n        deep: Deep;\n        ordered: Ordered;\n        members: Members;\n        any: KeyFilter;\n        all: KeyFilter;\n    }\n\n    interface Match {\n        (regexp: RegExp, message?: string): Assertion;\n    }\n\n    interface Keys {\n        (...keys: string[]): Assertion;\n        (keys: ReadonlyArray<any> | Object): Assertion;\n    }\n\n    interface Throw {\n        (expected?: string | RegExp, message?: string): Assertion;\n        (constructor: Error | Function, expected?: string | RegExp, message?: string): Assertion;\n    }\n\n    interface RespondTo {\n        (method: string, message?: string): Assertion;\n    }\n\n    interface Satisfy {\n        (matcher: Function, message?: string): Assertion;\n    }\n\n    interface Members {\n        (set: ReadonlyArray<any>, message?: string): Assertion;\n    }\n\n    interface PropertyChange {\n        (object: Object, property?: string, message?: string): Assertion;\n    }\n\n    export interface Assert {\n        /**\n         * @param expression    Expression to test for truthiness.\n         * @param message    Message to display on error.\n         */\n        (expression: any, message?: string): void;\n\n        /**\n         * Throws a failure.\n         *\n         * @param message    Message to display on error.\n         * @remarks Node.js assert module-compatible.\n         */\n        fail(message?: string): never;\n\n        /**\n         * Throws a failure.\n         *\n         * @type T   Type of the objects.\n         * @param actual   Actual value.\n         * @param expected   Potential expected value.\n         * @param message    Message to display on error.\n         * @param operator   Comparison operator, if not strict equality.\n         * @remarks Node.js assert module-compatible.\n         */\n        fail<T>(actual: T, expected: T, message?: string, operator?: Operator): never;\n\n        /**\n         * Asserts that object is truthy.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param message    Message to display on error.\n         */\n        isOk<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that object is truthy.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param message    Message to display on error.\n         */\n        ok<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that object is falsy.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param message    Message to display on error.\n         */\n        isNotOk<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that object is falsy.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param message    Message to display on error.\n         */\n        notOk<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts non-strict equality (==) of actual and expected.\n         *\n         * @type T   Type of the objects.\n         * @param actual   Actual value.\n         * @param expected   Potential expected value.\n         * @param message   Message to display on error.\n         */\n        equal<T>(actual: T, expected: T, message?: string): void;\n\n        /**\n         * Asserts non-strict inequality (==) of actual and expected.\n         *\n         * @type T   Type of the objects.\n         * @param actual   Actual value.\n         * @param expected   Potential expected value.\n         * @param message   Message to display on error.\n         */\n        notEqual<T>(actual: T, expected: T, message?: string): void;\n\n        /**\n         * Asserts strict equality (===) of actual and expected.\n         *\n         * @type T   Type of the objects.\n         * @param actual   Actual value.\n         * @param expected   Potential expected value.\n         * @param message   Message to display on error.\n         */\n        strictEqual<T>(actual: T, expected: T, message?: string): void;\n\n        /**\n         * Asserts strict inequality (==) of actual and expected.\n         *\n         * @type T   Type of the objects.\n         * @param actual   Actual value.\n         * @param expected   Potential expected value.\n         * @param message   Message to display on error.\n         */\n        notStrictEqual<T>(actual: T, expected: T, message?: string): void;\n\n        /**\n         * Asserts that actual is deeply equal (==) to expected.\n         *\n         * @type T   Type of the objects.\n         * @param actual   Actual value.\n         * @param expected   Potential expected value.\n         * @param message   Message to display on error.\n         */\n        deepEqual<T>(actual: T, expected: T, message?: string): void;\n\n        /**\n         * Asserts that actual is not deeply equal (==) to expected.\n         *\n         * @type T   Type of the objects.\n         * @param actual   Actual value.\n         * @param expected   Potential expected value.\n         * @param message   Message to display on error.\n         */\n        notDeepEqual<T>(actual: T, expected: T, message?: string): void;\n\n        /**\n         * Asserts that actual is deeply strict equal (===) to expected.\n         *\n         * @type T   Type of the objects.\n         * @param actual   Actual value.\n         * @param expected   Potential expected value.\n         * @param message   Message to display on error.\n         */\n        deepStrictEqual<T>(actual: T, expected: T, message?: string): void;\n\n        /**\n         * Asserts valueToCheck is strictly greater than (>) valueToBeAbove.\n         *\n         * @param valueToCheck   Actual value.\n         * @param valueToBeAbove   Minimum Potential expected value.\n         * @param message   Message to display on error.\n         */\n        isAbove(valueToCheck: number, valueToBeAbove: number, message?: string): void;\n\n        /**\n         * Asserts valueToCheck is greater than or equal to (>=) valueToBeAtLeast.\n         *\n         * @param valueToCheck   Actual value.\n         * @param valueToBeAtLeast   Minimum Potential expected value.\n         * @param message   Message to display on error.\n         */\n        isAtLeast(valueToCheck: number, valueToBeAtLeast: number, message?: string): void;\n\n        /**\n         * Asserts valueToCheck is strictly less than (<) valueToBeBelow.\n         *\n         * @param valueToCheck   Actual value.\n         * @param valueToBeBelow   Minimum Potential expected value.\n         * @param message   Message to display on error.\n         */\n        isBelow(valueToCheck: number, valueToBeBelow: number, message?: string): void;\n\n        /**\n         * Asserts valueToCheck is less than or equal to (<=) valueToBeAtMost.\n         *\n         * @param valueToCheck   Actual value.\n         * @param valueToBeAtMost   Minimum Potential expected value.\n         * @param message   Message to display on error.\n         */\n        isAtMost(valueToCheck: number, valueToBeAtMost: number, message?: string): void;\n\n        /**\n         * Asserts that value is true.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isTrue<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is false.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isFalse<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is not true.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNotTrue<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is not false.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNotFalse<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is null.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNull<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is not null.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNotNull<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is NaN.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNaN<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is not NaN.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNotNaN<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that the target is neither null nor undefined.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message    Message to display on error.\n         */\n        exists<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that the target is either null or undefined.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message    Message to display on error.\n         */\n        notExists<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is undefined.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isUndefined<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is not undefined.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isDefined<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is a function.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isFunction<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is not a function.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNotFunction<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is an object of type 'Object'\n         * (as revealed by Object.prototype.toString).\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         * @remarks The assertion does not match subclassed objects.\n         */\n        isObject<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is not an object of type 'Object'\n         * (as revealed by Object.prototype.toString).\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNotObject<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is an array.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isArray<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is not an array.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNotArray<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is a string.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isString<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is not a string.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNotString<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is a number.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNumber<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is not a number.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNotNumber<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is a boolean.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isBoolean<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is not a boolean.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNotBoolean<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value's type is name, as determined by Object.prototype.toString.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param name   Potential expected type name of value.\n         * @param message   Message to display on error.\n         */\n        typeOf<T>(value: T, name: string, message?: string): void;\n\n        /**\n         * Asserts that value's type is not name, as determined by Object.prototype.toString.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param name   Potential expected type name of value.\n         * @param message   Message to display on error.\n         */\n        notTypeOf<T>(value: T, name: string, message?: string): void;\n\n        /**\n         * Asserts that value is an instance of constructor.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param constructor   Potential expected contructor of value.\n         * @param message   Message to display on error.\n         */\n        instanceOf<T>(value: T, constructor: Function, message?: string): void;\n\n        /**\n         * Asserts that value is not an instance of constructor.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param constructor   Potential expected contructor of value.\n         * @param message   Message to display on error.\n         */\n        notInstanceOf<T>(value: T, type: Function, message?: string): void;\n\n        /**\n         * Asserts that haystack includes needle.\n         *\n         * @param haystack   Container string.\n         * @param needle   Potential substring of haystack.\n         * @param message   Message to display on error.\n         */\n        include(haystack: string, needle: string, message?: string): void;\n\n        /**\n         * Asserts that haystack includes needle.\n         *\n         * @type T   Type of values in haystack.\n         * @param haystack   Container array, set or map.\n         * @param needle   Potential value contained in haystack.\n         * @param message   Message to display on error.\n         */\n        include<T>(haystack: ReadonlyArray<T> | ReadonlySet<T> | ReadonlyMap<any, T>, needle: T, message?: string): void;\n\n        /**\n         * Asserts that haystack includes needle.\n         *\n         * @type T   Type of values in haystack.\n         * @param haystack   WeakSet container.\n         * @param needle   Potential value contained in haystack.\n         * @param message   Message to display on error.\n         */\n        include<T extends object>(haystack: WeakSet<T>, needle: T, message?: string): void;\n\n        /**\n         * Asserts that haystack includes needle.\n         *\n         * @type T   Type of haystack.\n         * @param haystack   Object.\n         * @param needle   Potential subset of the haystack's properties.\n         * @param message   Message to display on error.\n         */\n        include<T>(haystack: T, needle: Partial<T>, message?: string): void;\n\n        /**\n         * Asserts that haystack does not includes needle.\n         *\n         * @param haystack   Container string.\n         * @param needle   Potential substring of haystack.\n         * @param message   Message to display on error.\n         */\n        notInclude(haystack: string, needle: string, message?: string): void;\n\n        /**\n         * Asserts that haystack does not includes needle.\n         *\n         * @type T   Type of values in haystack.\n         * @param haystack   Container array, set or map.\n         * @param needle   Potential value contained in haystack.\n         * @param message   Message to display on error.\n         */\n        notInclude<T>(haystack: ReadonlyArray<T> | ReadonlySet<T> | ReadonlyMap<any, T>, needle: T, message?: string): void;\n\n        /**\n         * Asserts that haystack does not includes needle.\n         *\n         * @type T   Type of values in haystack.\n         * @param haystack   WeakSet container.\n         * @param needle   Potential value contained in haystack.\n         * @param message   Message to display on error.\n         */\n        notInclude<T extends object>(haystack: WeakSet<T>, needle: T, message?: string): void;\n\n        /**\n         * Asserts that haystack does not includes needle.\n         *\n         * @type T   Type of haystack.\n         * @param haystack   Object.\n         * @param needle   Potential subset of the haystack's properties.\n         * @param message   Message to display on error.\n         */\n        notInclude<T>(haystack: T, needle: Partial<T>, message?: string): void;\n\n        /**\n         * Asserts that haystack includes needle. Deep equality is used.\n         *\n         * @param haystack   Container string.\n         * @param needle   Potential substring of haystack.\n         * @param message   Message to display on error.\n         *\n         * @deprecated Does not have any effect on string. Use {@link Assert#include} instead.\n         */\n        deepInclude(haystack: string, needle: string, message?: string): void;\n\n        /**\n         * Asserts that haystack includes needle. Deep equality is used.\n         *\n         * @type T   Type of values in haystack.\n         * @param haystack   Container array, set or map.\n         * @param needle   Potential value contained in haystack.\n         * @param message   Message to display on error.\n         */\n        deepInclude<T>(haystack: ReadonlyArray<T> | ReadonlySet<T> | ReadonlyMap<any, T>, needle: T, message?: string): void;\n\n        /**\n         * Asserts that haystack does not includes needle.\n         *\n         * @type T   Type of haystack.\n         * @param haystack   Object.\n         * @param needle   Potential subset of the haystack's properties.\n         * @param message   Message to display on error.\n         */\n        deepInclude<T>(haystack: T, needle: T extends WeakSet<any> ? never : Partial<T>, message?: string): void;\n\n        /**\n         * Asserts that haystack does not includes needle. Deep equality is used.\n         *\n         * @param haystack   Container string.\n         * @param needle   Potential substring of haystack.\n         * @param message   Message to display on error.\n         *\n         * @deprecated Does not have any effect on string. Use {@link Assert#notInclude} instead.\n         */\n        notDeepInclude(haystack: string, needle: string, message?: string): void;\n\n        /**\n         * Asserts that haystack does not includes needle. Deep equality is used.\n         *\n         * @type T   Type of values in haystack.\n         * @param haystack   Container array, set or map.\n         * @param needle   Potential value contained in haystack.\n         * @param message   Message to display on error.\n         */\n        notDeepInclude<T>(haystack: ReadonlyArray<T> | ReadonlySet<T> | ReadonlyMap<any, T>, needle: T, message?: string): void;\n\n        /**\n         * Asserts that haystack does not includes needle. Deep equality is used.\n         *\n         * @type T   Type of haystack.\n         * @param haystack   Object.\n         * @param needle   Potential subset of the haystack's properties.\n         * @param message   Message to display on error.\n         */\n        notDeepInclude<T>(haystack: T, needle: T extends WeakSet<any> ? never : Partial<T>, message?: string): void;\n\n        /**\n         * Asserts that ‘haystack’ includes ‘needle’. Can be used to assert the inclusion of a subset of properties in an object.\n         *\n         * Enables the use of dot- and bracket-notation for referencing nested properties.\n         * ‘[]’ and ‘.’ in property names can be escaped using double backslashes.Asserts that ‘haystack’ includes ‘needle’.\n         * Can be used to assert the inclusion of a subset of properties in an object.\n         * Enables the use of dot- and bracket-notation for referencing nested properties.\n         * ‘[]’ and ‘.’ in property names can be escaped using double backslashes.\n         *\n         * @param haystack\n         * @param needle\n         * @param message   Message to display on error.\n         */\n        nestedInclude(haystack: any, needle: any, message?: string): void;\n\n        /**\n         * Asserts that ‘haystack’ does not include ‘needle’. Can be used to assert the absence of a subset of properties in an object.\n         *\n         * Enables the use of dot- and bracket-notation for referencing nested properties.\n         * ‘[]’ and ‘.’ in property names can be escaped using double backslashes.Asserts that ‘haystack’ includes ‘needle’.\n         * Can be used to assert the inclusion of a subset of properties in an object.\n         * Enables the use of dot- and bracket-notation for referencing nested properties.\n         * ‘[]’ and ‘.’ in property names can be escaped using double backslashes.\n         *\n         * @param haystack\n         * @param needle\n         * @param message   Message to display on error.\n         */\n        notNestedInclude(haystack: any, needle: any, message?: string): void;\n\n        /**\n         * Asserts that ‘haystack’ includes ‘needle’. Can be used to assert the inclusion of a subset of properties in an object while checking for deep equality\n         *\n         * Enables the use of dot- and bracket-notation for referencing nested properties.\n         * ‘[]’ and ‘.’ in property names can be escaped using double backslashes.Asserts that ‘haystack’ includes ‘needle’.\n         * Can be used to assert the inclusion of a subset of properties in an object.\n         * Enables the use of dot- and bracket-notation for referencing nested properties.\n         * ‘[]’ and ‘.’ in property names can be escaped using double backslashes.\n         *\n         * @param haystack\n         * @param needle\n         * @param message   Message to display on error.\n         */\n        deepNestedInclude(haystack: any, needle: any, message?: string): void;\n\n        /**\n         * Asserts that ‘haystack’ does not include ‘needle’. Can be used to assert the absence of a subset of properties in an object while checking for deep equality.\n         *\n         * Enables the use of dot- and bracket-notation for referencing nested properties.\n         * ‘[]’ and ‘.’ in property names can be escaped using double backslashes.Asserts that ‘haystack’ includes ‘needle’.\n         * Can be used to assert the inclusion of a subset of properties in an object.\n         * Enables the use of dot- and bracket-notation for referencing nested properties.\n         * ‘[]’ and ‘.’ in property names can be escaped using double backslashes.\n         *\n         * @param haystack\n         * @param needle\n         * @param message   Message to display on error.\n         */\n        notDeepNestedInclude(haystack: any, needle: any, message?: string): void;\n\n        /**\n         * Asserts that ‘haystack’ includes ‘needle’. Can be used to assert the inclusion of a subset of properties in an object while ignoring inherited properties.\n         *\n         * @param haystack\n         * @param needle\n         * @param message   Message to display on error.\n         */\n        ownInclude(haystack: any, needle: any, message?: string): void;\n\n        /**\n         * Asserts that ‘haystack’ includes ‘needle’. Can be used to assert the absence of a subset of properties in an object while ignoring inherited properties.\n         *\n         * @param haystack\n         * @param needle\n         * @param message   Message to display on error.\n         */\n        notOwnInclude(haystack: any, needle: any, message?: string): void;\n\n        /**\n         * Asserts that ‘haystack’ includes ‘needle’. Can be used to assert the inclusion of a subset of properties in an object while ignoring inherited properties and checking for deep\n         *\n         * @param haystack\n         * @param needle\n         * @param message   Message to display on error.\n         */\n        deepOwnInclude(haystack: any, needle: any, message?: string): void;\n\n        /**\n         * Asserts that ‘haystack’ includes ‘needle’. Can be used to assert the absence of a subset of properties in an object while ignoring inherited properties and checking for deep equality.\n         *\n         * @param haystack\n         * @param needle\n         * @param message   Message to display on error.\n         */\n        notDeepOwnInclude(haystack: any, needle: any, message?: string): void;\n\n        /**\n         * Asserts that value matches the regular expression regexp.\n         *\n         * @param value   Actual value.\n         * @param regexp   Potential match of value.\n         * @param message   Message to display on error.\n         */\n        match(value: string, regexp: RegExp, message?: string): void;\n\n        /**\n         * Asserts that value does not match the regular expression regexp.\n         *\n         * @param value   Actual value.\n         * @param regexp   Potential match of value.\n         * @param message   Message to display on error.\n         */\n        notMatch(expected: any, regexp: RegExp, message?: string): void;\n\n        /**\n         * Asserts that object has a property named by property.\n         *\n         * @type T   Type of object.\n         * @param object   Container object.\n         * @param property   Potential contained property of object.\n         * @param message   Message to display on error.\n         */\n        property<T>(object: T, property: string /* keyof T */, message?: string): void;\n\n        /**\n         * Asserts that object has a property named by property.\n         *\n         * @type T   Type of object.\n         * @param object   Container object.\n         * @param property   Potential contained property of object.\n         * @param message   Message to display on error.\n         */\n        notProperty<T>(object: T, property: string /* keyof T */, message?: string): void;\n\n        /**\n         * Asserts that object has a property named by property, which can be a string\n         * using dot- and bracket-notation for deep reference.\n         *\n         * @type T   Type of object.\n         * @param object   Container object.\n         * @param property   Potential contained property of object.\n         * @param message   Message to display on error.\n         */\n        deepProperty<T>(object: T, property: string, message?: string): void;\n\n        /**\n         * Asserts that object does not have a property named by property, which can be a\n         * string using dot- and bracket-notation for deep reference.\n         *\n         * @type T   Type of object.\n         * @param object   Container object.\n         * @param property   Potential contained property of object.\n         * @param message   Message to display on error.\n         */\n        notDeepProperty<T>(object: T, property: string, message?: string): void;\n\n        /**\n         * Asserts that object has a property named by property with value given by value.\n         *\n         * @type T   Type of object.\n         * @type V   Type of value.\n         * @param object   Container object.\n         * @param property   Potential contained property of object.\n         * @param value   Potential expected property value.\n         * @param message   Message to display on error.\n         */\n        propertyVal<T, V>(object: T, property: string /* keyof T */, value: V, message?: string): void;\n\n        /**\n         * Asserts that object has a property named by property with value given by value.\n         *\n         * @type T   Type of object.\n         * @type V   Type of value.\n         * @param object   Container object.\n         * @param property   Potential contained property of object.\n         * @param value   Potential expected property value.\n         * @param message   Message to display on error.\n         */\n        notPropertyVal<T, V>(object: T, property: string /* keyof T */, value: V, message?: string): void;\n\n        /**\n         * Asserts that object has a property named by property, which can be a string\n         * using dot- and bracket-notation for deep reference.\n         *\n         * @type T   Type of object.\n         * @type V   Type of value.\n         * @param object   Container object.\n         * @param property   Potential contained property of object.\n         * @param value   Potential expected property value.\n         * @param message   Message to display on error.\n         */\n        deepPropertyVal<T, V>(object: T, property: string, value: V, message?: string): void;\n\n        /**\n         * Asserts that object does not have a property named by property, which can be a\n         * string using dot- and bracket-notation for deep reference.\n         *\n         * @type T   Type of object.\n         * @type V   Type of value.\n         * @param object   Container object.\n         * @param property   Potential contained property of object.\n         * @param value   Potential expected property value.\n         * @param message   Message to display on error.\n         */\n        notDeepPropertyVal<T, V>(object: T, property: string, value: V, message?: string): void;\n\n        /**\n         * Asserts that object has a length property with the expected value.\n         *\n         * @type T   Type of object.\n         * @param object   Container object.\n         * @param length   Potential expected length of object.\n         * @param message   Message to display on error.\n         */\n        lengthOf<T extends { readonly length?: number }>(object: T, length: number, message?: string): void;\n\n        /**\n         * Asserts that fn will throw an error.\n         *\n         * @param fn   Function that may throw.\n         * @param message   Message to display on error.\n         */\n        throw(fn: () => void, message?: string): void;\n\n        /**\n         * Asserts that function will throw an error with message matching regexp.\n         *\n         * @param fn   Function that may throw.\n         * @param regExp   Potential expected message match.\n         * @param message   Message to display on error.\n         */\n        throw(fn: () => void, regExp: RegExp): void;\n\n        /**\n         * Asserts that function will throw an error that is an instance of constructor.\n         *\n         * @param fn   Function that may throw.\n         * @param constructor   Potential expected error constructor.\n         * @param message   Message to display on error.\n         */\n        throw(fn: () => void, constructor: ErrorConstructor, message?: string): void;\n\n        /**\n         * Asserts that function will throw an error that is an instance of constructor\n         * and an error with message matching regexp.\n         *\n         * @param fn   Function that may throw.\n         * @param constructor   Potential expected error constructor.\n         * @param message   Message to display on error.\n         */\n        throw(fn: () => void, constructor: ErrorConstructor, regExp: RegExp): void;\n\n        /**\n         * Asserts that fn will throw an error.\n         *\n         * @param fn   Function that may throw.\n         * @param message   Message to display on error.\n         */\n        throws(fn: () => void, message?: string): void;\n\n        /**\n         * Asserts that function will throw an error with message matching regexp.\n         *\n         * @param fn   Function that may throw.\n         * @param errType  Potential expected message match or error constructor.\n         * @param message   Message to display on error.\n         */\n        throws(fn: () => void, errType: RegExp | ErrorConstructor, message?: string): void;\n\n        /**\n         * Asserts that function will throw an error that is an instance of constructor\n         * and an error with message matching regexp.\n         *\n         * @param fn   Function that may throw.\n         * @param constructor   Potential expected error constructor.\n         * @param message   Message to display on error.\n         */\n        throws(fn: () => void, constructor: ErrorConstructor, regExp: RegExp): void;\n\n        /**\n         * Asserts that fn will throw an error.\n         *\n         * @param fn   Function that may throw.\n         * @param message   Message to display on error.\n         */\n        Throw(fn: () => void, message?: string): void;\n\n        /**\n         * Asserts that function will throw an error with message matching regexp.\n         *\n         * @param fn   Function that may throw.\n         * @param regExp   Potential expected message match.\n         * @param message   Message to display on error.\n         */\n        Throw(fn: () => void, regExp: RegExp): void;\n\n        /**\n         * Asserts that function will throw an error that is an instance of constructor.\n         *\n         * @param fn   Function that may throw.\n         * @param constructor   Potential expected error constructor.\n         * @param message   Message to display on error.\n         */\n        Throw(fn: () => void, constructor: ErrorConstructor, message?: string): void;\n\n        /**\n         * Asserts that function will throw an error that is an instance of constructor\n         * and an error with message matching regexp.\n         *\n         * @param fn   Function that may throw.\n         * @param constructor   Potential expected error constructor.\n         * @param message   Message to display on error.\n         */\n        Throw(fn: () => void, constructor: ErrorConstructor, regExp: RegExp): void;\n\n        /**\n         * Asserts that fn will not throw an error.\n         *\n         * @param fn   Function that may throw.\n         * @param message   Message to display on error.\n         */\n        doesNotThrow(fn: () => void, message?: string): void;\n\n        /**\n         * Asserts that function will throw an error with message matching regexp.\n         *\n         * @param fn   Function that may throw.\n         * @param regExp   Potential expected message match.\n         * @param message   Message to display on error.\n         */\n        doesNotThrow(fn: () => void, regExp: RegExp): void;\n\n        /**\n         * Asserts that function will throw an error that is an instance of constructor.\n         *\n         * @param fn   Function that may throw.\n         * @param constructor   Potential expected error constructor.\n         * @param message   Message to display on error.\n         */\n        doesNotThrow(fn: () => void, constructor: ErrorConstructor, message?: string): void;\n\n        /**\n         * Asserts that function will throw an error that is an instance of constructor\n         * and an error with message matching regexp.\n         *\n         * @param fn   Function that may throw.\n         * @param constructor   Potential expected error constructor.\n         * @param message   Message to display on error.\n         */\n        doesNotThrow(fn: () => void, constructor: ErrorConstructor, regExp: RegExp): void;\n\n        /**\n         * Compares two values using operator.\n         *\n         * @param val1   Left value during comparison.\n         * @param operator   Comparison operator.\n         * @param val2   Right value during comparison.\n         * @param message   Message to display on error.\n         */\n        operator(val1: OperatorComparable, operator: Operator, val2: OperatorComparable, message?: string): void;\n\n        /**\n         * Asserts that the target is equal to expected, to within a +/- delta range.\n         *\n         * @param actual   Actual value\n         * @param expected   Potential expected value.\n         * @param delta   Maximum differenced between values.\n         * @param message   Message to display on error.\n         */\n        closeTo(actual: number, expected: number, delta: number, message?: string): void;\n\n        /**\n         * Asserts that the target is equal to expected, to within a +/- delta range.\n         *\n         * @param actual   Actual value\n         * @param expected   Potential expected value.\n         * @param delta   Maximum differenced between values.\n         * @param message   Message to display on error.\n         */\n        approximately(act: number, exp: number, delta: number, message?: string): void;\n\n        /**\n         * Asserts that set1 and set2 have the same members. Order is not take into account.\n         *\n         * @type T   Type of set values.\n         * @param set1   Actual set of values.\n         * @param set2   Potential expected set of values.\n         * @param message   Message to display on error.\n         */\n        sameMembers<T>(set1: T[], set2: T[], message?: string): void;\n\n        /**\n         * Asserts that set1 and set2 have the same members using deep equality checking.\n         * Order is not take into account.\n         *\n         * @type T   Type of set values.\n         * @param set1   Actual set of values.\n         * @param set2   Potential expected set of values.\n         * @param message   Message to display on error.\n         */\n        sameDeepMembers<T>(set1: T[], set2: T[], message?: string): void;\n\n        /**\n         * Asserts that set1 and set2 have the same members in the same order.\n         * Uses a strict equality check (===).\n         *\n         * @type T   Type of set values.\n         * @param set1   Actual set of values.\n         * @param set2   Potential expected set of values.\n         * @param message   Message to display on error.\n         */\n        sameOrderedMembers<T>(set1: T[], set2: T[], message?: string): void;\n\n        /**\n         * Asserts that set1 and set2 don’t have the same members in the same order.\n         * Uses a strict equality check (===).\n         *\n         * @type T   Type of set values.\n         * @param set1   Actual set of values.\n         * @param set2   Potential expected set of values.\n         * @param message   Message to display on error.\n         */\n        notSameOrderedMembers<T>(set1: T[], set2: T[], message?: string): void;\n\n        /**\n         * Asserts that set1 and set2 have the same members in the same order.\n         * Uses a deep equality check.\n         *\n         * @type T   Type of set values.\n         * @param set1   Actual set of values.\n         * @param set2   Potential expected set of values.\n         * @param message   Message to display on error.\n         */\n        sameDeepOrderedMembers<T>(set1: T[], set2: T[], message?: string): void;\n\n        /**\n         * Asserts that set1 and set2 don’t have the same members in the same order.\n         * Uses a deep equality check.\n         *\n         * @type T   Type of set values.\n         * @param set1   Actual set of values.\n         * @param set2   Potential expected set of values.\n         * @param message   Message to display on error.\n         */\n        notSameDeepOrderedMembers<T>(set1: T[], set2: T[], message?: string): void;\n\n        /**\n         * Asserts that subset is included in superset in the same order beginning with the first element in superset.\n         * Uses a strict equality check (===).\n         *\n         * @type T   Type of set values.\n         * @param superset   Actual set of values.\n         * @param subset   Potential contained set of values.\n         * @param message   Message to display on error.\n         */\n        includeOrderedMembers<T>(superset: T[], subset: T[], message?: string): void;\n\n        /**\n         * Asserts that subset isn’t included in superset in the same order beginning with the first element in superset.\n         * Uses a strict equality check (===).\n         *\n         * @type T   Type of set values.\n         * @param superset   Actual set of values.\n         * @param subset   Potential contained set of values.\n         * @param message   Message to display on error.\n         */\n        notIncludeOrderedMembers<T>(superset: T[], subset: T[], message?: string): void;\n\n        /**\n         * Asserts that subset is included in superset in the same order beginning with the first element in superset.\n         * Uses a deep equality check.\n         *\n         * @type T   Type of set values.\n         * @param superset   Actual set of values.\n         * @param subset   Potential contained set of values.\n         * @param message   Message to display on error.\n         */\n        includeDeepOrderedMembers<T>(superset: T[], subset: T[], message?: string): void;\n\n        /**\n         * Asserts that subset isn’t included in superset in the same order beginning with the first element in superset.\n         * Uses a deep equality check.\n         *\n         * @type T   Type of set values.\n         * @param superset   Actual set of values.\n         * @param subset   Potential contained set of values.\n         * @param message   Message to display on error.\n         */\n        notIncludeDeepOrderedMembers<T>(superset: T[], subset: T[], message?: string): void;\n\n        /**\n         * Asserts that subset is included in superset. Order is not take into account.\n         *\n         * @type T   Type of set values.\n         * @param superset   Actual set of values.\n         * @param subset   Potential contained set of values.\n         * @param message   Message to display on error.\n         */\n        includeMembers<T>(superset: T[], subset: T[], message?: string): void;\n\n        /**\n         * Asserts that subset is included in superset using deep equality checking.\n         * Order is not take into account.\n         *\n         * @type T   Type of set values.\n         * @param superset   Actual set of values.\n         * @param subset   Potential contained set of values.\n         * @param message   Message to display on error.\n         */\n        includeDeepMembers<T>(superset: T[], subset: T[], message?: string): void;\n\n        /**\n         * Asserts that non-object, non-array value inList appears in the flat array list.\n         *\n         * @type T   Type of list values.\n         * @param inList   Value expected to be in the list.\n         * @param list   List of values.\n         * @param message   Message to display on error.\n         */\n        oneOf<T>(inList: T, list: T[], message?: string): void;\n\n        /**\n         * Asserts that a function changes the value of a property.\n         *\n         * @type T   Type of object.\n         * @param modifier   Function to run.\n         * @param object   Container object.\n         * @param property   Property of object expected to be modified.\n         * @param message   Message to display on error.\n         */\n        changes<T>(modifier: Function, object: T, property: string /* keyof T */, message?: string): void;\n\n        /**\n         * Asserts that a function does not change the value of a property.\n         *\n         * @type T   Type of object.\n         * @param modifier   Function to run.\n         * @param object   Container object.\n         * @param property   Property of object expected not to be modified.\n         * @param message   Message to display on error.\n         */\n        doesNotChange<T>(modifier: Function, object: T, property: string /* keyof T */, message?: string): void;\n\n        /**\n         * Asserts that a function increases an object property.\n         *\n         * @type T   Type of object.\n         * @param modifier   Function to run.\n         * @param object   Container object.\n         * @param property   Property of object expected to be increased.\n         * @param message   Message to display on error.\n         */\n        increases<T>(modifier: Function, object: T, property: string /* keyof T */, message?: string): void;\n\n        /**\n         * Asserts that a function does not increase an object property.\n         *\n         * @type T   Type of object.\n         * @param modifier   Function to run.\n         * @param object   Container object.\n         * @param property   Property of object expected not to be increased.\n         * @param message   Message to display on error.\n         */\n        doesNotIncrease<T>(modifier: Function, object: T, property: string /* keyof T */, message?: string): void;\n\n        /**\n         * Asserts that a function decreases an object property.\n         *\n         * @type T   Type of object.\n         * @param modifier   Function to run.\n         * @param object   Container object.\n         * @param property   Property of object expected to be decreased.\n         * @param message   Message to display on error.\n         */\n        decreases<T>(modifier: Function, object: T, property: string /* keyof T */, message?: string): void;\n\n        /**\n         * Asserts that a function does not decrease an object property.\n         *\n         * @type T   Type of object.\n         * @param modifier   Function to run.\n         * @param object   Container object.\n         * @param property   Property of object expected not to be decreased.\n         * @param message   Message to display on error.\n         */\n        doesNotDecrease<T>(modifier: Function, object: T, property: string /* keyof T */, message?: string): void;\n\n        /**\n         * Asserts if value is not a false value, and throws if it is a true value.\n         *\n         * @type T   Type of object.\n         * @param object   Actual value.\n         * @param message   Message to display on error.\n         * @remarks This is added to allow for chai to be a drop-in replacement for\n         *          Node’s assert class.\n         */\n        ifError<T>(object: T, message?: string): void;\n\n        /**\n         * Asserts that object is extensible (can have new properties added to it).\n         *\n         * @type T   Type of object\n         * @param object   Actual value.\n         * @param message   Message to display on error.\n         */\n        isExtensible<T>(object: T, message?: string): void;\n\n        /**\n         * Asserts that object is extensible (can have new properties added to it).\n         *\n         * @type T   Type of object\n         * @param object   Actual value.\n         * @param message   Message to display on error.\n         */\n        extensible<T>(object: T, message?: string): void;\n\n        /**\n         * Asserts that object is not extensible.\n         *\n         * @type T   Type of object\n         * @param object   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNotExtensible<T>(object: T, message?: string): void;\n\n        /**\n         * Asserts that object is not extensible.\n         *\n         * @type T   Type of object\n         * @param object   Actual value.\n         * @param message   Message to display on error.\n         */\n        notExtensible<T>(object: T, message?: string): void;\n\n        /**\n         * Asserts that object is sealed (can have new properties added to it\n         * and its existing properties cannot be removed).\n         *\n         * @type T   Type of object\n         * @param object   Actual value.\n         * @param message   Message to display on error.\n         */\n        isSealed<T>(object: T, message?: string): void;\n\n        /**\n         * Asserts that object is sealed (can have new properties added to it\n         * and its existing properties cannot be removed).\n         *\n         * @type T   Type of object\n         * @param object   Actual value.\n         * @param message   Message to display on error.\n         */\n        sealed<T>(object: T, message?: string): void;\n\n        /**\n         * Asserts that object is not sealed.\n         *\n         * @type T   Type of object\n         * @param object   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNotSealed<T>(object: T, message?: string): void;\n\n        /**\n         * Asserts that object is not sealed.\n         *\n         * @type T   Type of object\n         * @param object   Actual value.\n         * @param message   Message to display on error.\n         */\n        notSealed<T>(object: T, message?: string): void;\n\n        /**\n         * Asserts that object is frozen (cannot have new properties added to it\n         * and its existing properties cannot be removed).\n         *\n         * @type T   Type of object\n         * @param object   Actual value.\n         * @param message   Message to display on error.\n         */\n        isFrozen<T>(object: T, message?: string): void;\n\n        /**\n         * Asserts that object is frozen (cannot have new properties added to it\n         * and its existing properties cannot be removed).\n         *\n         * @type T   Type of object\n         * @param object   Actual value.\n         * @param message   Message to display on error.\n         */\n        frozen<T>(object: T, message?: string): void;\n\n        /**\n         * Asserts that object is not frozen (cannot have new properties added to it\n         * and its existing properties cannot be removed).\n         *\n         * @type T   Type of object\n         * @param object   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNotFrozen<T>(object: T, message?: string): void;\n\n        /**\n         * Asserts that object is not frozen (cannot have new properties added to it\n         * and its existing properties cannot be removed).\n         *\n         * @type T   Type of object\n         * @param object   Actual value.\n         * @param message   Message to display on error.\n         */\n        notFrozen<T>(object: T, message?: string): void;\n\n        /**\n         * Asserts that the target does not contain any values. For arrays and\n         * strings, it checks the length property. For Map and Set instances, it\n         * checks the size property. For non-function objects, it gets the count\n         * of own enumerable string keys.\n         *\n         * @type T   Type of object\n         * @param object   Actual value.\n         * @param message   Message to display on error.\n         */\n        isEmpty<T>(object: T, message?: string): void;\n\n        /**\n         * Asserts that the target contains values. For arrays and strings, it checks\n         * the length property. For Map and Set instances, it checks the size property.\n         * For non-function objects, it gets the count of own enumerable string keys.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param message    Message to display on error.\n         */\n        isNotEmpty<T>(object: T, message?: string): void;\n\n        /**\n         * Asserts that `object` has at least one of the `keys` provided.\n         * You can also provide a single object instead of a `keys` array and its keys\n         * will be used as the expected set of keys.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param keys   Keys to check\n         * @param message    Message to display on error.\n         */\n        hasAnyKeys<T>(object: T, keys: Array<Object | string> | { [key: string]: any }, message?: string): void;\n\n        /**\n         * Asserts that `object` has all and only all of the `keys` provided.\n         * You can also provide a single object instead of a `keys` array and its keys\n         * will be used as the expected set of keys.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param keys   Keys to check\n         * @param message    Message to display on error.\n         */\n        hasAllKeys<T>(object: T, keys: Array<Object | string> | { [key: string]: any }, message?: string): void;\n\n        /**\n         * Asserts that `object` has all of the `keys` provided but may have more keys not listed.\n         * You can also provide a single object instead of a `keys` array and its keys\n         * will be used as the expected set of keys.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param keys   Keys to check\n         * @param message    Message to display on error.\n         */\n        containsAllKeys<T>(object: T, keys: Array<Object | string> | { [key: string]: any }, message?: string): void;\n\n        /**\n         * Asserts that `object` has none of the `keys` provided.\n         * You can also provide a single object instead of a `keys` array and its keys\n         * will be used as the expected set of keys.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param keys   Keys to check\n         * @param message    Message to display on error.\n         */\n        doesNotHaveAnyKeys<T>(object: T, keys: Array<Object | string> | { [key: string]: any }, message?: string): void;\n\n        /**\n         * Asserts that `object` does not have at least one of the `keys` provided.\n         * You can also provide a single object instead of a `keys` array and its keys\n         * will be used as the expected set of keys.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param keys   Keys to check\n         * @param message    Message to display on error.\n         */\n        doesNotHaveAllKeys<T>(object: T, keys: Array<Object | string> | { [key: string]: any }, message?: string): void;\n\n        /**\n         * Asserts that `object` has at least one of the `keys` provided.\n         * Since Sets and Maps can have objects as keys you can use this assertion to perform\n         * a deep comparison.\n         * You can also provide a single object instead of a `keys` array and its keys\n         * will be used as the expected set of keys.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param keys   Keys to check\n         * @param message    Message to display on error.\n         */\n        hasAnyDeepKeys<T>(object: T, keys: Array<Object | string> | { [key: string]: any }, message?: string): void;\n\n        /**\n         * Asserts that `object` has all and only all of the `keys` provided.\n         * Since Sets and Maps can have objects as keys you can use this assertion to perform\n         * a deep comparison.\n         * You can also provide a single object instead of a `keys` array and its keys\n         * will be used as the expected set of keys.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param keys   Keys to check\n         * @param message    Message to display on error.\n         */\n        hasAllDeepKeys<T>(object: T, keys: Array<Object | string> | { [key: string]: any }, message?: string): void;\n\n        /**\n         * Asserts that `object` contains all of the `keys` provided.\n         * Since Sets and Maps can have objects as keys you can use this assertion to perform\n         * a deep comparison.\n         * You can also provide a single object instead of a `keys` array and its keys\n         * will be used as the expected set of keys.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param keys   Keys to check\n         * @param message    Message to display on error.\n         */\n        containsAllDeepKeys<T>(object: T, keys: Array<Object | string> | { [key: string]: any }, message?: string): void;\n\n        /**\n         * Asserts that `object` contains all of the `keys` provided.\n         * Since Sets and Maps can have objects as keys you can use this assertion to perform\n         * a deep comparison.\n         * You can also provide a single object instead of a `keys` array and its keys\n         * will be used as the expected set of keys.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param keys   Keys to check\n         * @param message    Message to display on error.\n         */\n        doesNotHaveAnyDeepKeys<T>(object: T, keys: Array<Object | string> | { [key: string]: any }, message?: string): void;\n\n        /**\n         * Asserts that `object` contains all of the `keys` provided.\n         * Since Sets and Maps can have objects as keys you can use this assertion to perform\n         * a deep comparison.\n         * You can also provide a single object instead of a `keys` array and its keys\n         * will be used as the expected set of keys.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param keys   Keys to check\n         * @param message    Message to display on error.\n         */\n        doesNotHaveAllDeepKeys<T>(object: T, keys: Array<Object | string> | { [key: string]: any }, message?: string): void;\n\n        /**\n         * Asserts that object has a direct or inherited property named by property,\n         * which can be a string using dot- and bracket-notation for nested reference.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param property    Property to test.\n         * @param message    Message to display on error.\n         */\n        nestedProperty<T>(object: T, property: string, message?: string): void;\n\n        /**\n         * Asserts that object does not have a property named by property,\n         * which can be a string using dot- and bracket-notation for nested reference.\n         * The property cannot exist on the object nor anywhere in its prototype chain.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param property    Property to test.\n         * @param message    Message to display on error.\n         */\n        notNestedProperty<T>(object: T, property: string, message?: string): void;\n\n        /**\n         * Asserts that object has a property named by property with value given by value.\n         * property can use dot- and bracket-notation for nested reference. Uses a strict equality check (===).\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param property    Property to test.\n         * @param value    Value to test.\n         * @param message    Message to display on error.\n         */\n        nestedPropertyVal<T>(object: T, property: string, value: any, message?: string): void;\n\n        /**\n         * Asserts that object does not have a property named by property with value given by value.\n         * property can use dot- and bracket-notation for nested reference. Uses a strict equality check (===).\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param property    Property to test.\n         * @param value    Value to test.\n         * @param message    Message to display on error.\n         */\n        notNestedPropertyVal<T>(object: T, property: string, value: any, message?: string): void;\n\n        /**\n         * Asserts that object has a property named by property with a value given by value.\n         * property can use dot- and bracket-notation for nested reference. Uses a deep equality check.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param property    Property to test.\n         * @param value    Value to test.\n         * @param message    Message to display on error.\n         */\n        deepNestedPropertyVal<T>(object: T, property: string, value: any, message?: string): void;\n\n        /**\n         * Asserts that object does not have a property named by property with value given by value.\n         * property can use dot- and bracket-notation for nested reference. Uses a deep equality check.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param property    Property to test.\n         * @param value    Value to test.\n         * @param message    Message to display on error.\n         */\n        notDeepNestedPropertyVal<T>(object: T, property: string, value: any, message?: string): void;\n    }\n\n    export interface Config {\n        /**\n         * Default: false\n         */\n        includeStack: boolean;\n\n        /**\n         * Default: true\n         */\n        showDiff: boolean;\n\n        /**\n         * Default: 40\n         */\n        truncateThreshold: number;\n\n        /**\n         * Default: true\n         */\n        useProxy: boolean;\n\n        /**\n         * Default: ['then', 'catch', 'inspect', 'toJSON']\n         */\n        proxyExcludedKeys: string[];\n    }\n\n    export class AssertionError {\n        constructor(message: string, _props?: any, ssf?: Function);\n        name: string;\n        message: string;\n        showDiff: boolean;\n        stack: string;\n    }\n}\n\ndeclare const chai: Chai.ChaiStatic;\n\ndeclare module \"chai\" {\n    export = chai;\n}\n\ninterface Object {\n    should: Chai.Assertion;\n}\n"},"./node_modules/raw-loader/dist/cjs.js!./node_modules/@types/node/assert.d.ts":function(e,n,t){"use strict";t.r(n),n.default="/**\n * The `assert` module provides a set of assertion functions for verifying\n * invariants.\n * @see [source](https://github.com/nodejs/node/blob/v16.9.0/lib/assert.js)\n */\ndeclare module 'assert' {\n    /**\n     * An alias of {@link ok}.\n     * @since v0.5.9\n     * @param value The input that is checked for being truthy.\n     */\n    function assert(value: unknown, message?: string | Error): asserts value;\n    namespace assert {\n        /**\n         * Indicates the failure of an assertion. All errors thrown by the `assert` module\n         * will be instances of the `AssertionError` class.\n         */\n        class AssertionError extends Error {\n            actual: unknown;\n            expected: unknown;\n            operator: string;\n            generatedMessage: boolean;\n            code: 'ERR_ASSERTION';\n            constructor(options?: {\n                /** If provided, the error message is set to this value. */\n                message?: string | undefined;\n                /** The `actual` property on the error instance. */\n                actual?: unknown | undefined;\n                /** The `expected` property on the error instance. */\n                expected?: unknown | undefined;\n                /** The `operator` property on the error instance. */\n                operator?: string | undefined;\n                /** If provided, the generated stack trace omits frames before this function. */\n                // tslint:disable-next-line:ban-types\n                stackStartFn?: Function | undefined;\n            });\n        }\n        /**\n         * This feature is currently experimental and behavior might still change.\n         * @since v14.2.0, v12.19.0\n         * @experimental\n         */\n        class CallTracker {\n            /**\n             * The wrapper function is expected to be called exactly `exact` times. If the\n             * function has not been called exactly `exact` times when `tracker.verify()` is called, then `tracker.verify()` will throw an\n             * error.\n             *\n             * ```js\n             * import assert from 'assert';\n             *\n             * // Creates call tracker.\n             * const tracker = new assert.CallTracker();\n             *\n             * function func() {}\n             *\n             * // Returns a function that wraps func() that must be called exact times\n             * // before tracker.verify().\n             * const callsfunc = tracker.calls(func);\n             * ```\n             * @since v14.2.0, v12.19.0\n             * @param [fn='A no-op function']\n             * @param [exact=1]\n             * @return that wraps `fn`.\n             */\n            calls(exact?: number): () => void;\n            calls<Func extends (...args: any[]) => any>(fn?: Func, exact?: number): Func;\n            /**\n             * The arrays contains information about the expected and actual number of calls of\n             * the functions that have not been called the expected number of times.\n             *\n             * ```js\n             * import assert from 'assert';\n             *\n             * // Creates call tracker.\n             * const tracker = new assert.CallTracker();\n             *\n             * function func() {}\n             *\n             * function foo() {}\n             *\n             * // Returns a function that wraps func() that must be called exact times\n             * // before tracker.verify().\n             * const callsfunc = tracker.calls(func, 2);\n             *\n             * // Returns an array containing information on callsfunc()\n             * tracker.report();\n             * // [\n             * //  {\n             * //    message: 'Expected the func function to be executed 2 time(s) but was\n             * //    executed 0 time(s).',\n             * //    actual: 0,\n             * //    expected: 2,\n             * //    operator: 'func',\n             * //    stack: stack trace\n             * //  }\n             * // ]\n             * ```\n             * @since v14.2.0, v12.19.0\n             * @return of objects containing information about the wrapper functions returned by `calls`.\n             */\n            report(): CallTrackerReportInformation[];\n            /**\n             * Iterates through the list of functions passed to `tracker.calls()` and will throw an error for functions that\n             * have not been called the expected number of times.\n             *\n             * ```js\n             * import assert from 'assert';\n             *\n             * // Creates call tracker.\n             * const tracker = new assert.CallTracker();\n             *\n             * function func() {}\n             *\n             * // Returns a function that wraps func() that must be called exact times\n             * // before tracker.verify().\n             * const callsfunc = tracker.calls(func, 2);\n             *\n             * callsfunc();\n             *\n             * // Will throw an error since callsfunc() was only called once.\n             * tracker.verify();\n             * ```\n             * @since v14.2.0, v12.19.0\n             */\n            verify(): void;\n        }\n        interface CallTrackerReportInformation {\n            message: string;\n            /** The actual number of times the function was called. */\n            actual: number;\n            /** The number of times the function was expected to be called. */\n            expected: number;\n            /** The name of the function that is wrapped. */\n            operator: string;\n            /** A stack trace of the function. */\n            stack: object;\n        }\n        type AssertPredicate = RegExp | (new () => object) | ((thrown: unknown) => boolean) | object | Error;\n        /**\n         * Throws an `AssertionError` with the provided error message or a default\n         * error message. If the `message` parameter is an instance of an `Error` then\n         * it will be thrown instead of the `AssertionError`.\n         *\n         * ```js\n         * import assert from 'assert/strict';\n         *\n         * assert.fail();\n         * // AssertionError [ERR_ASSERTION]: Failed\n         *\n         * assert.fail('boom');\n         * // AssertionError [ERR_ASSERTION]: boom\n         *\n         * assert.fail(new TypeError('need array'));\n         * // TypeError: need array\n         * ```\n         *\n         * Using `assert.fail()` with more than two arguments is possible but deprecated.\n         * See below for further details.\n         * @since v0.1.21\n         * @param [message='Failed']\n         */\n        function fail(message?: string | Error): never;\n        /** @deprecated since v10.0.0 - use fail([message]) or other assert functions instead. */\n        function fail(\n            actual: unknown,\n            expected: unknown,\n            message?: string | Error,\n            operator?: string,\n            // tslint:disable-next-line:ban-types\n            stackStartFn?: Function\n        ): never;\n        /**\n         * Tests if `value` is truthy. It is equivalent to`assert.equal(!!value, true, message)`.\n         *\n         * If `value` is not truthy, an `AssertionError` is thrown with a `message`property set equal to the value of the `message` parameter. If the `message`parameter is `undefined`, a default\n         * error message is assigned. If the `message`parameter is an instance of an `Error` then it will be thrown instead of the`AssertionError`.\n         * If no arguments are passed in at all `message` will be set to the string:`` 'No value argument passed to `assert.ok()`' ``.\n         *\n         * Be aware that in the `repl` the error message will be different to the one\n         * thrown in a file! See below for further details.\n         *\n         * ```js\n         * import assert from 'assert/strict';\n         *\n         * assert.ok(true);\n         * // OK\n         * assert.ok(1);\n         * // OK\n         *\n         * assert.ok();\n         * // AssertionError: No value argument passed to `assert.ok()`\n         *\n         * assert.ok(false, 'it\\'s false');\n         * // AssertionError: it's false\n         *\n         * // In the repl:\n         * assert.ok(typeof 123 === 'string');\n         * // AssertionError: false == true\n         *\n         * // In a file (e.g. test.js):\n         * assert.ok(typeof 123 === 'string');\n         * // AssertionError: The expression evaluated to a falsy value:\n         * //\n         * //   assert.ok(typeof 123 === 'string')\n         *\n         * assert.ok(false);\n         * // AssertionError: The expression evaluated to a falsy value:\n         * //\n         * //   assert.ok(false)\n         *\n         * assert.ok(0);\n         * // AssertionError: The expression evaluated to a falsy value:\n         * //\n         * //   assert.ok(0)\n         * ```\n         *\n         * ```js\n         * import assert from 'assert/strict';\n         *\n         * // Using `assert()` works the same:\n         * assert(0);\n         * // AssertionError: The expression evaluated to a falsy value:\n         * //\n         * //   assert(0)\n         * ```\n         * @since v0.1.21\n         */\n        function ok(value: unknown, message?: string | Error): asserts value;\n        /**\n         * **Strict assertion mode**\n         *\n         * An alias of {@link strictEqual}.\n         *\n         * **Legacy assertion mode**\n         *\n         * > Stability: 3 - Legacy: Use {@link strictEqual} instead.\n         *\n         * Tests shallow, coercive equality between the `actual` and `expected` parameters\n         * using the [Abstract Equality Comparison](https://tc39.github.io/ecma262/#sec-abstract-equality-comparison) ( `==` ). `NaN` is special handled\n         * and treated as being identical in case both sides are `NaN`.\n         *\n         * ```js\n         * import assert from 'assert';\n         *\n         * assert.equal(1, 1);\n         * // OK, 1 == 1\n         * assert.equal(1, '1');\n         * // OK, 1 == '1'\n         * assert.equal(NaN, NaN);\n         * // OK\n         *\n         * assert.equal(1, 2);\n         * // AssertionError: 1 == 2\n         * assert.equal({ a: { b: 1 } }, { a: { b: 1 } });\n         * // AssertionError: { a: { b: 1 } } == { a: { b: 1 } }\n         * ```\n         *\n         * If the values are not equal, an `AssertionError` is thrown with a `message`property set equal to the value of the `message` parameter. If the `message`parameter is undefined, a default\n         * error message is assigned. If the `message`parameter is an instance of an `Error` then it will be thrown instead of the`AssertionError`.\n         * @since v0.1.21\n         */\n        function equal(actual: unknown, expected: unknown, message?: string | Error): void;\n        /**\n         * **Strict assertion mode**\n         *\n         * An alias of {@link notStrictEqual}.\n         *\n         * **Legacy assertion mode**\n         *\n         * > Stability: 3 - Legacy: Use {@link notStrictEqual} instead.\n         *\n         * Tests shallow, coercive inequality with the [Abstract Equality Comparison](https://tc39.github.io/ecma262/#sec-abstract-equality-comparison)(`!=` ). `NaN` is special handled and treated as\n         * being identical in case both\n         * sides are `NaN`.\n         *\n         * ```js\n         * import assert from 'assert';\n         *\n         * assert.notEqual(1, 2);\n         * // OK\n         *\n         * assert.notEqual(1, 1);\n         * // AssertionError: 1 != 1\n         *\n         * assert.notEqual(1, '1');\n         * // AssertionError: 1 != '1'\n         * ```\n         *\n         * If the values are equal, an `AssertionError` is thrown with a `message`property set equal to the value of the `message` parameter. If the `message`parameter is undefined, a default error\n         * message is assigned. If the `message`parameter is an instance of an `Error` then it will be thrown instead of the`AssertionError`.\n         * @since v0.1.21\n         */\n        function notEqual(actual: unknown, expected: unknown, message?: string | Error): void;\n        /**\n         * **Strict assertion mode**\n         *\n         * An alias of {@link deepStrictEqual}.\n         *\n         * **Legacy assertion mode**\n         *\n         * > Stability: 3 - Legacy: Use {@link deepStrictEqual} instead.\n         *\n         * Tests for deep equality between the `actual` and `expected` parameters. Consider\n         * using {@link deepStrictEqual} instead. {@link deepEqual} can have\n         * surprising results.\n         *\n         * _Deep equality_ means that the enumerable \"own\" properties of child objects\n         * are also recursively evaluated by the following rules.\n         * @since v0.1.21\n         */\n        function deepEqual(actual: unknown, expected: unknown, message?: string | Error): void;\n        /**\n         * **Strict assertion mode**\n         *\n         * An alias of {@link notDeepStrictEqual}.\n         *\n         * **Legacy assertion mode**\n         *\n         * > Stability: 3 - Legacy: Use {@link notDeepStrictEqual} instead.\n         *\n         * Tests for any deep inequality. Opposite of {@link deepEqual}.\n         *\n         * ```js\n         * import assert from 'assert';\n         *\n         * const obj1 = {\n         *   a: {\n         *     b: 1\n         *   }\n         * };\n         * const obj2 = {\n         *   a: {\n         *     b: 2\n         *   }\n         * };\n         * const obj3 = {\n         *   a: {\n         *     b: 1\n         *   }\n         * };\n         * const obj4 = Object.create(obj1);\n         *\n         * assert.notDeepEqual(obj1, obj1);\n         * // AssertionError: { a: { b: 1 } } notDeepEqual { a: { b: 1 } }\n         *\n         * assert.notDeepEqual(obj1, obj2);\n         * // OK\n         *\n         * assert.notDeepEqual(obj1, obj3);\n         * // AssertionError: { a: { b: 1 } } notDeepEqual { a: { b: 1 } }\n         *\n         * assert.notDeepEqual(obj1, obj4);\n         * // OK\n         * ```\n         *\n         * If the values are deeply equal, an `AssertionError` is thrown with a`message` property set equal to the value of the `message` parameter. If the`message` parameter is undefined, a default\n         * error message is assigned. If the`message` parameter is an instance of an `Error` then it will be thrown\n         * instead of the `AssertionError`.\n         * @since v0.1.21\n         */\n        function notDeepEqual(actual: unknown, expected: unknown, message?: string | Error): void;\n        /**\n         * Tests strict equality between the `actual` and `expected` parameters as\n         * determined by the [SameValue Comparison](https://tc39.github.io/ecma262/#sec-samevalue).\n         *\n         * ```js\n         * import assert from 'assert/strict';\n         *\n         * assert.strictEqual(1, 2);\n         * // AssertionError [ERR_ASSERTION]: Expected inputs to be strictly equal:\n         * //\n         * // 1 !== 2\n         *\n         * assert.strictEqual(1, 1);\n         * // OK\n         *\n         * assert.strictEqual('Hello foobar', 'Hello World!');\n         * // AssertionError [ERR_ASSERTION]: Expected inputs to be strictly equal:\n         * // + actual - expected\n         * //\n         * // + 'Hello foobar'\n         * // - 'Hello World!'\n         * //          ^\n         *\n         * const apples = 1;\n         * const oranges = 2;\n         * assert.strictEqual(apples, oranges, `apples ${apples} !== oranges ${oranges}`);\n         * // AssertionError [ERR_ASSERTION]: apples 1 !== oranges 2\n         *\n         * assert.strictEqual(1, '1', new TypeError('Inputs are not identical'));\n         * // TypeError: Inputs are not identical\n         * ```\n         *\n         * If the values are not strictly equal, an `AssertionError` is thrown with a`message` property set equal to the value of the `message` parameter. If the`message` parameter is undefined, a\n         * default error message is assigned. If the`message` parameter is an instance of an `Error` then it will be thrown\n         * instead of the `AssertionError`.\n         * @since v0.1.21\n         */\n        function strictEqual<T>(actual: unknown, expected: T, message?: string | Error): asserts actual is T;\n        /**\n         * Tests strict inequality between the `actual` and `expected` parameters as\n         * determined by the [SameValue Comparison](https://tc39.github.io/ecma262/#sec-samevalue).\n         *\n         * ```js\n         * import assert from 'assert/strict';\n         *\n         * assert.notStrictEqual(1, 2);\n         * // OK\n         *\n         * assert.notStrictEqual(1, 1);\n         * // AssertionError [ERR_ASSERTION]: Expected \"actual\" to be strictly unequal to:\n         * //\n         * // 1\n         *\n         * assert.notStrictEqual(1, '1');\n         * // OK\n         * ```\n         *\n         * If the values are strictly equal, an `AssertionError` is thrown with a`message` property set equal to the value of the `message` parameter. If the`message` parameter is undefined, a\n         * default error message is assigned. If the`message` parameter is an instance of an `Error` then it will be thrown\n         * instead of the `AssertionError`.\n         * @since v0.1.21\n         */\n        function notStrictEqual(actual: unknown, expected: unknown, message?: string | Error): void;\n        /**\n         * Tests for deep equality between the `actual` and `expected` parameters.\n         * \"Deep\" equality means that the enumerable \"own\" properties of child objects\n         * are recursively evaluated also by the following rules.\n         * @since v1.2.0\n         */\n        function deepStrictEqual<T>(actual: unknown, expected: T, message?: string | Error): asserts actual is T;\n        /**\n         * Tests for deep strict inequality. Opposite of {@link deepStrictEqual}.\n         *\n         * ```js\n         * import assert from 'assert/strict';\n         *\n         * assert.notDeepStrictEqual({ a: 1 }, { a: '1' });\n         * // OK\n         * ```\n         *\n         * If the values are deeply and strictly equal, an `AssertionError` is thrown\n         * with a `message` property set equal to the value of the `message` parameter. If\n         * the `message` parameter is undefined, a default error message is assigned. If\n         * the `message` parameter is an instance of an `Error` then it will be thrown\n         * instead of the `AssertionError`.\n         * @since v1.2.0\n         */\n        function notDeepStrictEqual(actual: unknown, expected: unknown, message?: string | Error): void;\n        /**\n         * Expects the function `fn` to throw an error.\n         *\n         * If specified, `error` can be a [`Class`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes),\n         * [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions), a validation function,\n         * a validation object where each property will be tested for strict deep equality,\n         * or an instance of error where each property will be tested for strict deep\n         * equality including the non-enumerable `message` and `name` properties. When\n         * using an object, it is also possible to use a regular expression, when\n         * validating against a string property. See below for examples.\n         *\n         * If specified, `message` will be appended to the message provided by the`AssertionError` if the `fn` call fails to throw or in case the error validation\n         * fails.\n         *\n         * Custom validation object/error instance:\n         *\n         * ```js\n         * import assert from 'assert/strict';\n         *\n         * const err = new TypeError('Wrong value');\n         * err.code = 404;\n         * err.foo = 'bar';\n         * err.info = {\n         *   nested: true,\n         *   baz: 'text'\n         * };\n         * err.reg = /abc/i;\n         *\n         * assert.throws(\n         *   () => {\n         *     throw err;\n         *   },\n         *   {\n         *     name: 'TypeError',\n         *     message: 'Wrong value',\n         *     info: {\n         *       nested: true,\n         *       baz: 'text'\n         *     }\n         *     // Only properties on the validation object will be tested for.\n         *     // Using nested objects requires all properties to be present. Otherwise\n         *     // the validation is going to fail.\n         *   }\n         * );\n         *\n         * // Using regular expressions to validate error properties:\n         * throws(\n         *   () => {\n         *     throw err;\n         *   },\n         *   {\n         *     // The `name` and `message` properties are strings and using regular\n         *     // expressions on those will match against the string. If they fail, an\n         *     // error is thrown.\n         *     name: /^TypeError$/,\n         *     message: /Wrong/,\n         *     foo: 'bar',\n         *     info: {\n         *       nested: true,\n         *       // It is not possible to use regular expressions for nested properties!\n         *       baz: 'text'\n         *     },\n         *     // The `reg` property contains a regular expression and only if the\n         *     // validation object contains an identical regular expression, it is going\n         *     // to pass.\n         *     reg: /abc/i\n         *   }\n         * );\n         *\n         * // Fails due to the different `message` and `name` properties:\n         * throws(\n         *   () => {\n         *     const otherErr = new Error('Not found');\n         *     // Copy all enumerable properties from `err` to `otherErr`.\n         *     for (const [key, value] of Object.entries(err)) {\n         *       otherErr[key] = value;\n         *     }\n         *     throw otherErr;\n         *   },\n         *   // The error's `message` and `name` properties will also be checked when using\n         *   // an error as validation object.\n         *   err\n         * );\n         * ```\n         *\n         * Validate instanceof using constructor:\n         *\n         * ```js\n         * import assert from 'assert/strict';\n         *\n         * assert.throws(\n         *   () => {\n         *     throw new Error('Wrong value');\n         *   },\n         *   Error\n         * );\n         * ```\n         *\n         * Validate error message using [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions):\n         *\n         * Using a regular expression runs `.toString` on the error object, and will\n         * therefore also include the error name.\n         *\n         * ```js\n         * import assert from 'assert/strict';\n         *\n         * assert.throws(\n         *   () => {\n         *     throw new Error('Wrong value');\n         *   },\n         *   /^Error: Wrong value$/\n         * );\n         * ```\n         *\n         * Custom error validation:\n         *\n         * The function must return `true` to indicate all internal validations passed.\n         * It will otherwise fail with an `AssertionError`.\n         *\n         * ```js\n         * import assert from 'assert/strict';\n         *\n         * assert.throws(\n         *   () => {\n         *     throw new Error('Wrong value');\n         *   },\n         *   (err) => {\n         *     assert(err instanceof Error);\n         *     assert(/value/.test(err));\n         *     // Avoid returning anything from validation functions besides `true`.\n         *     // Otherwise, it's not clear what part of the validation failed. Instead,\n         *     // throw an error about the specific validation that failed (as done in this\n         *     // example) and add as much helpful debugging information to that error as\n         *     // possible.\n         *     return true;\n         *   },\n         *   'unexpected error'\n         * );\n         * ```\n         *\n         * `error` cannot be a string. If a string is provided as the second\n         * argument, then `error` is assumed to be omitted and the string will be used for`message` instead. This can lead to easy-to-miss mistakes. Using the same\n         * message as the thrown error message is going to result in an`ERR_AMBIGUOUS_ARGUMENT` error. Please read the example below carefully if using\n         * a string as the second argument gets considered:\n         *\n         * ```js\n         * import assert from 'assert/strict';\n         *\n         * function throwingFirst() {\n         *   throw new Error('First');\n         * }\n         *\n         * function throwingSecond() {\n         *   throw new Error('Second');\n         * }\n         *\n         * function notThrowing() {}\n         *\n         * // The second argument is a string and the input function threw an Error.\n         * // The first case will not throw as it does not match for the error message\n         * // thrown by the input function!\n         * assert.throws(throwingFirst, 'Second');\n         * // In the next example the message has no benefit over the message from the\n         * // error and since it is not clear if the user intended to actually match\n         * // against the error message, Node.js throws an `ERR_AMBIGUOUS_ARGUMENT` error.\n         * assert.throws(throwingSecond, 'Second');\n         * // TypeError [ERR_AMBIGUOUS_ARGUMENT]\n         *\n         * // The string is only used (as message) in case the function does not throw:\n         * assert.throws(notThrowing, 'Second');\n         * // AssertionError [ERR_ASSERTION]: Missing expected exception: Second\n         *\n         * // If it was intended to match for the error message do this instead:\n         * // It does not throw because the error messages match.\n         * assert.throws(throwingSecond, /Second$/);\n         *\n         * // If the error message does not match, an AssertionError is thrown.\n         * assert.throws(throwingFirst, /Second$/);\n         * // AssertionError [ERR_ASSERTION]\n         * ```\n         *\n         * Due to the confusing error-prone notation, avoid a string as the second\n         * argument.\n         * @since v0.1.21\n         */\n        function throws(block: () => unknown, message?: string | Error): void;\n        function throws(block: () => unknown, error: AssertPredicate, message?: string | Error): void;\n        /**\n         * Asserts that the function `fn` does not throw an error.\n         *\n         * Using `assert.doesNotThrow()` is actually not useful because there\n         * is no benefit in catching an error and then rethrowing it. Instead, consider\n         * adding a comment next to the specific code path that should not throw and keep\n         * error messages as expressive as possible.\n         *\n         * When `assert.doesNotThrow()` is called, it will immediately call the `fn`function.\n         *\n         * If an error is thrown and it is the same type as that specified by the `error`parameter, then an `AssertionError` is thrown. If the error is of a\n         * different type, or if the `error` parameter is undefined, the error is\n         * propagated back to the caller.\n         *\n         * If specified, `error` can be a [`Class`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes),\n         * [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions) or a validation\n         * function. See {@link throws} for more details.\n         *\n         * The following, for instance, will throw the `TypeError` because there is no\n         * matching error type in the assertion:\n         *\n         * ```js\n         * import assert from 'assert/strict';\n         *\n         * assert.doesNotThrow(\n         *   () => {\n         *     throw new TypeError('Wrong value');\n         *   },\n         *   SyntaxError\n         * );\n         * ```\n         *\n         * However, the following will result in an `AssertionError` with the message\n         * 'Got unwanted exception...':\n         *\n         * ```js\n         * import assert from 'assert/strict';\n         *\n         * assert.doesNotThrow(\n         *   () => {\n         *     throw new TypeError('Wrong value');\n         *   },\n         *   TypeError\n         * );\n         * ```\n         *\n         * If an `AssertionError` is thrown and a value is provided for the `message`parameter, the value of `message` will be appended to the `AssertionError` message:\n         *\n         * ```js\n         * import assert from 'assert/strict';\n         *\n         * assert.doesNotThrow(\n         *   () => {\n         *     throw new TypeError('Wrong value');\n         *   },\n         *   /Wrong value/,\n         *   'Whoops'\n         * );\n         * // Throws: AssertionError: Got unwanted exception: Whoops\n         * ```\n         * @since v0.1.21\n         */\n        function doesNotThrow(block: () => unknown, message?: string | Error): void;\n        function doesNotThrow(block: () => unknown, error: AssertPredicate, message?: string | Error): void;\n        /**\n         * Throws `value` if `value` is not `undefined` or `null`. This is useful when\n         * testing the `error` argument in callbacks. The stack trace contains all frames\n         * from the error passed to `ifError()` including the potential new frames for`ifError()` itself.\n         *\n         * ```js\n         * import assert from 'assert/strict';\n         *\n         * assert.ifError(null);\n         * // OK\n         * assert.ifError(0);\n         * // AssertionError [ERR_ASSERTION]: ifError got unwanted exception: 0\n         * assert.ifError('error');\n         * // AssertionError [ERR_ASSERTION]: ifError got unwanted exception: 'error'\n         * assert.ifError(new Error());\n         * // AssertionError [ERR_ASSERTION]: ifError got unwanted exception: Error\n         *\n         * // Create some random error frames.\n         * let err;\n         * (function errorFrame() {\n         *   err = new Error('test error');\n         * })();\n         *\n         * (function ifErrorFrame() {\n         *   assert.ifError(err);\n         * })();\n         * // AssertionError [ERR_ASSERTION]: ifError got unwanted exception: test error\n         * //     at ifErrorFrame\n         * //     at errorFrame\n         * ```\n         * @since v0.1.97\n         */\n        function ifError(value: unknown): asserts value is null | undefined;\n        /**\n         * Awaits the `asyncFn` promise or, if `asyncFn` is a function, immediately\n         * calls the function and awaits the returned promise to complete. It will then\n         * check that the promise is rejected.\n         *\n         * If `asyncFn` is a function and it throws an error synchronously,`assert.rejects()` will return a rejected `Promise` with that error. If the\n         * function does not return a promise, `assert.rejects()` will return a rejected`Promise` with an `ERR_INVALID_RETURN_VALUE` error. In both cases the error\n         * handler is skipped.\n         *\n         * Besides the async nature to await the completion behaves identically to {@link throws}.\n         *\n         * If specified, `error` can be a [`Class`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes),\n         * [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions), a validation function,\n         * an object where each property will be tested for, or an instance of error where\n         * each property will be tested for including the non-enumerable `message` and`name` properties.\n         *\n         * If specified, `message` will be the message provided by the `AssertionError` if the `asyncFn` fails to reject.\n         *\n         * ```js\n         * import assert from 'assert/strict';\n         *\n         * await assert.rejects(\n         *   async () => {\n         *     throw new TypeError('Wrong value');\n         *   },\n         *   {\n         *     name: 'TypeError',\n         *     message: 'Wrong value'\n         *   }\n         * );\n         * ```\n         *\n         * ```js\n         * import assert from 'assert/strict';\n         *\n         * await assert.rejects(\n         *   async () => {\n         *     throw new TypeError('Wrong value');\n         *   },\n         *   (err) => {\n         *     assert.strictEqual(err.name, 'TypeError');\n         *     assert.strictEqual(err.message, 'Wrong value');\n         *     return true;\n         *   }\n         * );\n         * ```\n         *\n         * ```js\n         * import assert from 'assert/strict';\n         *\n         * assert.rejects(\n         *   Promise.reject(new Error('Wrong value')),\n         *   Error\n         * ).then(() => {\n         *   // ...\n         * });\n         * ```\n         *\n         * `error` cannot be a string. If a string is provided as the second\n         * argument, then `error` is assumed to be omitted and the string will be used for`message` instead. This can lead to easy-to-miss mistakes. Please read the\n         * example in {@link throws} carefully if using a string as the second\n         * argument gets considered.\n         * @since v10.0.0\n         */\n        function rejects(block: (() => Promise<unknown>) | Promise<unknown>, message?: string | Error): Promise<void>;\n        function rejects(block: (() => Promise<unknown>) | Promise<unknown>, error: AssertPredicate, message?: string | Error): Promise<void>;\n        /**\n         * Awaits the `asyncFn` promise or, if `asyncFn` is a function, immediately\n         * calls the function and awaits the returned promise to complete. It will then\n         * check that the promise is not rejected.\n         *\n         * If `asyncFn` is a function and it throws an error synchronously,`assert.doesNotReject()` will return a rejected `Promise` with that error. If\n         * the function does not return a promise, `assert.doesNotReject()` will return a\n         * rejected `Promise` with an `ERR_INVALID_RETURN_VALUE` error. In both cases\n         * the error handler is skipped.\n         *\n         * Using `assert.doesNotReject()` is actually not useful because there is little\n         * benefit in catching a rejection and then rejecting it again. Instead, consider\n         * adding a comment next to the specific code path that should not reject and keep\n         * error messages as expressive as possible.\n         *\n         * If specified, `error` can be a [`Class`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes),\n         * [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions) or a validation\n         * function. See {@link throws} for more details.\n         *\n         * Besides the async nature to await the completion behaves identically to {@link doesNotThrow}.\n         *\n         * ```js\n         * import assert from 'assert/strict';\n         *\n         * await assert.doesNotReject(\n         *   async () => {\n         *     throw new TypeError('Wrong value');\n         *   },\n         *   SyntaxError\n         * );\n         * ```\n         *\n         * ```js\n         * import assert from 'assert/strict';\n         *\n         * assert.doesNotReject(Promise.reject(new TypeError('Wrong value')))\n         *   .then(() => {\n         *     // ...\n         *   });\n         * ```\n         * @since v10.0.0\n         */\n        function doesNotReject(block: (() => Promise<unknown>) | Promise<unknown>, message?: string | Error): Promise<void>;\n        function doesNotReject(block: (() => Promise<unknown>) | Promise<unknown>, error: AssertPredicate, message?: string | Error): Promise<void>;\n        /**\n         * Expects the `string` input to match the regular expression.\n         *\n         * ```js\n         * import assert from 'assert/strict';\n         *\n         * assert.match('I will fail', /pass/);\n         * // AssertionError [ERR_ASSERTION]: The input did not match the regular ...\n         *\n         * assert.match(123, /pass/);\n         * // AssertionError [ERR_ASSERTION]: The \"string\" argument must be of type string.\n         *\n         * assert.match('I will pass', /pass/);\n         * // OK\n         * ```\n         *\n         * If the values do not match, or if the `string` argument is of another type than`string`, an `AssertionError` is thrown with a `message` property set equal\n         * to the value of the `message` parameter. If the `message` parameter is\n         * undefined, a default error message is assigned. If the `message` parameter is an\n         * instance of an `Error` then it will be thrown instead of the `AssertionError`.\n         * @since v13.6.0, v12.16.0\n         */\n        function match(value: string, regExp: RegExp, message?: string | Error): void;\n        /**\n         * Expects the `string` input not to match the regular expression.\n         *\n         * ```js\n         * import assert from 'assert/strict';\n         *\n         * assert.doesNotMatch('I will fail', /fail/);\n         * // AssertionError [ERR_ASSERTION]: The input was expected to not match the ...\n         *\n         * assert.doesNotMatch(123, /pass/);\n         * // AssertionError [ERR_ASSERTION]: The \"string\" argument must be of type string.\n         *\n         * assert.doesNotMatch('I will pass', /different/);\n         * // OK\n         * ```\n         *\n         * If the values do match, or if the `string` argument is of another type than`string`, an `AssertionError` is thrown with a `message` property set equal\n         * to the value of the `message` parameter. If the `message` parameter is\n         * undefined, a default error message is assigned. If the `message` parameter is an\n         * instance of an `Error` then it will be thrown instead of the `AssertionError`.\n         * @since v13.6.0, v12.16.0\n         */\n        function doesNotMatch(value: string, regExp: RegExp, message?: string | Error): void;\n        const strict: Omit<typeof assert, 'equal' | 'notEqual' | 'deepEqual' | 'notDeepEqual' | 'ok' | 'strictEqual' | 'deepStrictEqual' | 'ifError' | 'strict'> & {\n            (value: unknown, message?: string | Error): asserts value;\n            equal: typeof strictEqual;\n            notEqual: typeof notStrictEqual;\n            deepEqual: typeof deepStrictEqual;\n            notDeepEqual: typeof notDeepStrictEqual;\n            // Mapped types and assertion functions are incompatible?\n            // TS2775: Assertions require every name in the call target\n            // to be declared with an explicit type annotation.\n            ok: typeof ok;\n            strictEqual: typeof strictEqual;\n            deepStrictEqual: typeof deepStrictEqual;\n            ifError: typeof ifError;\n            strict: typeof strict;\n        };\n    }\n    export = assert;\n}\ndeclare module 'node:assert' {\n    import assert = require('assert');\n    export = assert;\n}\n"},"./node_modules/raw-loader/dist/cjs.js!./node_modules/@types/node/buffer.d.ts":function(e,n,t){"use strict";t.r(n),n.default="/**\n * `Buffer` objects are used to represent a fixed-length sequence of bytes. Many\n * Node.js APIs support `Buffer`s.\n *\n * The `Buffer` class is a subclass of JavaScript's [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) class and\n * extends it with methods that cover additional use cases. Node.js APIs accept\n * plain [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) s wherever `Buffer`s are supported as well.\n *\n * While the `Buffer` class is available within the global scope, it is still\n * recommended to explicitly reference it via an import or require statement.\n *\n * ```js\n * import { Buffer } from 'buffer';\n *\n * // Creates a zero-filled Buffer of length 10.\n * const buf1 = Buffer.alloc(10);\n *\n * // Creates a Buffer of length 10,\n * // filled with bytes which all have the value `1`.\n * const buf2 = Buffer.alloc(10, 1);\n *\n * // Creates an uninitialized buffer of length 10.\n * // This is faster than calling Buffer.alloc() but the returned\n * // Buffer instance might contain old data that needs to be\n * // overwritten using fill(), write(), or other functions that fill the Buffer's\n * // contents.\n * const buf3 = Buffer.allocUnsafe(10);\n *\n * // Creates a Buffer containing the bytes [1, 2, 3].\n * const buf4 = Buffer.from([1, 2, 3]);\n *\n * // Creates a Buffer containing the bytes [1, 1, 1, 1] – the entries\n * // are all truncated using `(value &#x26; 255)` to fit into the range 0–255.\n * const buf5 = Buffer.from([257, 257.5, -255, '1']);\n *\n * // Creates a Buffer containing the UTF-8-encoded bytes for the string 'tést':\n * // [0x74, 0xc3, 0xa9, 0x73, 0x74] (in hexadecimal notation)\n * // [116, 195, 169, 115, 116] (in decimal notation)\n * const buf6 = Buffer.from('tést');\n *\n * // Creates a Buffer containing the Latin-1 bytes [0x74, 0xe9, 0x73, 0x74].\n * const buf7 = Buffer.from('tést', 'latin1');\n * ```\n * @see [source](https://github.com/nodejs/node/blob/v16.9.0/lib/buffer.js)\n */\ndeclare module 'buffer' {\n    import { BinaryLike } from 'node:crypto';\n    export const INSPECT_MAX_BYTES: number;\n    export const kMaxLength: number;\n    export const kStringMaxLength: number;\n    export const constants: {\n        MAX_LENGTH: number;\n        MAX_STRING_LENGTH: number;\n    };\n    export type TranscodeEncoding = 'ascii' | 'utf8' | 'utf16le' | 'ucs2' | 'latin1' | 'binary';\n    /**\n     * Re-encodes the given `Buffer` or `Uint8Array` instance from one character\n     * encoding to another. Returns a new `Buffer` instance.\n     *\n     * Throws if the `fromEnc` or `toEnc` specify invalid character encodings or if\n     * conversion from `fromEnc` to `toEnc` is not permitted.\n     *\n     * Encodings supported by `buffer.transcode()` are: `'ascii'`, `'utf8'`,`'utf16le'`, `'ucs2'`, `'latin1'`, and `'binary'`.\n     *\n     * The transcoding process will use substitution characters if a given byte\n     * sequence cannot be adequately represented in the target encoding. For instance:\n     *\n     * ```js\n     * import { Buffer, transcode } from 'buffer';\n     *\n     * const newBuf = transcode(Buffer.from('€'), 'utf8', 'ascii');\n     * console.log(newBuf.toString('ascii'));\n     * // Prints: '?'\n     * ```\n     *\n     * Because the Euro (`€`) sign is not representable in US-ASCII, it is replaced\n     * with `?` in the transcoded `Buffer`.\n     * @since v7.1.0\n     * @param source A `Buffer` or `Uint8Array` instance.\n     * @param fromEnc The current encoding.\n     * @param toEnc To target encoding.\n     */\n    export function transcode(source: Uint8Array, fromEnc: TranscodeEncoding, toEnc: TranscodeEncoding): Buffer;\n    export const SlowBuffer: {\n        /** @deprecated since v6.0.0, use `Buffer.allocUnsafeSlow()` */\n        new (size: number): Buffer;\n        prototype: Buffer;\n    };\n    /**\n     * Resolves a `'blob:nodedata:...'` an associated `Blob` object registered using\n     * a prior call to `URL.createObjectURL()`.\n     * @since v16.7.0\n     * @experimental\n     * @param id A `'blob:nodedata:...` URL string returned by a prior call to `URL.createObjectURL()`.\n     */\n    export function resolveObjectURL(id: string): Blob | undefined;\n    export { Buffer };\n    /**\n     * @experimental\n     */\n    export interface BlobOptions {\n        /**\n         * @default 'utf8'\n         */\n        encoding?: BufferEncoding | undefined;\n        /**\n         * The Blob content-type. The intent is for `type` to convey\n         * the MIME media type of the data, however no validation of the type format\n         * is performed.\n         */\n        type?: string | undefined;\n    }\n    /**\n     * A [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob) encapsulates immutable, raw data that can be safely shared across\n     * multiple worker threads.\n     * @since v15.7.0\n     * @experimental\n     */\n    export class Blob {\n        /**\n         * The total size of the `Blob` in bytes.\n         * @since v15.7.0\n         */\n        readonly size: number;\n        /**\n         * The content-type of the `Blob`.\n         * @since v15.7.0\n         */\n        readonly type: string;\n        /**\n         * Creates a new `Blob` object containing a concatenation of the given sources.\n         *\n         * {ArrayBuffer}, {TypedArray}, {DataView}, and {Buffer} sources are copied into\n         * the 'Blob' and can therefore be safely modified after the 'Blob' is created.\n         *\n         * String sources are also copied into the `Blob`.\n         */\n        constructor(sources: Array<BinaryLike | Blob>, options?: BlobOptions);\n        /**\n         * Returns a promise that fulfills with an [ArrayBuffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) containing a copy of\n         * the `Blob` data.\n         * @since v15.7.0\n         */\n        arrayBuffer(): Promise<ArrayBuffer>;\n        /**\n         * Creates and returns a new `Blob` containing a subset of this `Blob` objects\n         * data. The original `Blob` is not altered.\n         * @since v15.7.0\n         * @param start The starting index.\n         * @param end The ending index.\n         * @param type The content-type for the new `Blob`\n         */\n        slice(start?: number, end?: number, type?: string): Blob;\n        /**\n         * Returns a promise that fulfills with the contents of the `Blob` decoded as a\n         * UTF-8 string.\n         * @since v15.7.0\n         */\n        text(): Promise<string>;\n        /**\n         * Returns a new `ReadableStream` that allows the content of the `Blob` to be read.\n         * @since v16.7.0\n         */\n        stream(): unknown; // pending web streams types\n    }\n    export import atob = globalThis.atob;\n    export import btoa = globalThis.btoa;\n    global {\n        // Buffer class\n        type BufferEncoding = 'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'base64url' | 'latin1' | 'binary' | 'hex';\n        type WithImplicitCoercion<T> =\n            | T\n            | {\n                  valueOf(): T;\n              };\n        /**\n         * Raw data is stored in instances of the Buffer class.\n         * A Buffer is similar to an array of integers but corresponds to a raw memory allocation outside the V8 heap.  A Buffer cannot be resized.\n         * Valid string encodings: 'ascii'|'utf8'|'utf16le'|'ucs2'(alias of 'utf16le')|'base64'|'base64url'|'binary'(deprecated)|'hex'\n         */\n        interface BufferConstructor {\n            /**\n             * Allocates a new buffer containing the given {str}.\n             *\n             * @param str String to store in buffer.\n             * @param encoding encoding to use, optional.  Default is 'utf8'\n             * @deprecated since v10.0.0 - Use `Buffer.from(string[, encoding])` instead.\n             */\n            new (str: string, encoding?: BufferEncoding): Buffer;\n            /**\n             * Allocates a new buffer of {size} octets.\n             *\n             * @param size count of octets to allocate.\n             * @deprecated since v10.0.0 - Use `Buffer.alloc()` instead (also see `Buffer.allocUnsafe()`).\n             */\n            new (size: number): Buffer;\n            /**\n             * Allocates a new buffer containing the given {array} of octets.\n             *\n             * @param array The octets to store.\n             * @deprecated since v10.0.0 - Use `Buffer.from(array)` instead.\n             */\n            new (array: Uint8Array): Buffer;\n            /**\n             * Produces a Buffer backed by the same allocated memory as\n             * the given {ArrayBuffer}/{SharedArrayBuffer}.\n             *\n             *\n             * @param arrayBuffer The ArrayBuffer with which to share memory.\n             * @deprecated since v10.0.0 - Use `Buffer.from(arrayBuffer[, byteOffset[, length]])` instead.\n             */\n            new (arrayBuffer: ArrayBuffer | SharedArrayBuffer): Buffer;\n            /**\n             * Allocates a new buffer containing the given {array} of octets.\n             *\n             * @param array The octets to store.\n             * @deprecated since v10.0.0 - Use `Buffer.from(array)` instead.\n             */\n            new (array: ReadonlyArray<any>): Buffer;\n            /**\n             * Copies the passed {buffer} data onto a new {Buffer} instance.\n             *\n             * @param buffer The buffer to copy.\n             * @deprecated since v10.0.0 - Use `Buffer.from(buffer)` instead.\n             */\n            new (buffer: Buffer): Buffer;\n            /**\n             * Allocates a new `Buffer` using an `array` of bytes in the range `0` – `255`.\n             * Array entries outside that range will be truncated to fit into it.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * // Creates a new Buffer containing the UTF-8 bytes of the string 'buffer'.\n             * const buf = Buffer.from([0x62, 0x75, 0x66, 0x66, 0x65, 0x72]);\n             * ```\n             *\n             * A `TypeError` will be thrown if `array` is not an `Array` or another type\n             * appropriate for `Buffer.from()` variants.\n             *\n             * `Buffer.from(array)` and `Buffer.from(string)` may also use the internal`Buffer` pool like `Buffer.allocUnsafe()` does.\n             * @since v5.10.0\n             */\n            from(arrayBuffer: WithImplicitCoercion<ArrayBuffer | SharedArrayBuffer>, byteOffset?: number, length?: number): Buffer;\n            /**\n             * Creates a new Buffer using the passed {data}\n             * @param data data to create a new Buffer\n             */\n            from(data: Uint8Array | ReadonlyArray<number>): Buffer;\n            from(data: WithImplicitCoercion<Uint8Array | ReadonlyArray<number> | string>): Buffer;\n            /**\n             * Creates a new Buffer containing the given JavaScript string {str}.\n             * If provided, the {encoding} parameter identifies the character encoding.\n             * If not provided, {encoding} defaults to 'utf8'.\n             */\n            from(\n                str:\n                    | WithImplicitCoercion<string>\n                    | {\n                          [Symbol.toPrimitive](hint: 'string'): string;\n                      },\n                encoding?: BufferEncoding\n            ): Buffer;\n            /**\n             * Creates a new Buffer using the passed {data}\n             * @param values to create a new Buffer\n             */\n            of(...items: number[]): Buffer;\n            /**\n             * Returns `true` if `obj` is a `Buffer`, `false` otherwise.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * Buffer.isBuffer(Buffer.alloc(10)); // true\n             * Buffer.isBuffer(Buffer.from('foo')); // true\n             * Buffer.isBuffer('a string'); // false\n             * Buffer.isBuffer([]); // false\n             * Buffer.isBuffer(new Uint8Array(1024)); // false\n             * ```\n             * @since v0.1.101\n             */\n            isBuffer(obj: any): obj is Buffer;\n            /**\n             * Returns `true` if `encoding` is the name of a supported character encoding,\n             * or `false` otherwise.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * console.log(Buffer.isEncoding('utf8'));\n             * // Prints: true\n             *\n             * console.log(Buffer.isEncoding('hex'));\n             * // Prints: true\n             *\n             * console.log(Buffer.isEncoding('utf/8'));\n             * // Prints: false\n             *\n             * console.log(Buffer.isEncoding(''));\n             * // Prints: false\n             * ```\n             * @since v0.9.1\n             * @param encoding A character encoding name to check.\n             */\n            isEncoding(encoding: string): encoding is BufferEncoding;\n            /**\n             * Returns the byte length of a string when encoded using `encoding`.\n             * This is not the same as [`String.prototype.length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length), which does not account\n             * for the encoding that is used to convert the string into bytes.\n             *\n             * For `'base64'`, `'base64url'`, and `'hex'`, this function assumes valid input.\n             * For strings that contain non-base64/hex-encoded data (e.g. whitespace), the\n             * return value might be greater than the length of a `Buffer` created from the\n             * string.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const str = '\\u00bd + \\u00bc = \\u00be';\n             *\n             * console.log(`${str}: ${str.length} characters, ` +\n             *             `${Buffer.byteLength(str, 'utf8')} bytes`);\n             * // Prints: ½ + ¼ = ¾: 9 characters, 12 bytes\n             * ```\n             *\n             * When `string` is a\n             * `Buffer`/[`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView)/[`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/-\n             * Reference/Global_Objects/TypedArray)/[`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer)/[`SharedArrayBuffer`](https://develop-\n             * er.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer), the byte length as reported by `.byteLength`is returned.\n             * @since v0.1.90\n             * @param string A value to calculate the length of.\n             * @param [encoding='utf8'] If `string` is a string, this is its encoding.\n             * @return The number of bytes contained within `string`.\n             */\n            byteLength(string: string | NodeJS.ArrayBufferView | ArrayBuffer | SharedArrayBuffer, encoding?: BufferEncoding): number;\n            /**\n             * Returns a new `Buffer` which is the result of concatenating all the `Buffer`instances in the `list` together.\n             *\n             * If the list has no items, or if the `totalLength` is 0, then a new zero-length`Buffer` is returned.\n             *\n             * If `totalLength` is not provided, it is calculated from the `Buffer` instances\n             * in `list` by adding their lengths.\n             *\n             * If `totalLength` is provided, it is coerced to an unsigned integer. If the\n             * combined length of the `Buffer`s in `list` exceeds `totalLength`, the result is\n             * truncated to `totalLength`.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * // Create a single `Buffer` from a list of three `Buffer` instances.\n             *\n             * const buf1 = Buffer.alloc(10);\n             * const buf2 = Buffer.alloc(14);\n             * const buf3 = Buffer.alloc(18);\n             * const totalLength = buf1.length + buf2.length + buf3.length;\n             *\n             * console.log(totalLength);\n             * // Prints: 42\n             *\n             * const bufA = Buffer.concat([buf1, buf2, buf3], totalLength);\n             *\n             * console.log(bufA);\n             * // Prints: <Buffer 00 00 00 00 ...>\n             * console.log(bufA.length);\n             * // Prints: 42\n             * ```\n             *\n             * `Buffer.concat()` may also use the internal `Buffer` pool like `Buffer.allocUnsafe()` does.\n             * @since v0.7.11\n             * @param list List of `Buffer` or {@link Uint8Array} instances to concatenate.\n             * @param totalLength Total length of the `Buffer` instances in `list` when concatenated.\n             */\n            concat(list: ReadonlyArray<Uint8Array>, totalLength?: number): Buffer;\n            /**\n             * Compares `buf1` to `buf2`, typically for the purpose of sorting arrays of`Buffer` instances. This is equivalent to calling `buf1.compare(buf2)`.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf1 = Buffer.from('1234');\n             * const buf2 = Buffer.from('0123');\n             * const arr = [buf1, buf2];\n             *\n             * console.log(arr.sort(Buffer.compare));\n             * // Prints: [ <Buffer 30 31 32 33>, <Buffer 31 32 33 34> ]\n             * // (This result is equal to: [buf2, buf1].)\n             * ```\n             * @since v0.11.13\n             * @return Either `-1`, `0`, or `1`, depending on the result of the comparison. See `compare` for details.\n             */\n            compare(buf1: Uint8Array, buf2: Uint8Array): number;\n            /**\n             * Allocates a new `Buffer` of `size` bytes. If `fill` is `undefined`, the`Buffer` will be zero-filled.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.alloc(5);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer 00 00 00 00 00>\n             * ```\n             *\n             * If `size` is larger than {@link constants.MAX_LENGTH} or smaller than 0, `ERR_INVALID_ARG_VALUE` is thrown.\n             *\n             * If `fill` is specified, the allocated `Buffer` will be initialized by calling `buf.fill(fill)`.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.alloc(5, 'a');\n             *\n             * console.log(buf);\n             * // Prints: <Buffer 61 61 61 61 61>\n             * ```\n             *\n             * If both `fill` and `encoding` are specified, the allocated `Buffer` will be\n             * initialized by calling `buf.fill(fill, encoding)`.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.alloc(11, 'aGVsbG8gd29ybGQ=', 'base64');\n             *\n             * console.log(buf);\n             * // Prints: <Buffer 68 65 6c 6c 6f 20 77 6f 72 6c 64>\n             * ```\n             *\n             * Calling `Buffer.alloc()` can be measurably slower than the alternative `Buffer.allocUnsafe()` but ensures that the newly created `Buffer` instance\n             * contents will never contain sensitive data from previous allocations, including\n             * data that might not have been allocated for `Buffer`s.\n             *\n             * A `TypeError` will be thrown if `size` is not a number.\n             * @since v5.10.0\n             * @param size The desired length of the new `Buffer`.\n             * @param [fill=0] A value to pre-fill the new `Buffer` with.\n             * @param [encoding='utf8'] If `fill` is a string, this is its encoding.\n             */\n            alloc(size: number, fill?: string | Buffer | number, encoding?: BufferEncoding): Buffer;\n            /**\n             * Allocates a new `Buffer` of `size` bytes. If `size` is larger than {@link constants.MAX_LENGTH} or smaller than 0, `ERR_INVALID_ARG_VALUE` is thrown.\n             *\n             * The underlying memory for `Buffer` instances created in this way is _not_\n             * _initialized_. The contents of the newly created `Buffer` are unknown and_may contain sensitive data_. Use `Buffer.alloc()` instead to initialize`Buffer` instances with zeroes.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.allocUnsafe(10);\n             *\n             * console.log(buf);\n             * // Prints (contents may vary): <Buffer a0 8b 28 3f 01 00 00 00 50 32>\n             *\n             * buf.fill(0);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer 00 00 00 00 00 00 00 00 00 00>\n             * ```\n             *\n             * A `TypeError` will be thrown if `size` is not a number.\n             *\n             * The `Buffer` module pre-allocates an internal `Buffer` instance of\n             * size `Buffer.poolSize` that is used as a pool for the fast allocation of new`Buffer` instances created using `Buffer.allocUnsafe()`,`Buffer.from(array)`, `Buffer.concat()`, and the\n             * deprecated`new Buffer(size)` constructor only when `size` is less than or equal\n             * to `Buffer.poolSize >> 1` (floor of `Buffer.poolSize` divided by two).\n             *\n             * Use of this pre-allocated internal memory pool is a key difference between\n             * calling `Buffer.alloc(size, fill)` vs. `Buffer.allocUnsafe(size).fill(fill)`.\n             * Specifically, `Buffer.alloc(size, fill)` will _never_ use the internal `Buffer`pool, while `Buffer.allocUnsafe(size).fill(fill)`_will_ use the internal`Buffer` pool if `size` is less\n             * than or equal to half `Buffer.poolSize`. The\n             * difference is subtle but can be important when an application requires the\n             * additional performance that `Buffer.allocUnsafe()` provides.\n             * @since v5.10.0\n             * @param size The desired length of the new `Buffer`.\n             */\n            allocUnsafe(size: number): Buffer;\n            /**\n             * Allocates a new `Buffer` of `size` bytes. If `size` is larger than {@link constants.MAX_LENGTH} or smaller than 0, `ERR_INVALID_ARG_VALUE` is thrown. A zero-length `Buffer` is created\n             * if `size` is 0.\n             *\n             * The underlying memory for `Buffer` instances created in this way is _not_\n             * _initialized_. The contents of the newly created `Buffer` are unknown and_may contain sensitive data_. Use `buf.fill(0)` to initialize\n             * such `Buffer` instances with zeroes.\n             *\n             * When using `Buffer.allocUnsafe()` to allocate new `Buffer` instances,\n             * allocations under 4 KB are sliced from a single pre-allocated `Buffer`. This\n             * allows applications to avoid the garbage collection overhead of creating many\n             * individually allocated `Buffer` instances. This approach improves both\n             * performance and memory usage by eliminating the need to track and clean up as\n             * many individual `ArrayBuffer` objects.\n             *\n             * However, in the case where a developer may need to retain a small chunk of\n             * memory from a pool for an indeterminate amount of time, it may be appropriate\n             * to create an un-pooled `Buffer` instance using `Buffer.allocUnsafeSlow()` and\n             * then copying out the relevant bits.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * // Need to keep around a few small chunks of memory.\n             * const store = [];\n             *\n             * socket.on('readable', () => {\n             *   let data;\n             *   while (null !== (data = readable.read())) {\n             *     // Allocate for retained data.\n             *     const sb = Buffer.allocUnsafeSlow(10);\n             *\n             *     // Copy the data into the new allocation.\n             *     data.copy(sb, 0, 0, 10);\n             *\n             *     store.push(sb);\n             *   }\n             * });\n             * ```\n             *\n             * A `TypeError` will be thrown if `size` is not a number.\n             * @since v5.12.0\n             * @param size The desired length of the new `Buffer`.\n             */\n            allocUnsafeSlow(size: number): Buffer;\n            /**\n             * This is the size (in bytes) of pre-allocated internal `Buffer` instances used\n             * for pooling. This value may be modified.\n             * @since v0.11.3\n             */\n            poolSize: number;\n        }\n        interface Buffer extends Uint8Array {\n            /**\n             * Writes `string` to `buf` at `offset` according to the character encoding in`encoding`. The `length` parameter is the number of bytes to write. If `buf` did\n             * not contain enough space to fit the entire string, only part of `string` will be\n             * written. However, partially encoded characters will not be written.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.alloc(256);\n             *\n             * const len = buf.write('\\u00bd + \\u00bc = \\u00be', 0);\n             *\n             * console.log(`${len} bytes: ${buf.toString('utf8', 0, len)}`);\n             * // Prints: 12 bytes: ½ + ¼ = ¾\n             *\n             * const buffer = Buffer.alloc(10);\n             *\n             * const length = buffer.write('abcd', 8);\n             *\n             * console.log(`${length} bytes: ${buffer.toString('utf8', 8, 10)}`);\n             * // Prints: 2 bytes : ab\n             * ```\n             * @since v0.1.90\n             * @param string String to write to `buf`.\n             * @param [offset=0] Number of bytes to skip before starting to write `string`.\n             * @param [length=buf.length - offset] Maximum number of bytes to write (written bytes will not exceed `buf.length - offset`).\n             * @param [encoding='utf8'] The character encoding of `string`.\n             * @return Number of bytes written.\n             */\n            write(string: string, encoding?: BufferEncoding): number;\n            write(string: string, offset: number, encoding?: BufferEncoding): number;\n            write(string: string, offset: number, length: number, encoding?: BufferEncoding): number;\n            /**\n             * Decodes `buf` to a string according to the specified character encoding in`encoding`. `start` and `end` may be passed to decode only a subset of `buf`.\n             *\n             * If `encoding` is `'utf8'` and a byte sequence in the input is not valid UTF-8,\n             * then each invalid byte is replaced with the replacement character `U+FFFD`.\n             *\n             * The maximum length of a string instance (in UTF-16 code units) is available\n             * as {@link constants.MAX_STRING_LENGTH}.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf1 = Buffer.allocUnsafe(26);\n             *\n             * for (let i = 0; i < 26; i++) {\n             *   // 97 is the decimal ASCII value for 'a'.\n             *   buf1[i] = i + 97;\n             * }\n             *\n             * console.log(buf1.toString('utf8'));\n             * // Prints: abcdefghijklmnopqrstuvwxyz\n             * console.log(buf1.toString('utf8', 0, 5));\n             * // Prints: abcde\n             *\n             * const buf2 = Buffer.from('tést');\n             *\n             * console.log(buf2.toString('hex'));\n             * // Prints: 74c3a97374\n             * console.log(buf2.toString('utf8', 0, 3));\n             * // Prints: té\n             * console.log(buf2.toString(undefined, 0, 3));\n             * // Prints: té\n             * ```\n             * @since v0.1.90\n             * @param [encoding='utf8'] The character encoding to use.\n             * @param [start=0] The byte offset to start decoding at.\n             * @param [end=buf.length] The byte offset to stop decoding at (not inclusive).\n             */\n            toString(encoding?: BufferEncoding, start?: number, end?: number): string;\n            /**\n             * Returns a JSON representation of `buf`. [`JSON.stringify()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) implicitly calls\n             * this function when stringifying a `Buffer` instance.\n             *\n             * `Buffer.from()` accepts objects in the format returned from this method.\n             * In particular, `Buffer.from(buf.toJSON())` works like `Buffer.from(buf)`.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5]);\n             * const json = JSON.stringify(buf);\n             *\n             * console.log(json);\n             * // Prints: {\"type\":\"Buffer\",\"data\":[1,2,3,4,5]}\n             *\n             * const copy = JSON.parse(json, (key, value) => {\n             *   return value &#x26;&#x26; value.type === 'Buffer' ?\n             *     Buffer.from(value) :\n             *     value;\n             * });\n             *\n             * console.log(copy);\n             * // Prints: <Buffer 01 02 03 04 05>\n             * ```\n             * @since v0.9.2\n             */\n            toJSON(): {\n                type: 'Buffer';\n                data: number[];\n            };\n            /**\n             * Returns `true` if both `buf` and `otherBuffer` have exactly the same bytes,`false` otherwise. Equivalent to `buf.compare(otherBuffer) === 0`.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf1 = Buffer.from('ABC');\n             * const buf2 = Buffer.from('414243', 'hex');\n             * const buf3 = Buffer.from('ABCD');\n             *\n             * console.log(buf1.equals(buf2));\n             * // Prints: true\n             * console.log(buf1.equals(buf3));\n             * // Prints: false\n             * ```\n             * @since v0.11.13\n             * @param otherBuffer A `Buffer` or {@link Uint8Array} with which to compare `buf`.\n             */\n            equals(otherBuffer: Uint8Array): boolean;\n            /**\n             * Compares `buf` with `target` and returns a number indicating whether `buf`comes before, after, or is the same as `target` in sort order.\n             * Comparison is based on the actual sequence of bytes in each `Buffer`.\n             *\n             * * `0` is returned if `target` is the same as `buf`\n             * * `1` is returned if `target` should come _before_`buf` when sorted.\n             * * `-1` is returned if `target` should come _after_`buf` when sorted.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf1 = Buffer.from('ABC');\n             * const buf2 = Buffer.from('BCD');\n             * const buf3 = Buffer.from('ABCD');\n             *\n             * console.log(buf1.compare(buf1));\n             * // Prints: 0\n             * console.log(buf1.compare(buf2));\n             * // Prints: -1\n             * console.log(buf1.compare(buf3));\n             * // Prints: -1\n             * console.log(buf2.compare(buf1));\n             * // Prints: 1\n             * console.log(buf2.compare(buf3));\n             * // Prints: 1\n             * console.log([buf1, buf2, buf3].sort(Buffer.compare));\n             * // Prints: [ <Buffer 41 42 43>, <Buffer 41 42 43 44>, <Buffer 42 43 44> ]\n             * // (This result is equal to: [buf1, buf3, buf2].)\n             * ```\n             *\n             * The optional `targetStart`, `targetEnd`, `sourceStart`, and `sourceEnd`arguments can be used to limit the comparison to specific ranges within `target`and `buf` respectively.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf1 = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n             * const buf2 = Buffer.from([5, 6, 7, 8, 9, 1, 2, 3, 4]);\n             *\n             * console.log(buf1.compare(buf2, 5, 9, 0, 4));\n             * // Prints: 0\n             * console.log(buf1.compare(buf2, 0, 6, 4));\n             * // Prints: -1\n             * console.log(buf1.compare(buf2, 5, 6, 5));\n             * // Prints: 1\n             * ```\n             *\n             * `ERR_OUT_OF_RANGE` is thrown if `targetStart < 0`, `sourceStart < 0`,`targetEnd > target.byteLength`, or `sourceEnd > source.byteLength`.\n             * @since v0.11.13\n             * @param target A `Buffer` or {@link Uint8Array} with which to compare `buf`.\n             * @param [targetStart=0] The offset within `target` at which to begin comparison.\n             * @param [targetEnd=target.length] The offset within `target` at which to end comparison (not inclusive).\n             * @param [sourceStart=0] The offset within `buf` at which to begin comparison.\n             * @param [sourceEnd=buf.length] The offset within `buf` at which to end comparison (not inclusive).\n             */\n            compare(target: Uint8Array, targetStart?: number, targetEnd?: number, sourceStart?: number, sourceEnd?: number): number;\n            /**\n             * Copies data from a region of `buf` to a region in `target`, even if the `target`memory region overlaps with `buf`.\n             *\n             * [`TypedArray.prototype.set()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set) performs the same operation, and is available\n             * for all TypedArrays, including Node.js `Buffer`s, although it takes\n             * different function arguments.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * // Create two `Buffer` instances.\n             * const buf1 = Buffer.allocUnsafe(26);\n             * const buf2 = Buffer.allocUnsafe(26).fill('!');\n             *\n             * for (let i = 0; i < 26; i++) {\n             *   // 97 is the decimal ASCII value for 'a'.\n             *   buf1[i] = i + 97;\n             * }\n             *\n             * // Copy `buf1` bytes 16 through 19 into `buf2` starting at byte 8 of `buf2`.\n             * buf1.copy(buf2, 8, 16, 20);\n             * // This is equivalent to:\n             * // buf2.set(buf1.subarray(16, 20), 8);\n             *\n             * console.log(buf2.toString('ascii', 0, 25));\n             * // Prints: !!!!!!!!qrst!!!!!!!!!!!!!\n             * ```\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * // Create a `Buffer` and copy data from one region to an overlapping region\n             * // within the same `Buffer`.\n             *\n             * const buf = Buffer.allocUnsafe(26);\n             *\n             * for (let i = 0; i < 26; i++) {\n             *   // 97 is the decimal ASCII value for 'a'.\n             *   buf[i] = i + 97;\n             * }\n             *\n             * buf.copy(buf, 0, 4, 10);\n             *\n             * console.log(buf.toString());\n             * // Prints: efghijghijklmnopqrstuvwxyz\n             * ```\n             * @since v0.1.90\n             * @param target A `Buffer` or {@link Uint8Array} to copy into.\n             * @param [targetStart=0] The offset within `target` at which to begin writing.\n             * @param [sourceStart=0] The offset within `buf` from which to begin copying.\n             * @param [sourceEnd=buf.length] The offset within `buf` at which to stop copying (not inclusive).\n             * @return The number of bytes copied.\n             */\n            copy(target: Uint8Array, targetStart?: number, sourceStart?: number, sourceEnd?: number): number;\n            /**\n             * Returns a new `Buffer` that references the same memory as the original, but\n             * offset and cropped by the `start` and `end` indices.\n             *\n             * This is the same behavior as `buf.subarray()`.\n             *\n             * This method is not compatible with the `Uint8Array.prototype.slice()`,\n             * which is a superclass of `Buffer`. To copy the slice, use`Uint8Array.prototype.slice()`.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.from('buffer');\n             *\n             * const copiedBuf = Uint8Array.prototype.slice.call(buf);\n             * copiedBuf[0]++;\n             * console.log(copiedBuf.toString());\n             * // Prints: cuffer\n             *\n             * console.log(buf.toString());\n             * // Prints: buffer\n             * ```\n             * @since v0.3.0\n             * @param [start=0] Where the new `Buffer` will start.\n             * @param [end=buf.length] Where the new `Buffer` will end (not inclusive).\n             */\n            slice(start?: number, end?: number): Buffer;\n            /**\n             * Returns a new `Buffer` that references the same memory as the original, but\n             * offset and cropped by the `start` and `end` indices.\n             *\n             * Specifying `end` greater than `buf.length` will return the same result as\n             * that of `end` equal to `buf.length`.\n             *\n             * This method is inherited from [`TypedArray.prototype.subarray()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray).\n             *\n             * Modifying the new `Buffer` slice will modify the memory in the original `Buffer`because the allocated memory of the two objects overlap.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * // Create a `Buffer` with the ASCII alphabet, take a slice, and modify one byte\n             * // from the original `Buffer`.\n             *\n             * const buf1 = Buffer.allocUnsafe(26);\n             *\n             * for (let i = 0; i < 26; i++) {\n             *   // 97 is the decimal ASCII value for 'a'.\n             *   buf1[i] = i + 97;\n             * }\n             *\n             * const buf2 = buf1.subarray(0, 3);\n             *\n             * console.log(buf2.toString('ascii', 0, buf2.length));\n             * // Prints: abc\n             *\n             * buf1[0] = 33;\n             *\n             * console.log(buf2.toString('ascii', 0, buf2.length));\n             * // Prints: !bc\n             * ```\n             *\n             * Specifying negative indexes causes the slice to be generated relative to the\n             * end of `buf` rather than the beginning.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.from('buffer');\n             *\n             * console.log(buf.subarray(-6, -1).toString());\n             * // Prints: buffe\n             * // (Equivalent to buf.subarray(0, 5).)\n             *\n             * console.log(buf.subarray(-6, -2).toString());\n             * // Prints: buff\n             * // (Equivalent to buf.subarray(0, 4).)\n             *\n             * console.log(buf.subarray(-5, -2).toString());\n             * // Prints: uff\n             * // (Equivalent to buf.subarray(1, 4).)\n             * ```\n             * @since v3.0.0\n             * @param [start=0] Where the new `Buffer` will start.\n             * @param [end=buf.length] Where the new `Buffer` will end (not inclusive).\n             */\n            subarray(start?: number, end?: number): Buffer;\n            /**\n             * Writes `value` to `buf` at the specified `offset` as big-endian.\n             *\n             * `value` is interpreted and written as a two's complement signed integer.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.allocUnsafe(8);\n             *\n             * buf.writeBigInt64BE(0x0102030405060708n, 0);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer 01 02 03 04 05 06 07 08>\n             * ```\n             * @since v12.0.0, v10.20.0\n             * @param value Number to be written to `buf`.\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy: `0 <= offset <= buf.length - 8`.\n             * @return `offset` plus the number of bytes written.\n             */\n            writeBigInt64BE(value: bigint, offset?: number): number;\n            /**\n             * Writes `value` to `buf` at the specified `offset` as little-endian.\n             *\n             * `value` is interpreted and written as a two's complement signed integer.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.allocUnsafe(8);\n             *\n             * buf.writeBigInt64LE(0x0102030405060708n, 0);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer 08 07 06 05 04 03 02 01>\n             * ```\n             * @since v12.0.0, v10.20.0\n             * @param value Number to be written to `buf`.\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy: `0 <= offset <= buf.length - 8`.\n             * @return `offset` plus the number of bytes written.\n             */\n            writeBigInt64LE(value: bigint, offset?: number): number;\n            /**\n             * Writes `value` to `buf` at the specified `offset` as big-endian.\n             *\n             * This function is also available under the `writeBigUint64BE` alias.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.allocUnsafe(8);\n             *\n             * buf.writeBigUInt64BE(0xdecafafecacefaden, 0);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer de ca fa fe ca ce fa de>\n             * ```\n             * @since v12.0.0, v10.20.0\n             * @param value Number to be written to `buf`.\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy: `0 <= offset <= buf.length - 8`.\n             * @return `offset` plus the number of bytes written.\n             */\n            writeBigUInt64BE(value: bigint, offset?: number): number;\n            /**\n             * Writes `value` to `buf` at the specified `offset` as little-endian\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.allocUnsafe(8);\n             *\n             * buf.writeBigUInt64LE(0xdecafafecacefaden, 0);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer de fa ce ca fe fa ca de>\n             * ```\n             *\n             * This function is also available under the `writeBigUint64LE` alias.\n             * @since v12.0.0, v10.20.0\n             * @param value Number to be written to `buf`.\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy: `0 <= offset <= buf.length - 8`.\n             * @return `offset` plus the number of bytes written.\n             */\n            writeBigUInt64LE(value: bigint, offset?: number): number;\n            /**\n             * Writes `byteLength` bytes of `value` to `buf` at the specified `offset`as little-endian. Supports up to 48 bits of accuracy. Behavior is undefined\n             * when `value` is anything other than an unsigned integer.\n             *\n             * This function is also available under the `writeUintLE` alias.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.allocUnsafe(6);\n             *\n             * buf.writeUIntLE(0x1234567890ab, 0, 6);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer ab 90 78 56 34 12>\n             * ```\n             * @since v0.5.5\n             * @param value Number to be written to `buf`.\n             * @param offset Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - byteLength`.\n             * @param byteLength Number of bytes to write. Must satisfy `0 < byteLength <= 6`.\n             * @return `offset` plus the number of bytes written.\n             */\n            writeUIntLE(value: number, offset: number, byteLength: number): number;\n            /**\n             * Writes `byteLength` bytes of `value` to `buf` at the specified `offset`as big-endian. Supports up to 48 bits of accuracy. Behavior is undefined\n             * when `value` is anything other than an unsigned integer.\n             *\n             * This function is also available under the `writeUintBE` alias.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.allocUnsafe(6);\n             *\n             * buf.writeUIntBE(0x1234567890ab, 0, 6);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer 12 34 56 78 90 ab>\n             * ```\n             * @since v0.5.5\n             * @param value Number to be written to `buf`.\n             * @param offset Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - byteLength`.\n             * @param byteLength Number of bytes to write. Must satisfy `0 < byteLength <= 6`.\n             * @return `offset` plus the number of bytes written.\n             */\n            writeUIntBE(value: number, offset: number, byteLength: number): number;\n            /**\n             * Writes `byteLength` bytes of `value` to `buf` at the specified `offset`as little-endian. Supports up to 48 bits of accuracy. Behavior is undefined\n             * when `value` is anything other than a signed integer.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.allocUnsafe(6);\n             *\n             * buf.writeIntLE(0x1234567890ab, 0, 6);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer ab 90 78 56 34 12>\n             * ```\n             * @since v0.11.15\n             * @param value Number to be written to `buf`.\n             * @param offset Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - byteLength`.\n             * @param byteLength Number of bytes to write. Must satisfy `0 < byteLength <= 6`.\n             * @return `offset` plus the number of bytes written.\n             */\n            writeIntLE(value: number, offset: number, byteLength: number): number;\n            /**\n             * Writes `byteLength` bytes of `value` to `buf` at the specified `offset`as big-endian. Supports up to 48 bits of accuracy. Behavior is undefined when`value` is anything other than a\n             * signed integer.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.allocUnsafe(6);\n             *\n             * buf.writeIntBE(0x1234567890ab, 0, 6);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer 12 34 56 78 90 ab>\n             * ```\n             * @since v0.11.15\n             * @param value Number to be written to `buf`.\n             * @param offset Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - byteLength`.\n             * @param byteLength Number of bytes to write. Must satisfy `0 < byteLength <= 6`.\n             * @return `offset` plus the number of bytes written.\n             */\n            writeIntBE(value: number, offset: number, byteLength: number): number;\n            /**\n             * Reads an unsigned, big-endian 64-bit integer from `buf` at the specified`offset`.\n             *\n             * This function is also available under the `readBigUint64BE` alias.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.from([0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff]);\n             *\n             * console.log(buf.readBigUInt64BE(0));\n             * // Prints: 4294967295n\n             * ```\n             * @since v12.0.0, v10.20.0\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy: `0 <= offset <= buf.length - 8`.\n             */\n            readBigUInt64BE(offset?: number): bigint;\n            /**\n             * Reads an unsigned, little-endian 64-bit integer from `buf` at the specified`offset`.\n             *\n             * This function is also available under the `readBigUint64LE` alias.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.from([0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff]);\n             *\n             * console.log(buf.readBigUInt64LE(0));\n             * // Prints: 18446744069414584320n\n             * ```\n             * @since v12.0.0, v10.20.0\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy: `0 <= offset <= buf.length - 8`.\n             */\n            readBigUInt64LE(offset?: number): bigint;\n            /**\n             * Reads a signed, big-endian 64-bit integer from `buf` at the specified `offset`.\n             *\n             * Integers read from a `Buffer` are interpreted as two's complement signed\n             * values.\n             * @since v12.0.0, v10.20.0\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy: `0 <= offset <= buf.length - 8`.\n             */\n            readBigInt64BE(offset?: number): bigint;\n            /**\n             * Reads a signed, little-endian 64-bit integer from `buf` at the specified`offset`.\n             *\n             * Integers read from a `Buffer` are interpreted as two's complement signed\n             * values.\n             * @since v12.0.0, v10.20.0\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy: `0 <= offset <= buf.length - 8`.\n             */\n            readBigInt64LE(offset?: number): bigint;\n            /**\n             * Reads `byteLength` number of bytes from `buf` at the specified `offset`and interprets the result as an unsigned, little-endian integer supporting\n             * up to 48 bits of accuracy.\n             *\n             * This function is also available under the `readUintLE` alias.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);\n             *\n             * console.log(buf.readUIntLE(0, 6).toString(16));\n             * // Prints: ab9078563412\n             * ```\n             * @since v0.11.15\n             * @param offset Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - byteLength`.\n             * @param byteLength Number of bytes to read. Must satisfy `0 < byteLength <= 6`.\n             */\n            readUIntLE(offset: number, byteLength: number): number;\n            /**\n             * Reads `byteLength` number of bytes from `buf` at the specified `offset`and interprets the result as an unsigned big-endian integer supporting\n             * up to 48 bits of accuracy.\n             *\n             * This function is also available under the `readUintBE` alias.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);\n             *\n             * console.log(buf.readUIntBE(0, 6).toString(16));\n             * // Prints: 1234567890ab\n             * console.log(buf.readUIntBE(1, 6).toString(16));\n             * // Throws ERR_OUT_OF_RANGE.\n             * ```\n             * @since v0.11.15\n             * @param offset Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - byteLength`.\n             * @param byteLength Number of bytes to read. Must satisfy `0 < byteLength <= 6`.\n             */\n            readUIntBE(offset: number, byteLength: number): number;\n            /**\n             * Reads `byteLength` number of bytes from `buf` at the specified `offset`and interprets the result as a little-endian, two's complement signed value\n             * supporting up to 48 bits of accuracy.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);\n             *\n             * console.log(buf.readIntLE(0, 6).toString(16));\n             * // Prints: -546f87a9cbee\n             * ```\n             * @since v0.11.15\n             * @param offset Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - byteLength`.\n             * @param byteLength Number of bytes to read. Must satisfy `0 < byteLength <= 6`.\n             */\n            readIntLE(offset: number, byteLength: number): number;\n            /**\n             * Reads `byteLength` number of bytes from `buf` at the specified `offset`and interprets the result as a big-endian, two's complement signed value\n             * supporting up to 48 bits of accuracy.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);\n             *\n             * console.log(buf.readIntBE(0, 6).toString(16));\n             * // Prints: 1234567890ab\n             * console.log(buf.readIntBE(1, 6).toString(16));\n             * // Throws ERR_OUT_OF_RANGE.\n             * console.log(buf.readIntBE(1, 0).toString(16));\n             * // Throws ERR_OUT_OF_RANGE.\n             * ```\n             * @since v0.11.15\n             * @param offset Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - byteLength`.\n             * @param byteLength Number of bytes to read. Must satisfy `0 < byteLength <= 6`.\n             */\n            readIntBE(offset: number, byteLength: number): number;\n            /**\n             * Reads an unsigned 8-bit integer from `buf` at the specified `offset`.\n             *\n             * This function is also available under the `readUint8` alias.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.from([1, -2]);\n             *\n             * console.log(buf.readUInt8(0));\n             * // Prints: 1\n             * console.log(buf.readUInt8(1));\n             * // Prints: 254\n             * console.log(buf.readUInt8(2));\n             * // Throws ERR_OUT_OF_RANGE.\n             * ```\n             * @since v0.5.0\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 1`.\n             */\n            readUInt8(offset?: number): number;\n            /**\n             * Reads an unsigned, little-endian 16-bit integer from `buf` at the specified`offset`.\n             *\n             * This function is also available under the `readUint16LE` alias.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.from([0x12, 0x34, 0x56]);\n             *\n             * console.log(buf.readUInt16LE(0).toString(16));\n             * // Prints: 3412\n             * console.log(buf.readUInt16LE(1).toString(16));\n             * // Prints: 5634\n             * console.log(buf.readUInt16LE(2).toString(16));\n             * // Throws ERR_OUT_OF_RANGE.\n             * ```\n             * @since v0.5.5\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 2`.\n             */\n            readUInt16LE(offset?: number): number;\n            /**\n             * Reads an unsigned, big-endian 16-bit integer from `buf` at the specified`offset`.\n             *\n             * This function is also available under the `readUint16BE` alias.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.from([0x12, 0x34, 0x56]);\n             *\n             * console.log(buf.readUInt16BE(0).toString(16));\n             * // Prints: 1234\n             * console.log(buf.readUInt16BE(1).toString(16));\n             * // Prints: 3456\n             * ```\n             * @since v0.5.5\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 2`.\n             */\n            readUInt16BE(offset?: number): number;\n            /**\n             * Reads an unsigned, little-endian 32-bit integer from `buf` at the specified`offset`.\n             *\n             * This function is also available under the `readUint32LE` alias.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.from([0x12, 0x34, 0x56, 0x78]);\n             *\n             * console.log(buf.readUInt32LE(0).toString(16));\n             * // Prints: 78563412\n             * console.log(buf.readUInt32LE(1).toString(16));\n             * // Throws ERR_OUT_OF_RANGE.\n             * ```\n             * @since v0.5.5\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 4`.\n             */\n            readUInt32LE(offset?: number): number;\n            /**\n             * Reads an unsigned, big-endian 32-bit integer from `buf` at the specified`offset`.\n             *\n             * This function is also available under the `readUint32BE` alias.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.from([0x12, 0x34, 0x56, 0x78]);\n             *\n             * console.log(buf.readUInt32BE(0).toString(16));\n             * // Prints: 12345678\n             * ```\n             * @since v0.5.5\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 4`.\n             */\n            readUInt32BE(offset?: number): number;\n            /**\n             * Reads a signed 8-bit integer from `buf` at the specified `offset`.\n             *\n             * Integers read from a `Buffer` are interpreted as two's complement signed values.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.from([-1, 5]);\n             *\n             * console.log(buf.readInt8(0));\n             * // Prints: -1\n             * console.log(buf.readInt8(1));\n             * // Prints: 5\n             * console.log(buf.readInt8(2));\n             * // Throws ERR_OUT_OF_RANGE.\n             * ```\n             * @since v0.5.0\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 1`.\n             */\n            readInt8(offset?: number): number;\n            /**\n             * Reads a signed, little-endian 16-bit integer from `buf` at the specified`offset`.\n             *\n             * Integers read from a `Buffer` are interpreted as two's complement signed values.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.from([0, 5]);\n             *\n             * console.log(buf.readInt16LE(0));\n             * // Prints: 1280\n             * console.log(buf.readInt16LE(1));\n             * // Throws ERR_OUT_OF_RANGE.\n             * ```\n             * @since v0.5.5\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 2`.\n             */\n            readInt16LE(offset?: number): number;\n            /**\n             * Reads a signed, big-endian 16-bit integer from `buf` at the specified `offset`.\n             *\n             * Integers read from a `Buffer` are interpreted as two's complement signed values.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.from([0, 5]);\n             *\n             * console.log(buf.readInt16BE(0));\n             * // Prints: 5\n             * ```\n             * @since v0.5.5\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 2`.\n             */\n            readInt16BE(offset?: number): number;\n            /**\n             * Reads a signed, little-endian 32-bit integer from `buf` at the specified`offset`.\n             *\n             * Integers read from a `Buffer` are interpreted as two's complement signed values.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.from([0, 0, 0, 5]);\n             *\n             * console.log(buf.readInt32LE(0));\n             * // Prints: 83886080\n             * console.log(buf.readInt32LE(1));\n             * // Throws ERR_OUT_OF_RANGE.\n             * ```\n             * @since v0.5.5\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 4`.\n             */\n            readInt32LE(offset?: number): number;\n            /**\n             * Reads a signed, big-endian 32-bit integer from `buf` at the specified `offset`.\n             *\n             * Integers read from a `Buffer` are interpreted as two's complement signed values.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.from([0, 0, 0, 5]);\n             *\n             * console.log(buf.readInt32BE(0));\n             * // Prints: 5\n             * ```\n             * @since v0.5.5\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 4`.\n             */\n            readInt32BE(offset?: number): number;\n            /**\n             * Reads a 32-bit, little-endian float from `buf` at the specified `offset`.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.from([1, 2, 3, 4]);\n             *\n             * console.log(buf.readFloatLE(0));\n             * // Prints: 1.539989614439558e-36\n             * console.log(buf.readFloatLE(1));\n             * // Throws ERR_OUT_OF_RANGE.\n             * ```\n             * @since v0.11.15\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 4`.\n             */\n            readFloatLE(offset?: number): number;\n            /**\n             * Reads a 32-bit, big-endian float from `buf` at the specified `offset`.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.from([1, 2, 3, 4]);\n             *\n             * console.log(buf.readFloatBE(0));\n             * // Prints: 2.387939260590663e-38\n             * ```\n             * @since v0.11.15\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 4`.\n             */\n            readFloatBE(offset?: number): number;\n            /**\n             * Reads a 64-bit, little-endian double from `buf` at the specified `offset`.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8]);\n             *\n             * console.log(buf.readDoubleLE(0));\n             * // Prints: 5.447603722011605e-270\n             * console.log(buf.readDoubleLE(1));\n             * // Throws ERR_OUT_OF_RANGE.\n             * ```\n             * @since v0.11.15\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 8`.\n             */\n            readDoubleLE(offset?: number): number;\n            /**\n             * Reads a 64-bit, big-endian double from `buf` at the specified `offset`.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8]);\n             *\n             * console.log(buf.readDoubleBE(0));\n             * // Prints: 8.20788039913184e-304\n             * ```\n             * @since v0.11.15\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 8`.\n             */\n            readDoubleBE(offset?: number): number;\n            reverse(): this;\n            /**\n             * Interprets `buf` as an array of unsigned 16-bit integers and swaps the\n             * byte order _in-place_. Throws `ERR_INVALID_BUFFER_SIZE` if `buf.length` is not a multiple of 2.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);\n             *\n             * console.log(buf1);\n             * // Prints: <Buffer 01 02 03 04 05 06 07 08>\n             *\n             * buf1.swap16();\n             *\n             * console.log(buf1);\n             * // Prints: <Buffer 02 01 04 03 06 05 08 07>\n             *\n             * const buf2 = Buffer.from([0x1, 0x2, 0x3]);\n             *\n             * buf2.swap16();\n             * // Throws ERR_INVALID_BUFFER_SIZE.\n             * ```\n             *\n             * One convenient use of `buf.swap16()` is to perform a fast in-place conversion\n             * between UTF-16 little-endian and UTF-16 big-endian:\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.from('This is little-endian UTF-16', 'utf16le');\n             * buf.swap16(); // Convert to big-endian UTF-16 text.\n             * ```\n             * @since v5.10.0\n             * @return A reference to `buf`.\n             */\n            swap16(): Buffer;\n            /**\n             * Interprets `buf` as an array of unsigned 32-bit integers and swaps the\n             * byte order _in-place_. Throws `ERR_INVALID_BUFFER_SIZE` if `buf.length` is not a multiple of 4.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);\n             *\n             * console.log(buf1);\n             * // Prints: <Buffer 01 02 03 04 05 06 07 08>\n             *\n             * buf1.swap32();\n             *\n             * console.log(buf1);\n             * // Prints: <Buffer 04 03 02 01 08 07 06 05>\n             *\n             * const buf2 = Buffer.from([0x1, 0x2, 0x3]);\n             *\n             * buf2.swap32();\n             * // Throws ERR_INVALID_BUFFER_SIZE.\n             * ```\n             * @since v5.10.0\n             * @return A reference to `buf`.\n             */\n            swap32(): Buffer;\n            /**\n             * Interprets `buf` as an array of 64-bit numbers and swaps byte order _in-place_.\n             * Throws `ERR_INVALID_BUFFER_SIZE` if `buf.length` is not a multiple of 8.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);\n             *\n             * console.log(buf1);\n             * // Prints: <Buffer 01 02 03 04 05 06 07 08>\n             *\n             * buf1.swap64();\n             *\n             * console.log(buf1);\n             * // Prints: <Buffer 08 07 06 05 04 03 02 01>\n             *\n             * const buf2 = Buffer.from([0x1, 0x2, 0x3]);\n             *\n             * buf2.swap64();\n             * // Throws ERR_INVALID_BUFFER_SIZE.\n             * ```\n             * @since v6.3.0\n             * @return A reference to `buf`.\n             */\n            swap64(): Buffer;\n            /**\n             * Writes `value` to `buf` at the specified `offset`. `value` must be a\n             * valid unsigned 8-bit integer. Behavior is undefined when `value` is anything\n             * other than an unsigned 8-bit integer.\n             *\n             * This function is also available under the `writeUint8` alias.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.allocUnsafe(4);\n             *\n             * buf.writeUInt8(0x3, 0);\n             * buf.writeUInt8(0x4, 1);\n             * buf.writeUInt8(0x23, 2);\n             * buf.writeUInt8(0x42, 3);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer 03 04 23 42>\n             * ```\n             * @since v0.5.0\n             * @param value Number to be written to `buf`.\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 1`.\n             * @return `offset` plus the number of bytes written.\n             */\n            writeUInt8(value: number, offset?: number): number;\n            /**\n             * Writes `value` to `buf` at the specified `offset` as little-endian. The `value`must be a valid unsigned 16-bit integer. Behavior is undefined when `value` is\n             * anything other than an unsigned 16-bit integer.\n             *\n             * This function is also available under the `writeUint16LE` alias.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.allocUnsafe(4);\n             *\n             * buf.writeUInt16LE(0xdead, 0);\n             * buf.writeUInt16LE(0xbeef, 2);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer ad de ef be>\n             * ```\n             * @since v0.5.5\n             * @param value Number to be written to `buf`.\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 2`.\n             * @return `offset` plus the number of bytes written.\n             */\n            writeUInt16LE(value: number, offset?: number): number;\n            /**\n             * Writes `value` to `buf` at the specified `offset` as big-endian. The `value`must be a valid unsigned 16-bit integer. Behavior is undefined when `value`is anything other than an\n             * unsigned 16-bit integer.\n             *\n             * This function is also available under the `writeUint16BE` alias.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.allocUnsafe(4);\n             *\n             * buf.writeUInt16BE(0xdead, 0);\n             * buf.writeUInt16BE(0xbeef, 2);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer de ad be ef>\n             * ```\n             * @since v0.5.5\n             * @param value Number to be written to `buf`.\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 2`.\n             * @return `offset` plus the number of bytes written.\n             */\n            writeUInt16BE(value: number, offset?: number): number;\n            /**\n             * Writes `value` to `buf` at the specified `offset` as little-endian. The `value`must be a valid unsigned 32-bit integer. Behavior is undefined when `value` is\n             * anything other than an unsigned 32-bit integer.\n             *\n             * This function is also available under the `writeUint32LE` alias.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.allocUnsafe(4);\n             *\n             * buf.writeUInt32LE(0xfeedface, 0);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer ce fa ed fe>\n             * ```\n             * @since v0.5.5\n             * @param value Number to be written to `buf`.\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 4`.\n             * @return `offset` plus the number of bytes written.\n             */\n            writeUInt32LE(value: number, offset?: number): number;\n            /**\n             * Writes `value` to `buf` at the specified `offset` as big-endian. The `value`must be a valid unsigned 32-bit integer. Behavior is undefined when `value`is anything other than an\n             * unsigned 32-bit integer.\n             *\n             * This function is also available under the `writeUint32BE` alias.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.allocUnsafe(4);\n             *\n             * buf.writeUInt32BE(0xfeedface, 0);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer fe ed fa ce>\n             * ```\n             * @since v0.5.5\n             * @param value Number to be written to `buf`.\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 4`.\n             * @return `offset` plus the number of bytes written.\n             */\n            writeUInt32BE(value: number, offset?: number): number;\n            /**\n             * Writes `value` to `buf` at the specified `offset`. `value` must be a valid\n             * signed 8-bit integer. Behavior is undefined when `value` is anything other than\n             * a signed 8-bit integer.\n             *\n             * `value` is interpreted and written as a two's complement signed integer.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.allocUnsafe(2);\n             *\n             * buf.writeInt8(2, 0);\n             * buf.writeInt8(-2, 1);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer 02 fe>\n             * ```\n             * @since v0.5.0\n             * @param value Number to be written to `buf`.\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 1`.\n             * @return `offset` plus the number of bytes written.\n             */\n            writeInt8(value: number, offset?: number): number;\n            /**\n             * Writes `value` to `buf` at the specified `offset` as little-endian.  The `value`must be a valid signed 16-bit integer. Behavior is undefined when `value` is\n             * anything other than a signed 16-bit integer.\n             *\n             * The `value` is interpreted and written as a two's complement signed integer.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.allocUnsafe(2);\n             *\n             * buf.writeInt16LE(0x0304, 0);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer 04 03>\n             * ```\n             * @since v0.5.5\n             * @param value Number to be written to `buf`.\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 2`.\n             * @return `offset` plus the number of bytes written.\n             */\n            writeInt16LE(value: number, offset?: number): number;\n            /**\n             * Writes `value` to `buf` at the specified `offset` as big-endian.  The `value`must be a valid signed 16-bit integer. Behavior is undefined when `value` is\n             * anything other than a signed 16-bit integer.\n             *\n             * The `value` is interpreted and written as a two's complement signed integer.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.allocUnsafe(2);\n             *\n             * buf.writeInt16BE(0x0102, 0);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer 01 02>\n             * ```\n             * @since v0.5.5\n             * @param value Number to be written to `buf`.\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 2`.\n             * @return `offset` plus the number of bytes written.\n             */\n            writeInt16BE(value: number, offset?: number): number;\n            /**\n             * Writes `value` to `buf` at the specified `offset` as little-endian. The `value`must be a valid signed 32-bit integer. Behavior is undefined when `value` is\n             * anything other than a signed 32-bit integer.\n             *\n             * The `value` is interpreted and written as a two's complement signed integer.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.allocUnsafe(4);\n             *\n             * buf.writeInt32LE(0x05060708, 0);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer 08 07 06 05>\n             * ```\n             * @since v0.5.5\n             * @param value Number to be written to `buf`.\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 4`.\n             * @return `offset` plus the number of bytes written.\n             */\n            writeInt32LE(value: number, offset?: number): number;\n            /**\n             * Writes `value` to `buf` at the specified `offset` as big-endian. The `value`must be a valid signed 32-bit integer. Behavior is undefined when `value` is\n             * anything other than a signed 32-bit integer.\n             *\n             * The `value` is interpreted and written as a two's complement signed integer.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.allocUnsafe(4);\n             *\n             * buf.writeInt32BE(0x01020304, 0);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer 01 02 03 04>\n             * ```\n             * @since v0.5.5\n             * @param value Number to be written to `buf`.\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 4`.\n             * @return `offset` plus the number of bytes written.\n             */\n            writeInt32BE(value: number, offset?: number): number;\n            /**\n             * Writes `value` to `buf` at the specified `offset` as little-endian. Behavior is\n             * undefined when `value` is anything other than a JavaScript number.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.allocUnsafe(4);\n             *\n             * buf.writeFloatLE(0xcafebabe, 0);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer bb fe 4a 4f>\n             * ```\n             * @since v0.11.15\n             * @param value Number to be written to `buf`.\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 4`.\n             * @return `offset` plus the number of bytes written.\n             */\n            writeFloatLE(value: number, offset?: number): number;\n            /**\n             * Writes `value` to `buf` at the specified `offset` as big-endian. Behavior is\n             * undefined when `value` is anything other than a JavaScript number.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.allocUnsafe(4);\n             *\n             * buf.writeFloatBE(0xcafebabe, 0);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer 4f 4a fe bb>\n             * ```\n             * @since v0.11.15\n             * @param value Number to be written to `buf`.\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 4`.\n             * @return `offset` plus the number of bytes written.\n             */\n            writeFloatBE(value: number, offset?: number): number;\n            /**\n             * Writes `value` to `buf` at the specified `offset` as little-endian. The `value`must be a JavaScript number. Behavior is undefined when `value` is anything\n             * other than a JavaScript number.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.allocUnsafe(8);\n             *\n             * buf.writeDoubleLE(123.456, 0);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer 77 be 9f 1a 2f dd 5e 40>\n             * ```\n             * @since v0.11.15\n             * @param value Number to be written to `buf`.\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 8`.\n             * @return `offset` plus the number of bytes written.\n             */\n            writeDoubleLE(value: number, offset?: number): number;\n            /**\n             * Writes `value` to `buf` at the specified `offset` as big-endian. The `value`must be a JavaScript number. Behavior is undefined when `value` is anything\n             * other than a JavaScript number.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.allocUnsafe(8);\n             *\n             * buf.writeDoubleBE(123.456, 0);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer 40 5e dd 2f 1a 9f be 77>\n             * ```\n             * @since v0.11.15\n             * @param value Number to be written to `buf`.\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 8`.\n             * @return `offset` plus the number of bytes written.\n             */\n            writeDoubleBE(value: number, offset?: number): number;\n            /**\n             * Fills `buf` with the specified `value`. If the `offset` and `end` are not given,\n             * the entire `buf` will be filled:\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * // Fill a `Buffer` with the ASCII character 'h'.\n             *\n             * const b = Buffer.allocUnsafe(50).fill('h');\n             *\n             * console.log(b.toString());\n             * // Prints: hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh\n             * ```\n             *\n             * `value` is coerced to a `uint32` value if it is not a string, `Buffer`, or\n             * integer. If the resulting integer is greater than `255` (decimal), `buf` will be\n             * filled with `value &#x26; 255`.\n             *\n             * If the final write of a `fill()` operation falls on a multi-byte character,\n             * then only the bytes of that character that fit into `buf` are written:\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * // Fill a `Buffer` with character that takes up two bytes in UTF-8.\n             *\n             * console.log(Buffer.allocUnsafe(5).fill('\\u0222'));\n             * // Prints: <Buffer c8 a2 c8 a2 c8>\n             * ```\n             *\n             * If `value` contains invalid characters, it is truncated; if no valid\n             * fill data remains, an exception is thrown:\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.allocUnsafe(5);\n             *\n             * console.log(buf.fill('a'));\n             * // Prints: <Buffer 61 61 61 61 61>\n             * console.log(buf.fill('aazz', 'hex'));\n             * // Prints: <Buffer aa aa aa aa aa>\n             * console.log(buf.fill('zz', 'hex'));\n             * // Throws an exception.\n             * ```\n             * @since v0.5.0\n             * @param value The value with which to fill `buf`.\n             * @param [offset=0] Number of bytes to skip before starting to fill `buf`.\n             * @param [end=buf.length] Where to stop filling `buf` (not inclusive).\n             * @param [encoding='utf8'] The encoding for `value` if `value` is a string.\n             * @return A reference to `buf`.\n             */\n            fill(value: string | Uint8Array | number, offset?: number, end?: number, encoding?: BufferEncoding): this;\n            /**\n             * If `value` is:\n             *\n             * * a string, `value` is interpreted according to the character encoding in`encoding`.\n             * * a `Buffer` or [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array), `value` will be used in its entirety.\n             * To compare a partial `Buffer`, use `buf.slice()`.\n             * * a number, `value` will be interpreted as an unsigned 8-bit integer\n             * value between `0` and `255`.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.from('this is a buffer');\n             *\n             * console.log(buf.indexOf('this'));\n             * // Prints: 0\n             * console.log(buf.indexOf('is'));\n             * // Prints: 2\n             * console.log(buf.indexOf(Buffer.from('a buffer')));\n             * // Prints: 8\n             * console.log(buf.indexOf(97));\n             * // Prints: 8 (97 is the decimal ASCII value for 'a')\n             * console.log(buf.indexOf(Buffer.from('a buffer example')));\n             * // Prints: -1\n             * console.log(buf.indexOf(Buffer.from('a buffer example').slice(0, 8)));\n             * // Prints: 8\n             *\n             * const utf16Buffer = Buffer.from('\\u039a\\u0391\\u03a3\\u03a3\\u0395', 'utf16le');\n             *\n             * console.log(utf16Buffer.indexOf('\\u03a3', 0, 'utf16le'));\n             * // Prints: 4\n             * console.log(utf16Buffer.indexOf('\\u03a3', -4, 'utf16le'));\n             * // Prints: 6\n             * ```\n             *\n             * If `value` is not a string, number, or `Buffer`, this method will throw a`TypeError`. If `value` is a number, it will be coerced to a valid byte value,\n             * an integer between 0 and 255.\n             *\n             * If `byteOffset` is not a number, it will be coerced to a number. If the result\n             * of coercion is `NaN` or `0`, then the entire buffer will be searched. This\n             * behavior matches [`String.prototype.indexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf).\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const b = Buffer.from('abcdef');\n             *\n             * // Passing a value that's a number, but not a valid byte.\n             * // Prints: 2, equivalent to searching for 99 or 'c'.\n             * console.log(b.indexOf(99.9));\n             * console.log(b.indexOf(256 + 99));\n             *\n             * // Passing a byteOffset that coerces to NaN or 0.\n             * // Prints: 1, searching the whole buffer.\n             * console.log(b.indexOf('b', undefined));\n             * console.log(b.indexOf('b', {}));\n             * console.log(b.indexOf('b', null));\n             * console.log(b.indexOf('b', []));\n             * ```\n             *\n             * If `value` is an empty string or empty `Buffer` and `byteOffset` is less\n             * than `buf.length`, `byteOffset` will be returned. If `value` is empty and`byteOffset` is at least `buf.length`, `buf.length` will be returned.\n             * @since v1.5.0\n             * @param value What to search for.\n             * @param [byteOffset=0] Where to begin searching in `buf`. If negative, then offset is calculated from the end of `buf`.\n             * @param [encoding='utf8'] If `value` is a string, this is the encoding used to determine the binary representation of the string that will be searched for in `buf`.\n             * @return The index of the first occurrence of `value` in `buf`, or `-1` if `buf` does not contain `value`.\n             */\n            indexOf(value: string | number | Uint8Array, byteOffset?: number, encoding?: BufferEncoding): number;\n            /**\n             * Identical to `buf.indexOf()`, except the last occurrence of `value` is found\n             * rather than the first occurrence.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.from('this buffer is a buffer');\n             *\n             * console.log(buf.lastIndexOf('this'));\n             * // Prints: 0\n             * console.log(buf.lastIndexOf('buffer'));\n             * // Prints: 17\n             * console.log(buf.lastIndexOf(Buffer.from('buffer')));\n             * // Prints: 17\n             * console.log(buf.lastIndexOf(97));\n             * // Prints: 15 (97 is the decimal ASCII value for 'a')\n             * console.log(buf.lastIndexOf(Buffer.from('yolo')));\n             * // Prints: -1\n             * console.log(buf.lastIndexOf('buffer', 5));\n             * // Prints: 5\n             * console.log(buf.lastIndexOf('buffer', 4));\n             * // Prints: -1\n             *\n             * const utf16Buffer = Buffer.from('\\u039a\\u0391\\u03a3\\u03a3\\u0395', 'utf16le');\n             *\n             * console.log(utf16Buffer.lastIndexOf('\\u03a3', undefined, 'utf16le'));\n             * // Prints: 6\n             * console.log(utf16Buffer.lastIndexOf('\\u03a3', -5, 'utf16le'));\n             * // Prints: 4\n             * ```\n             *\n             * If `value` is not a string, number, or `Buffer`, this method will throw a`TypeError`. If `value` is a number, it will be coerced to a valid byte value,\n             * an integer between 0 and 255.\n             *\n             * If `byteOffset` is not a number, it will be coerced to a number. Any arguments\n             * that coerce to `NaN`, like `{}` or `undefined`, will search the whole buffer.\n             * This behavior matches [`String.prototype.lastIndexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf).\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const b = Buffer.from('abcdef');\n             *\n             * // Passing a value that's a number, but not a valid byte.\n             * // Prints: 2, equivalent to searching for 99 or 'c'.\n             * console.log(b.lastIndexOf(99.9));\n             * console.log(b.lastIndexOf(256 + 99));\n             *\n             * // Passing a byteOffset that coerces to NaN.\n             * // Prints: 1, searching the whole buffer.\n             * console.log(b.lastIndexOf('b', undefined));\n             * console.log(b.lastIndexOf('b', {}));\n             *\n             * // Passing a byteOffset that coerces to 0.\n             * // Prints: -1, equivalent to passing 0.\n             * console.log(b.lastIndexOf('b', null));\n             * console.log(b.lastIndexOf('b', []));\n             * ```\n             *\n             * If `value` is an empty string or empty `Buffer`, `byteOffset` will be returned.\n             * @since v6.0.0\n             * @param value What to search for.\n             * @param [byteOffset=buf.length - 1] Where to begin searching in `buf`. If negative, then offset is calculated from the end of `buf`.\n             * @param [encoding='utf8'] If `value` is a string, this is the encoding used to determine the binary representation of the string that will be searched for in `buf`.\n             * @return The index of the last occurrence of `value` in `buf`, or `-1` if `buf` does not contain `value`.\n             */\n            lastIndexOf(value: string | number | Uint8Array, byteOffset?: number, encoding?: BufferEncoding): number;\n            /**\n             * Creates and returns an [iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) of `[index, byte]` pairs from the contents\n             * of `buf`.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * // Log the entire contents of a `Buffer`.\n             *\n             * const buf = Buffer.from('buffer');\n             *\n             * for (const pair of buf.entries()) {\n             *   console.log(pair);\n             * }\n             * // Prints:\n             * //   [0, 98]\n             * //   [1, 117]\n             * //   [2, 102]\n             * //   [3, 102]\n             * //   [4, 101]\n             * //   [5, 114]\n             * ```\n             * @since v1.1.0\n             */\n            entries(): IterableIterator<[number, number]>;\n            /**\n             * Equivalent to `buf.indexOf() !== -1`.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.from('this is a buffer');\n             *\n             * console.log(buf.includes('this'));\n             * // Prints: true\n             * console.log(buf.includes('is'));\n             * // Prints: true\n             * console.log(buf.includes(Buffer.from('a buffer')));\n             * // Prints: true\n             * console.log(buf.includes(97));\n             * // Prints: true (97 is the decimal ASCII value for 'a')\n             * console.log(buf.includes(Buffer.from('a buffer example')));\n             * // Prints: false\n             * console.log(buf.includes(Buffer.from('a buffer example').slice(0, 8)));\n             * // Prints: true\n             * console.log(buf.includes('this', 4));\n             * // Prints: false\n             * ```\n             * @since v5.3.0\n             * @param value What to search for.\n             * @param [byteOffset=0] Where to begin searching in `buf`. If negative, then offset is calculated from the end of `buf`.\n             * @param [encoding='utf8'] If `value` is a string, this is its encoding.\n             * @return `true` if `value` was found in `buf`, `false` otherwise.\n             */\n            includes(value: string | number | Buffer, byteOffset?: number, encoding?: BufferEncoding): boolean;\n            /**\n             * Creates and returns an [iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) of `buf` keys (indices).\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.from('buffer');\n             *\n             * for (const key of buf.keys()) {\n             *   console.log(key);\n             * }\n             * // Prints:\n             * //   0\n             * //   1\n             * //   2\n             * //   3\n             * //   4\n             * //   5\n             * ```\n             * @since v1.1.0\n             */\n            keys(): IterableIterator<number>;\n            /**\n             * Creates and returns an [iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) for `buf` values (bytes). This function is\n             * called automatically when a `Buffer` is used in a `for..of` statement.\n             *\n             * ```js\n             * import { Buffer } from 'buffer';\n             *\n             * const buf = Buffer.from('buffer');\n             *\n             * for (const value of buf.values()) {\n             *   console.log(value);\n             * }\n             * // Prints:\n             * //   98\n             * //   117\n             * //   102\n             * //   102\n             * //   101\n             * //   114\n             *\n             * for (const value of buf) {\n             *   console.log(value);\n             * }\n             * // Prints:\n             * //   98\n             * //   117\n             * //   102\n             * //   102\n             * //   101\n             * //   114\n             * ```\n             * @since v1.1.0\n             */\n            values(): IterableIterator<number>;\n        }\n        var Buffer: BufferConstructor;\n        /**\n         * Decodes a string of Base64-encoded data into bytes, and encodes those bytes\n         * into a string using Latin-1 (ISO-8859-1).\n         *\n         * The `data` may be any JavaScript-value that can be coerced into a string.\n         *\n         * **This function is only provided for compatibility with legacy web platform APIs**\n         * **and should never be used in new code, because they use strings to represent**\n         * **binary data and predate the introduction of typed arrays in JavaScript.**\n         * **For code running using Node.js APIs, converting between base64-encoded strings**\n         * **and binary data should be performed using `Buffer.from(str, 'base64')` and`buf.toString('base64')`.**\n         * @since v15.13.0\n         * @deprecated Use `Buffer.from(data, 'base64')` instead.\n         * @param data The Base64-encoded input string.\n         */\n        function atob(data: string): string;\n        /**\n         * Decodes a string into bytes using Latin-1 (ISO-8859), and encodes those bytes\n         * into a string using Base64.\n         *\n         * The `data` may be any JavaScript-value that can be coerced into a string.\n         *\n         * **This function is only provided for compatibility with legacy web platform APIs**\n         * **and should never be used in new code, because they use strings to represent**\n         * **binary data and predate the introduction of typed arrays in JavaScript.**\n         * **For code running using Node.js APIs, converting between base64-encoded strings**\n         * **and binary data should be performed using `Buffer.from(str, 'base64')` and`buf.toString('base64')`.**\n         * @since v15.13.0\n         * @deprecated Use `buf.toString('base64')` instead.\n         * @param data An ASCII (Latin1) string.\n         */\n        function btoa(data: string): string;\n    }\n}\ndeclare module 'node:buffer' {\n    export * from 'buffer';\n}\n"},"./node_modules/raw-loader/dist/cjs.js!./node_modules/@types/node/events.d.ts":function(e,n,t){"use strict";t.r(n),n.default="/**\n * Much of the Node.js core API is built around an idiomatic asynchronous\n * event-driven architecture in which certain kinds of objects (called \"emitters\")\n * emit named events that cause `Function` objects (\"listeners\") to be called.\n *\n * For instance: a `net.Server` object emits an event each time a peer\n * connects to it; a `fs.ReadStream` emits an event when the file is opened;\n * a `stream` emits an event whenever data is available to be read.\n *\n * All objects that emit events are instances of the `EventEmitter` class. These\n * objects expose an `eventEmitter.on()` function that allows one or more\n * functions to be attached to named events emitted by the object. Typically,\n * event names are camel-cased strings but any valid JavaScript property key\n * can be used.\n *\n * When the `EventEmitter` object emits an event, all of the functions attached\n * to that specific event are called _synchronously_. Any values returned by the\n * called listeners are _ignored_ and discarded.\n *\n * The following example shows a simple `EventEmitter` instance with a single\n * listener. The `eventEmitter.on()` method is used to register listeners, while\n * the `eventEmitter.emit()` method is used to trigger the event.\n *\n * ```js\n * const EventEmitter = require('events');\n *\n * class MyEmitter extends EventEmitter {}\n *\n * const myEmitter = new MyEmitter();\n * myEmitter.on('event', () => {\n *   console.log('an event occurred!');\n * });\n * myEmitter.emit('event');\n * ```\n * @see [source](https://github.com/nodejs/node/blob/v16.9.0/lib/events.js)\n */\ndeclare module 'events' {\n    interface EventEmitterOptions {\n        /**\n         * Enables automatic capturing of promise rejection.\n         */\n        captureRejections?: boolean | undefined;\n    }\n    interface NodeEventTarget {\n        once(eventName: string | symbol, listener: (...args: any[]) => void): this;\n    }\n    interface DOMEventTarget {\n        addEventListener(\n            eventName: string,\n            listener: (...args: any[]) => void,\n            opts?: {\n                once: boolean;\n            }\n        ): any;\n    }\n    interface StaticEventEmitterOptions {\n        signal?: AbortSignal | undefined;\n    }\n    interface EventEmitter extends NodeJS.EventEmitter {}\n    /**\n     * The `EventEmitter` class is defined and exposed by the `events` module:\n     *\n     * ```js\n     * const EventEmitter = require('events');\n     * ```\n     *\n     * All `EventEmitter`s emit the event `'newListener'` when new listeners are\n     * added and `'removeListener'` when existing listeners are removed.\n     *\n     * It supports the following option:\n     * @since v0.1.26\n     */\n    class EventEmitter {\n        constructor(options?: EventEmitterOptions);\n        /**\n         * Creates a `Promise` that is fulfilled when the `EventEmitter` emits the given\n         * event or that is rejected if the `EventEmitter` emits `'error'` while waiting.\n         * The `Promise` will resolve with an array of all the arguments emitted to the\n         * given event.\n         *\n         * This method is intentionally generic and works with the web platform [EventTarget](https://dom.spec.whatwg.org/#interface-eventtarget) interface, which has no special`'error'` event\n         * semantics and does not listen to the `'error'` event.\n         *\n         * ```js\n         * const { once, EventEmitter } = require('events');\n         *\n         * async function run() {\n         *   const ee = new EventEmitter();\n         *\n         *   process.nextTick(() => {\n         *     ee.emit('myevent', 42);\n         *   });\n         *\n         *   const [value] = await once(ee, 'myevent');\n         *   console.log(value);\n         *\n         *   const err = new Error('kaboom');\n         *   process.nextTick(() => {\n         *     ee.emit('error', err);\n         *   });\n         *\n         *   try {\n         *     await once(ee, 'myevent');\n         *   } catch (err) {\n         *     console.log('error happened', err);\n         *   }\n         * }\n         *\n         * run();\n         * ```\n         *\n         * The special handling of the `'error'` event is only used when `events.once()`is used to wait for another event. If `events.once()` is used to wait for the\n         * '`error'` event itself, then it is treated as any other kind of event without\n         * special handling:\n         *\n         * ```js\n         * const { EventEmitter, once } = require('events');\n         *\n         * const ee = new EventEmitter();\n         *\n         * once(ee, 'error')\n         *   .then(([err]) => console.log('ok', err.message))\n         *   .catch((err) => console.log('error', err.message));\n         *\n         * ee.emit('error', new Error('boom'));\n         *\n         * // Prints: ok boom\n         * ```\n         *\n         * An `AbortSignal` can be used to cancel waiting for the event:\n         *\n         * ```js\n         * const { EventEmitter, once } = require('events');\n         *\n         * const ee = new EventEmitter();\n         * const ac = new AbortController();\n         *\n         * async function foo(emitter, event, signal) {\n         *   try {\n         *     await once(emitter, event, { signal });\n         *     console.log('event emitted!');\n         *   } catch (error) {\n         *     if (error.name === 'AbortError') {\n         *       console.error('Waiting for the event was canceled!');\n         *     } else {\n         *       console.error('There was an error', error.message);\n         *     }\n         *   }\n         * }\n         *\n         * foo(ee, 'foo', ac.signal);\n         * ac.abort(); // Abort waiting for the event\n         * ee.emit('foo'); // Prints: Waiting for the event was canceled!\n         * ```\n         * @since v11.13.0, v10.16.0\n         */\n        static once(emitter: NodeEventTarget, eventName: string | symbol, options?: StaticEventEmitterOptions): Promise<any[]>;\n        static once(emitter: DOMEventTarget, eventName: string, options?: StaticEventEmitterOptions): Promise<any[]>;\n        /**\n         * ```js\n         * const { on, EventEmitter } = require('events');\n         *\n         * (async () => {\n         *   const ee = new EventEmitter();\n         *\n         *   // Emit later on\n         *   process.nextTick(() => {\n         *     ee.emit('foo', 'bar');\n         *     ee.emit('foo', 42);\n         *   });\n         *\n         *   for await (const event of on(ee, 'foo')) {\n         *     // The execution of this inner block is synchronous and it\n         *     // processes one event at a time (even with await). Do not use\n         *     // if concurrent execution is required.\n         *     console.log(event); // prints ['bar'] [42]\n         *   }\n         *   // Unreachable here\n         * })();\n         * ```\n         *\n         * Returns an `AsyncIterator` that iterates `eventName` events. It will throw\n         * if the `EventEmitter` emits `'error'`. It removes all listeners when\n         * exiting the loop. The `value` returned by each iteration is an array\n         * composed of the emitted event arguments.\n         *\n         * An `AbortSignal` can be used to cancel waiting on events:\n         *\n         * ```js\n         * const { on, EventEmitter } = require('events');\n         * const ac = new AbortController();\n         *\n         * (async () => {\n         *   const ee = new EventEmitter();\n         *\n         *   // Emit later on\n         *   process.nextTick(() => {\n         *     ee.emit('foo', 'bar');\n         *     ee.emit('foo', 42);\n         *   });\n         *\n         *   for await (const event of on(ee, 'foo', { signal: ac.signal })) {\n         *     // The execution of this inner block is synchronous and it\n         *     // processes one event at a time (even with await). Do not use\n         *     // if concurrent execution is required.\n         *     console.log(event); // prints ['bar'] [42]\n         *   }\n         *   // Unreachable here\n         * })();\n         *\n         * process.nextTick(() => ac.abort());\n         * ```\n         * @since v13.6.0, v12.16.0\n         * @param eventName The name of the event being listened for\n         * @return that iterates `eventName` events emitted by the `emitter`\n         */\n        static on(emitter: NodeJS.EventEmitter, eventName: string, options?: StaticEventEmitterOptions): AsyncIterableIterator<any>;\n        /**\n         * A class method that returns the number of listeners for the given `eventName`registered on the given `emitter`.\n         *\n         * ```js\n         * const { EventEmitter, listenerCount } = require('events');\n         * const myEmitter = new EventEmitter();\n         * myEmitter.on('event', () => {});\n         * myEmitter.on('event', () => {});\n         * console.log(listenerCount(myEmitter, 'event'));\n         * // Prints: 2\n         * ```\n         * @since v0.9.12\n         * @deprecated Since v3.2.0 - Use `listenerCount` instead.\n         * @param emitter The emitter to query\n         * @param eventName The event name\n         */\n        static listenerCount(emitter: NodeJS.EventEmitter, eventName: string | symbol): number;\n        /**\n         * Returns a copy of the array of listeners for the event named `eventName`.\n         *\n         * For `EventEmitter`s this behaves exactly the same as calling `.listeners` on\n         * the emitter.\n         *\n         * For `EventTarget`s this is the only way to get the event listeners for the\n         * event target. This is useful for debugging and diagnostic purposes.\n         *\n         * ```js\n         * const { getEventListeners, EventEmitter } = require('events');\n         *\n         * {\n         *   const ee = new EventEmitter();\n         *   const listener = () => console.log('Events are fun');\n         *   ee.on('foo', listener);\n         *   getEventListeners(ee, 'foo'); // [listener]\n         * }\n         * {\n         *   const et = new EventTarget();\n         *   const listener = () => console.log('Events are fun');\n         *   et.addEventListener('foo', listener);\n         *   getEventListeners(et, 'foo'); // [listener]\n         * }\n         * ```\n         * @since v15.2.0\n         */\n        static getEventListeners(emitter: DOMEventTarget | NodeJS.EventEmitter, name: string | symbol): Function[];\n        /**\n         * This symbol shall be used to install a listener for only monitoring `'error'`\n         * events. Listeners installed using this symbol are called before the regular\n         * `'error'` listeners are called.\n         *\n         * Installing a listener using this symbol does not change the behavior once an\n         * `'error'` event is emitted, therefore the process will still crash if no\n         * regular `'error'` listener is installed.\n         */\n        static readonly errorMonitor: unique symbol;\n        static readonly captureRejectionSymbol: unique symbol;\n        /**\n         * Sets or gets the default captureRejection value for all emitters.\n         */\n        // TODO: These should be described using static getter/setter pairs:\n        static captureRejections: boolean;\n        static defaultMaxListeners: number;\n    }\n    import internal = require('node:events');\n    namespace EventEmitter {\n        // Should just be `export { EventEmitter }`, but that doesn't work in TypeScript 3.4\n        export { internal as EventEmitter };\n        export interface Abortable {\n            /**\n             * When provided the corresponding `AbortController` can be used to cancel an asynchronous action.\n             */\n            signal?: AbortSignal | undefined;\n        }\n    }\n    global {\n        namespace NodeJS {\n            interface EventEmitter {\n                /**\n                 * Alias for `emitter.on(eventName, listener)`.\n                 * @since v0.1.26\n                 */\n                addListener(eventName: string | symbol, listener: (...args: any[]) => void): this;\n                /**\n                 * Adds the `listener` function to the end of the listeners array for the\n                 * event named `eventName`. No checks are made to see if the `listener` has\n                 * already been added. Multiple calls passing the same combination of `eventName`and `listener` will result in the `listener` being added, and called, multiple\n                 * times.\n                 *\n                 * ```js\n                 * server.on('connection', (stream) => {\n                 *   console.log('someone connected!');\n                 * });\n                 * ```\n                 *\n                 * Returns a reference to the `EventEmitter`, so that calls can be chained.\n                 *\n                 * By default, event listeners are invoked in the order they are added. The`emitter.prependListener()` method can be used as an alternative to add the\n                 * event listener to the beginning of the listeners array.\n                 *\n                 * ```js\n                 * const myEE = new EventEmitter();\n                 * myEE.on('foo', () => console.log('a'));\n                 * myEE.prependListener('foo', () => console.log('b'));\n                 * myEE.emit('foo');\n                 * // Prints:\n                 * //   b\n                 * //   a\n                 * ```\n                 * @since v0.1.101\n                 * @param eventName The name of the event.\n                 * @param listener The callback function\n                 */\n                on(eventName: string | symbol, listener: (...args: any[]) => void): this;\n                /**\n                 * Adds a **one-time**`listener` function for the event named `eventName`. The\n                 * next time `eventName` is triggered, this listener is removed and then invoked.\n                 *\n                 * ```js\n                 * server.once('connection', (stream) => {\n                 *   console.log('Ah, we have our first user!');\n                 * });\n                 * ```\n                 *\n                 * Returns a reference to the `EventEmitter`, so that calls can be chained.\n                 *\n                 * By default, event listeners are invoked in the order they are added. The`emitter.prependOnceListener()` method can be used as an alternative to add the\n                 * event listener to the beginning of the listeners array.\n                 *\n                 * ```js\n                 * const myEE = new EventEmitter();\n                 * myEE.once('foo', () => console.log('a'));\n                 * myEE.prependOnceListener('foo', () => console.log('b'));\n                 * myEE.emit('foo');\n                 * // Prints:\n                 * //   b\n                 * //   a\n                 * ```\n                 * @since v0.3.0\n                 * @param eventName The name of the event.\n                 * @param listener The callback function\n                 */\n                once(eventName: string | symbol, listener: (...args: any[]) => void): this;\n                /**\n                 * Removes the specified `listener` from the listener array for the event named`eventName`.\n                 *\n                 * ```js\n                 * const callback = (stream) => {\n                 *   console.log('someone connected!');\n                 * };\n                 * server.on('connection', callback);\n                 * // ...\n                 * server.removeListener('connection', callback);\n                 * ```\n                 *\n                 * `removeListener()` will remove, at most, one instance of a listener from the\n                 * listener array. If any single listener has been added multiple times to the\n                 * listener array for the specified `eventName`, then `removeListener()` must be\n                 * called multiple times to remove each instance.\n                 *\n                 * Once an event is emitted, all listeners attached to it at the\n                 * time of emitting are called in order. This implies that any`removeListener()` or `removeAllListeners()` calls _after_ emitting and_before_ the last listener finishes execution will\n                 * not remove them from`emit()` in progress. Subsequent events behave as expected.\n                 *\n                 * ```js\n                 * const myEmitter = new MyEmitter();\n                 *\n                 * const callbackA = () => {\n                 *   console.log('A');\n                 *   myEmitter.removeListener('event', callbackB);\n                 * };\n                 *\n                 * const callbackB = () => {\n                 *   console.log('B');\n                 * };\n                 *\n                 * myEmitter.on('event', callbackA);\n                 *\n                 * myEmitter.on('event', callbackB);\n                 *\n                 * // callbackA removes listener callbackB but it will still be called.\n                 * // Internal listener array at time of emit [callbackA, callbackB]\n                 * myEmitter.emit('event');\n                 * // Prints:\n                 * //   A\n                 * //   B\n                 *\n                 * // callbackB is now removed.\n                 * // Internal listener array [callbackA]\n                 * myEmitter.emit('event');\n                 * // Prints:\n                 * //   A\n                 * ```\n                 *\n                 * Because listeners are managed using an internal array, calling this will\n                 * change the position indices of any listener registered _after_ the listener\n                 * being removed. This will not impact the order in which listeners are called,\n                 * but it means that any copies of the listener array as returned by\n                 * the `emitter.listeners()` method will need to be recreated.\n                 *\n                 * When a single function has been added as a handler multiple times for a single\n                 * event (as in the example below), `removeListener()` will remove the most\n                 * recently added instance. In the example the `once('ping')`listener is removed:\n                 *\n                 * ```js\n                 * const ee = new EventEmitter();\n                 *\n                 * function pong() {\n                 *   console.log('pong');\n                 * }\n                 *\n                 * ee.on('ping', pong);\n                 * ee.once('ping', pong);\n                 * ee.removeListener('ping', pong);\n                 *\n                 * ee.emit('ping');\n                 * ee.emit('ping');\n                 * ```\n                 *\n                 * Returns a reference to the `EventEmitter`, so that calls can be chained.\n                 * @since v0.1.26\n                 */\n                removeListener(eventName: string | symbol, listener: (...args: any[]) => void): this;\n                /**\n                 * Alias for `emitter.removeListener()`.\n                 * @since v10.0.0\n                 */\n                off(eventName: string | symbol, listener: (...args: any[]) => void): this;\n                /**\n                 * Removes all listeners, or those of the specified `eventName`.\n                 *\n                 * It is bad practice to remove listeners added elsewhere in the code,\n                 * particularly when the `EventEmitter` instance was created by some other\n                 * component or module (e.g. sockets or file streams).\n                 *\n                 * Returns a reference to the `EventEmitter`, so that calls can be chained.\n                 * @since v0.1.26\n                 */\n                removeAllListeners(event?: string | symbol): this;\n                /**\n                 * By default `EventEmitter`s will print a warning if more than `10` listeners are\n                 * added for a particular event. This is a useful default that helps finding\n                 * memory leaks. The `emitter.setMaxListeners()` method allows the limit to be\n                 * modified for this specific `EventEmitter` instance. The value can be set to`Infinity` (or `0`) to indicate an unlimited number of listeners.\n                 *\n                 * Returns a reference to the `EventEmitter`, so that calls can be chained.\n                 * @since v0.3.5\n                 */\n                setMaxListeners(n: number): this;\n                /**\n                 * Returns the current max listener value for the `EventEmitter` which is either\n                 * set by `emitter.setMaxListeners(n)` or defaults to {@link defaultMaxListeners}.\n                 * @since v1.0.0\n                 */\n                getMaxListeners(): number;\n                /**\n                 * Returns a copy of the array of listeners for the event named `eventName`.\n                 *\n                 * ```js\n                 * server.on('connection', (stream) => {\n                 *   console.log('someone connected!');\n                 * });\n                 * console.log(util.inspect(server.listeners('connection')));\n                 * // Prints: [ [Function] ]\n                 * ```\n                 * @since v0.1.26\n                 */\n                listeners(eventName: string | symbol): Function[];\n                /**\n                 * Returns a copy of the array of listeners for the event named `eventName`,\n                 * including any wrappers (such as those created by `.once()`).\n                 *\n                 * ```js\n                 * const emitter = new EventEmitter();\n                 * emitter.once('log', () => console.log('log once'));\n                 *\n                 * // Returns a new Array with a function `onceWrapper` which has a property\n                 * // `listener` which contains the original listener bound above\n                 * const listeners = emitter.rawListeners('log');\n                 * const logFnWrapper = listeners[0];\n                 *\n                 * // Logs \"log once\" to the console and does not unbind the `once` event\n                 * logFnWrapper.listener();\n                 *\n                 * // Logs \"log once\" to the console and removes the listener\n                 * logFnWrapper();\n                 *\n                 * emitter.on('log', () => console.log('log persistently'));\n                 * // Will return a new Array with a single function bound by `.on()` above\n                 * const newListeners = emitter.rawListeners('log');\n                 *\n                 * // Logs \"log persistently\" twice\n                 * newListeners[0]();\n                 * emitter.emit('log');\n                 * ```\n                 * @since v9.4.0\n                 */\n                rawListeners(eventName: string | symbol): Function[];\n                /**\n                 * Synchronously calls each of the listeners registered for the event named`eventName`, in the order they were registered, passing the supplied arguments\n                 * to each.\n                 *\n                 * Returns `true` if the event had listeners, `false` otherwise.\n                 *\n                 * ```js\n                 * const EventEmitter = require('events');\n                 * const myEmitter = new EventEmitter();\n                 *\n                 * // First listener\n                 * myEmitter.on('event', function firstListener() {\n                 *   console.log('Helloooo! first listener');\n                 * });\n                 * // Second listener\n                 * myEmitter.on('event', function secondListener(arg1, arg2) {\n                 *   console.log(`event with parameters ${arg1}, ${arg2} in second listener`);\n                 * });\n                 * // Third listener\n                 * myEmitter.on('event', function thirdListener(...args) {\n                 *   const parameters = args.join(', ');\n                 *   console.log(`event with parameters ${parameters} in third listener`);\n                 * });\n                 *\n                 * console.log(myEmitter.listeners('event'));\n                 *\n                 * myEmitter.emit('event', 1, 2, 3, 4, 5);\n                 *\n                 * // Prints:\n                 * // [\n                 * //   [Function: firstListener],\n                 * //   [Function: secondListener],\n                 * //   [Function: thirdListener]\n                 * // ]\n                 * // Helloooo! first listener\n                 * // event with parameters 1, 2 in second listener\n                 * // event with parameters 1, 2, 3, 4, 5 in third listener\n                 * ```\n                 * @since v0.1.26\n                 */\n                emit(eventName: string | symbol, ...args: any[]): boolean;\n                /**\n                 * Returns the number of listeners listening to the event named `eventName`.\n                 * @since v3.2.0\n                 * @param eventName The name of the event being listened for\n                 */\n                listenerCount(eventName: string | symbol): number;\n                /**\n                 * Adds the `listener` function to the _beginning_ of the listeners array for the\n                 * event named `eventName`. No checks are made to see if the `listener` has\n                 * already been added. Multiple calls passing the same combination of `eventName`and `listener` will result in the `listener` being added, and called, multiple\n                 * times.\n                 *\n                 * ```js\n                 * server.prependListener('connection', (stream) => {\n                 *   console.log('someone connected!');\n                 * });\n                 * ```\n                 *\n                 * Returns a reference to the `EventEmitter`, so that calls can be chained.\n                 * @since v6.0.0\n                 * @param eventName The name of the event.\n                 * @param listener The callback function\n                 */\n                prependListener(eventName: string | symbol, listener: (...args: any[]) => void): this;\n                /**\n                 * Adds a **one-time**`listener` function for the event named `eventName` to the_beginning_ of the listeners array. The next time `eventName` is triggered, this\n                 * listener is removed, and then invoked.\n                 *\n                 * ```js\n                 * server.prependOnceListener('connection', (stream) => {\n                 *   console.log('Ah, we have our first user!');\n                 * });\n                 * ```\n                 *\n                 * Returns a reference to the `EventEmitter`, so that calls can be chained.\n                 * @since v6.0.0\n                 * @param eventName The name of the event.\n                 * @param listener The callback function\n                 */\n                prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): this;\n                /**\n                 * Returns an array listing the events for which the emitter has registered\n                 * listeners. The values in the array are strings or `Symbol`s.\n                 *\n                 * ```js\n                 * const EventEmitter = require('events');\n                 * const myEE = new EventEmitter();\n                 * myEE.on('foo', () => {});\n                 * myEE.on('bar', () => {});\n                 *\n                 * const sym = Symbol('symbol');\n                 * myEE.on(sym, () => {});\n                 *\n                 * console.log(myEE.eventNames());\n                 * // Prints: [ 'foo', 'bar', Symbol(symbol) ]\n                 * ```\n                 * @since v6.0.0\n                 */\n                eventNames(): Array<string | symbol>;\n            }\n        }\n    }\n    export = EventEmitter;\n}\ndeclare module 'node:events' {\n    import events = require('events');\n    export = events;\n}\n"},"./node_modules/raw-loader/dist/cjs.js!./node_modules/@types/node/path.d.ts":function(e,n,t){"use strict";t.r(n),n.default="declare module 'path/posix' {\n    import path = require('path');\n    export = path;\n}\ndeclare module 'path/win32' {\n    import path = require('path');\n    export = path;\n}\n/**\n * The `path` module provides utilities for working with file and directory paths.\n * It can be accessed using:\n *\n * ```js\n * const path = require('path');\n * ```\n * @see [source](https://github.com/nodejs/node/blob/v16.9.0/lib/path.js)\n */\ndeclare module 'path' {\n    namespace path {\n        /**\n         * A parsed path object generated by path.parse() or consumed by path.format().\n         */\n        interface ParsedPath {\n            /**\n             * The root of the path such as '/' or 'c:\\'\n             */\n            root: string;\n            /**\n             * The full directory path such as '/home/user/dir' or 'c:\\path\\dir'\n             */\n            dir: string;\n            /**\n             * The file name including extension (if any) such as 'index.html'\n             */\n            base: string;\n            /**\n             * The file extension (if any) such as '.html'\n             */\n            ext: string;\n            /**\n             * The file name without extension (if any) such as 'index'\n             */\n            name: string;\n        }\n        interface FormatInputPathObject {\n            /**\n             * The root of the path such as '/' or 'c:\\'\n             */\n            root?: string | undefined;\n            /**\n             * The full directory path such as '/home/user/dir' or 'c:\\path\\dir'\n             */\n            dir?: string | undefined;\n            /**\n             * The file name including extension (if any) such as 'index.html'\n             */\n            base?: string | undefined;\n            /**\n             * The file extension (if any) such as '.html'\n             */\n            ext?: string | undefined;\n            /**\n             * The file name without extension (if any) such as 'index'\n             */\n            name?: string | undefined;\n        }\n        interface PlatformPath {\n            /**\n             * Normalize a string path, reducing '..' and '.' parts.\n             * When multiple slashes are found, they're replaced by a single one; when the path contains a trailing slash, it is preserved. On Windows backslashes are used.\n             *\n             * @param p string path to normalize.\n             */\n            normalize(p: string): string;\n            /**\n             * Join all arguments together and normalize the resulting path.\n             * Arguments must be strings. In v0.8, non-string arguments were silently ignored. In v0.10 and up, an exception is thrown.\n             *\n             * @param paths paths to join.\n             */\n            join(...paths: string[]): string;\n            /**\n             * The right-most parameter is considered {to}.  Other parameters are considered an array of {from}.\n             *\n             * Starting from leftmost {from} parameter, resolves {to} to an absolute path.\n             *\n             * If {to} isn't already absolute, {from} arguments are prepended in right to left order,\n             * until an absolute path is found. If after using all {from} paths still no absolute path is found,\n             * the current working directory is used as well. The resulting path is normalized,\n             * and trailing slashes are removed unless the path gets resolved to the root directory.\n             *\n             * @param pathSegments string paths to join.  Non-string arguments are ignored.\n             */\n            resolve(...pathSegments: string[]): string;\n            /**\n             * Determines whether {path} is an absolute path. An absolute path will always resolve to the same location, regardless of the working directory.\n             *\n             * @param path path to test.\n             */\n            isAbsolute(p: string): boolean;\n            /**\n             * Solve the relative path from {from} to {to}.\n             * At times we have two absolute paths, and we need to derive the relative path from one to the other. This is actually the reverse transform of path.resolve.\n             */\n            relative(from: string, to: string): string;\n            /**\n             * Return the directory name of a path. Similar to the Unix dirname command.\n             *\n             * @param p the path to evaluate.\n             */\n            dirname(p: string): string;\n            /**\n             * Return the last portion of a path. Similar to the Unix basename command.\n             * Often used to extract the file name from a fully qualified path.\n             *\n             * @param p the path to evaluate.\n             * @param ext optionally, an extension to remove from the result.\n             */\n            basename(p: string, ext?: string): string;\n            /**\n             * Return the extension of the path, from the last '.' to end of string in the last portion of the path.\n             * If there is no '.' in the last portion of the path or the first character of it is '.', then it returns an empty string\n             *\n             * @param p the path to evaluate.\n             */\n            extname(p: string): string;\n            /**\n             * The platform-specific file separator. '\\\\' or '/'.\n             */\n            readonly sep: string;\n            /**\n             * The platform-specific file delimiter. ';' or ':'.\n             */\n            readonly delimiter: string;\n            /**\n             * Returns an object from a path string - the opposite of format().\n             *\n             * @param pathString path to evaluate.\n             */\n            parse(p: string): ParsedPath;\n            /**\n             * Returns a path string from an object - the opposite of parse().\n             *\n             * @param pathString path to evaluate.\n             */\n            format(pP: FormatInputPathObject): string;\n            /**\n             * On Windows systems only, returns an equivalent namespace-prefixed path for the given path.\n             * If path is not a string, path will be returned without modifications.\n             * This method is meaningful only on Windows system.\n             * On POSIX systems, the method is non-operational and always returns path without modifications.\n             */\n            toNamespacedPath(path: string): string;\n            /**\n             * Posix specific pathing.\n             * Same as parent object on posix.\n             */\n            readonly posix: PlatformPath;\n            /**\n             * Windows specific pathing.\n             * Same as parent object on windows\n             */\n            readonly win32: PlatformPath;\n        }\n    }\n    const path: path.PlatformPath;\n    export = path;\n}\ndeclare module 'node:path' {\n    import path = require('path');\n    export = path;\n}\n"},"./node_modules/raw-loader/dist/cjs.js!./node_modules/@types/node/punycode.d.ts":function(e,n,t){"use strict";t.r(n),n.default="/**\n * **The version of the punycode module bundled in Node.js is being deprecated.**In a future major version of Node.js this module will be removed. Users\n * currently depending on the `punycode` module should switch to using the\n * userland-provided [Punycode.js](https://github.com/bestiejs/punycode.js) module instead. For punycode-based URL\n * encoding, see `url.domainToASCII` or, more generally, the `WHATWG URL API`.\n *\n * The `punycode` module is a bundled version of the [Punycode.js](https://github.com/bestiejs/punycode.js) module. It\n * can be accessed using:\n *\n * ```js\n * const punycode = require('punycode');\n * ```\n *\n * [Punycode](https://tools.ietf.org/html/rfc3492) is a character encoding scheme defined by RFC 3492 that is\n * primarily intended for use in Internationalized Domain Names. Because host\n * names in URLs are limited to ASCII characters only, Domain Names that contain\n * non-ASCII characters must be converted into ASCII using the Punycode scheme.\n * For instance, the Japanese character that translates into the English word,`'example'` is `'例'`. The Internationalized Domain Name, `'例.com'` (equivalent\n * to `'example.com'`) is represented by Punycode as the ASCII string`'xn--fsq.com'`.\n *\n * The `punycode` module provides a simple implementation of the Punycode standard.\n *\n * The `punycode` module is a third-party dependency used by Node.js and\n * made available to developers as a convenience. Fixes or other modifications to\n * the module must be directed to the [Punycode.js](https://github.com/bestiejs/punycode.js) project.\n * @deprecated Since v7.0.0 - Deprecated\n * @see [source](https://github.com/nodejs/node/blob/v16.9.0/lib/punycode.js)\n */\ndeclare module 'punycode' {\n    /**\n     * The `punycode.decode()` method converts a [Punycode](https://tools.ietf.org/html/rfc3492) string of ASCII-only\n     * characters to the equivalent string of Unicode codepoints.\n     *\n     * ```js\n     * punycode.decode('maana-pta'); // 'mañana'\n     * punycode.decode('--dqo34k'); // '☃-⌘'\n     * ```\n     * @since v0.5.1\n     */\n    function decode(string: string): string;\n    /**\n     * The `punycode.encode()` method converts a string of Unicode codepoints to a [Punycode](https://tools.ietf.org/html/rfc3492) string of ASCII-only characters.\n     *\n     * ```js\n     * punycode.encode('mañana'); // 'maana-pta'\n     * punycode.encode('☃-⌘'); // '--dqo34k'\n     * ```\n     * @since v0.5.1\n     */\n    function encode(string: string): string;\n    /**\n     * The `punycode.toUnicode()` method converts a string representing a domain name\n     * containing [Punycode](https://tools.ietf.org/html/rfc3492) encoded characters into Unicode. Only the [Punycode](https://tools.ietf.org/html/rfc3492) encoded parts of the domain name are be\n     * converted.\n     *\n     * ```js\n     * // decode domain names\n     * punycode.toUnicode('xn--maana-pta.com'); // 'mañana.com'\n     * punycode.toUnicode('xn----dqo34k.com');  // '☃-⌘.com'\n     * punycode.toUnicode('example.com');       // 'example.com'\n     * ```\n     * @since v0.6.1\n     */\n    function toUnicode(domain: string): string;\n    /**\n     * The `punycode.toASCII()` method converts a Unicode string representing an\n     * Internationalized Domain Name to [Punycode](https://tools.ietf.org/html/rfc3492). Only the non-ASCII parts of the\n     * domain name will be converted. Calling `punycode.toASCII()` on a string that\n     * already only contains ASCII characters will have no effect.\n     *\n     * ```js\n     * // encode domain names\n     * punycode.toASCII('mañana.com');  // 'xn--maana-pta.com'\n     * punycode.toASCII('☃-⌘.com');   // 'xn----dqo34k.com'\n     * punycode.toASCII('example.com'); // 'example.com'\n     * ```\n     * @since v0.6.1\n     */\n    function toASCII(domain: string): string;\n    /**\n     * @deprecated since v7.0.0\n     * The version of the punycode module bundled in Node.js is being deprecated.\n     * In a future major version of Node.js this module will be removed.\n     * Users currently depending on the punycode module should switch to using\n     * the userland-provided Punycode.js module instead.\n     */\n    const ucs2: ucs2;\n    interface ucs2 {\n        /**\n         * @deprecated since v7.0.0\n         * The version of the punycode module bundled in Node.js is being deprecated.\n         * In a future major version of Node.js this module will be removed.\n         * Users currently depending on the punycode module should switch to using\n         * the userland-provided Punycode.js module instead.\n         */\n        decode(string: string): number[];\n        /**\n         * @deprecated since v7.0.0\n         * The version of the punycode module bundled in Node.js is being deprecated.\n         * In a future major version of Node.js this module will be removed.\n         * Users currently depending on the punycode module should switch to using\n         * the userland-provided Punycode.js module instead.\n         */\n        encode(codePoints: ReadonlyArray<number>): string;\n    }\n    /**\n     * @deprecated since v7.0.0\n     * The version of the punycode module bundled in Node.js is being deprecated.\n     * In a future major version of Node.js this module will be removed.\n     * Users currently depending on the punycode module should switch to using\n     * the userland-provided Punycode.js module instead.\n     */\n    const version: string;\n}\ndeclare module 'node:punycode' {\n    export * from 'punycode';\n}\n"},"./node_modules/raw-loader/dist/cjs.js!./node_modules/@types/node/querystring.d.ts":function(e,n,t){"use strict";t.r(n),n.default="/**\n * The `querystring` module provides utilities for parsing and formatting URL\n * query strings. It can be accessed using:\n *\n * ```js\n * const querystring = require('querystring');\n * ```\n *\n * The `querystring` API is considered Legacy. While it is still maintained,\n * new code should use the `URLSearchParams` API instead.\n * @deprecated Legacy\n * @see [source](https://github.com/nodejs/node/blob/v16.9.0/lib/querystring.js)\n */\ndeclare module 'querystring' {\n    interface StringifyOptions {\n        encodeURIComponent?: ((str: string) => string) | undefined;\n    }\n    interface ParseOptions {\n        maxKeys?: number | undefined;\n        decodeURIComponent?: ((str: string) => string) | undefined;\n    }\n    interface ParsedUrlQuery extends NodeJS.Dict<string | string[]> {}\n    interface ParsedUrlQueryInput extends NodeJS.Dict<string | number | boolean | ReadonlyArray<string> | ReadonlyArray<number> | ReadonlyArray<boolean> | null> {}\n    /**\n     * The `querystring.stringify()` method produces a URL query string from a\n     * given `obj` by iterating through the object's \"own properties\".\n     *\n     * It serializes the following types of values passed in `obj`:[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type) |\n     * [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type) |\n     * [bigint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) |\n     * [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type) |\n     * [string\\[\\]](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type) |\n     * [number\\[\\]](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type) |\n     * [bigint\\[\\]](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) |\n     * [boolean\\[\\]](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type) The numeric values must be finite. Any other input values will be coerced to\n     * empty strings.\n     *\n     * ```js\n     * querystring.stringify({ foo: 'bar', baz: ['qux', 'quux'], corge: '' });\n     * // Returns 'foo=bar&#x26;baz=qux&#x26;baz=quux&#x26;corge='\n     *\n     * querystring.stringify({ foo: 'bar', baz: 'qux' }, ';', ':');\n     * // Returns 'foo:bar;baz:qux'\n     * ```\n     *\n     * By default, characters requiring percent-encoding within the query string will\n     * be encoded as UTF-8\\. If an alternative encoding is required, then an alternative`encodeURIComponent` option will need to be specified:\n     *\n     * ```js\n     * // Assuming gbkEncodeURIComponent function already exists,\n     *\n     * querystring.stringify({ w: '中文', foo: 'bar' }, null, null,\n     *                       { encodeURIComponent: gbkEncodeURIComponent });\n     * ```\n     * @since v0.1.25\n     * @param obj The object to serialize into a URL query string\n     * @param [sep='&'] The substring used to delimit key and value pairs in the query string.\n     * @param [eq='='] . The substring used to delimit keys and values in the query string.\n     */\n    function stringify(obj?: ParsedUrlQueryInput, sep?: string, eq?: string, options?: StringifyOptions): string;\n    /**\n     * The `querystring.parse()` method parses a URL query string (`str`) into a\n     * collection of key and value pairs.\n     *\n     * For example, the query string `'foo=bar&#x26;abc=xyz&#x26;abc=123'` is parsed into:\n     *\n     * ```js\n     * {\n     *   foo: 'bar',\n     *   abc: ['xyz', '123']\n     * }\n     * ```\n     *\n     * The object returned by the `querystring.parse()` method _does not_prototypically inherit from the JavaScript `Object`. This means that typical`Object` methods such as `obj.toString()`,\n     * `obj.hasOwnProperty()`, and others\n     * are not defined and _will not work_.\n     *\n     * By default, percent-encoded characters within the query string will be assumed\n     * to use UTF-8 encoding. If an alternative character encoding is used, then an\n     * alternative `decodeURIComponent` option will need to be specified:\n     *\n     * ```js\n     * // Assuming gbkDecodeURIComponent function already exists...\n     *\n     * querystring.parse('w=%D6%D0%CE%C4&#x26;foo=bar', null, null,\n     *                   { decodeURIComponent: gbkDecodeURIComponent });\n     * ```\n     * @since v0.1.25\n     * @param str The URL query string to parse\n     * @param [sep='&'] The substring used to delimit key and value pairs in the query string.\n     * @param [eq='='] . The substring used to delimit keys and values in the query string.\n     */\n    function parse(str: string, sep?: string, eq?: string, options?: ParseOptions): ParsedUrlQuery;\n    /**\n     * The querystring.encode() function is an alias for querystring.stringify().\n     */\n    const encode: typeof stringify;\n    /**\n     * The querystring.decode() function is an alias for querystring.parse().\n     */\n    const decode: typeof parse;\n    /**\n     * The `querystring.escape()` method performs URL percent-encoding on the given`str` in a manner that is optimized for the specific requirements of URL\n     * query strings.\n     *\n     * The `querystring.escape()` method is used by `querystring.stringify()` and is\n     * generally not expected to be used directly. It is exported primarily to allow\n     * application code to provide a replacement percent-encoding implementation if\n     * necessary by assigning `querystring.escape` to an alternative function.\n     * @since v0.1.25\n     */\n    function escape(str: string): string;\n    /**\n     * The `querystring.unescape()` method performs decoding of URL percent-encoded\n     * characters on the given `str`.\n     *\n     * The `querystring.unescape()` method is used by `querystring.parse()` and is\n     * generally not expected to be used directly. It is exported primarily to allow\n     * application code to provide a replacement decoding implementation if\n     * necessary by assigning `querystring.unescape` to an alternative function.\n     *\n     * By default, the `querystring.unescape()` method will attempt to use the\n     * JavaScript built-in `decodeURIComponent()` method to decode. If that fails,\n     * a safer equivalent that does not throw on malformed URLs will be used.\n     * @since v0.1.25\n     */\n    function unescape(str: string): string;\n}\ndeclare module 'node:querystring' {\n    export * from 'querystring';\n}\n"},"./node_modules/raw-loader/dist/cjs.js!./node_modules/@types/node/stream.d.ts":function(e,n,t){"use strict";t.r(n),n.default="/**\n * A stream is an abstract interface for working with streaming data in Node.js.\n * The `stream` module provides an API for implementing the stream interface.\n *\n * There are many stream objects provided by Node.js. For instance, a `request to an HTTP server` and `process.stdout` are both stream instances.\n *\n * Streams can be readable, writable, or both. All streams are instances of `EventEmitter`.\n *\n * To access the `stream` module:\n *\n * ```js\n * const stream = require('stream');\n * ```\n *\n * The `stream` module is useful for creating new types of stream instances. It is\n * usually not necessary to use the `stream` module to consume streams.\n * @see [source](https://github.com/nodejs/node/blob/v16.9.0/lib/stream.js)\n */\ndeclare module 'stream' {\n    import { EventEmitter, Abortable } from 'node:events';\n    import * as streamPromises from 'node:stream/promises';\n    import * as streamConsumers from 'node:stream/consumers';\n    class internal extends EventEmitter {\n        pipe<T extends NodeJS.WritableStream>(\n            destination: T,\n            options?: {\n                end?: boolean | undefined;\n            }\n        ): T;\n    }\n    namespace internal {\n        class Stream extends internal {\n            constructor(opts?: ReadableOptions);\n        }\n        interface StreamOptions<T extends Stream> extends Abortable {\n            emitClose?: boolean | undefined;\n            highWaterMark?: number | undefined;\n            objectMode?: boolean | undefined;\n            construct?(this: T, callback: (error?: Error | null) => void): void;\n            destroy?(this: T, error: Error | null, callback: (error: Error | null) => void): void;\n            autoDestroy?: boolean | undefined;\n        }\n        interface ReadableOptions extends StreamOptions<Readable> {\n            encoding?: BufferEncoding | undefined;\n            read?(this: Readable, size: number): void;\n        }\n        /**\n         * @since v0.9.4\n         */\n        class Readable extends Stream implements NodeJS.ReadableStream {\n            /**\n             * A utility method for creating Readable Streams out of iterators.\n             */\n            static from(iterable: Iterable<any> | AsyncIterable<any>, options?: ReadableOptions): Readable;\n            /**\n             * Returns whether the stream has been read from or cancelled.\n             * @since v16.8.0\n             */\n            static isDisturbed(stream: Readable | NodeJS.ReadableStream): boolean;\n            /**\n             * Returns whether the stream was destroyed or errored before emitting `'end'`.\n             * @since v16.8.0\n             * @experimental\n             */\n            readonly readableAborted: boolean;\n            /**\n             * Is `true` if it is safe to call `readable.read()`, which means\n             * the stream has not been destroyed or emitted `'error'` or `'end'`.\n             * @since v11.4.0\n             */\n            readable: boolean;\n            /**\n             * Returns whether `'data'` has been emitted.\n             * @since v16.7.0\n             * @experimental\n             */\n            readonly readableDidRead: boolean;\n            /**\n             * Getter for the property `encoding` of a given `Readable` stream. The `encoding`property can be set using the `readable.setEncoding()` method.\n             * @since v12.7.0\n             */\n            readonly readableEncoding: BufferEncoding | null;\n            /**\n             * Becomes `true` when `'end'` event is emitted.\n             * @since v12.9.0\n             */\n            readonly readableEnded: boolean;\n            /**\n             * This property reflects the current state of a `Readable` stream as described\n             * in the `Three states` section.\n             * @since v9.4.0\n             */\n            readonly readableFlowing: boolean | null;\n            /**\n             * Returns the value of `highWaterMark` passed when creating this `Readable`.\n             * @since v9.3.0\n             */\n            readonly readableHighWaterMark: number;\n            /**\n             * This property contains the number of bytes (or objects) in the queue\n             * ready to be read. The value provides introspection data regarding\n             * the status of the `highWaterMark`.\n             * @since v9.4.0\n             */\n            readonly readableLength: number;\n            /**\n             * Getter for the property `objectMode` of a given `Readable` stream.\n             * @since v12.3.0\n             */\n            readonly readableObjectMode: boolean;\n            /**\n             * Is `true` after `readable.destroy()` has been called.\n             * @since v8.0.0\n             */\n            destroyed: boolean;\n            constructor(opts?: ReadableOptions);\n            _construct?(callback: (error?: Error | null) => void): void;\n            _read(size: number): void;\n            /**\n             * The `readable.read()` method pulls some data out of the internal buffer and\n             * returns it. If no data available to be read, `null` is returned. By default,\n             * the data will be returned as a `Buffer` object unless an encoding has been\n             * specified using the `readable.setEncoding()` method or the stream is operating\n             * in object mode.\n             *\n             * The optional `size` argument specifies a specific number of bytes to read. If`size` bytes are not available to be read, `null` will be returned _unless_the stream has ended, in which\n             * case all of the data remaining in the internal\n             * buffer will be returned.\n             *\n             * If the `size` argument is not specified, all of the data contained in the\n             * internal buffer will be returned.\n             *\n             * The `size` argument must be less than or equal to 1 GiB.\n             *\n             * The `readable.read()` method should only be called on `Readable` streams\n             * operating in paused mode. In flowing mode, `readable.read()` is called\n             * automatically until the internal buffer is fully drained.\n             *\n             * ```js\n             * const readable = getReadableStreamSomehow();\n             *\n             * // 'readable' may be triggered multiple times as data is buffered in\n             * readable.on('readable', () => {\n             *   let chunk;\n             *   console.log('Stream is readable (new data received in buffer)');\n             *   // Use a loop to make sure we read all currently available data\n             *   while (null !== (chunk = readable.read())) {\n             *     console.log(`Read ${chunk.length} bytes of data...`);\n             *   }\n             * });\n             *\n             * // 'end' will be triggered once when there is no more data available\n             * readable.on('end', () => {\n             *   console.log('Reached end of stream.');\n             * });\n             * ```\n             *\n             * Each call to `readable.read()` returns a chunk of data, or `null`. The chunks\n             * are not concatenated. A `while` loop is necessary to consume all data\n             * currently in the buffer. When reading a large file `.read()` may return `null`,\n             * having consumed all buffered content so far, but there is still more data to\n             * come not yet buffered. In this case a new `'readable'` event will be emitted\n             * when there is more data in the buffer. Finally the `'end'` event will be\n             * emitted when there is no more data to come.\n             *\n             * Therefore to read a file's whole contents from a `readable`, it is necessary\n             * to collect chunks across multiple `'readable'` events:\n             *\n             * ```js\n             * const chunks = [];\n             *\n             * readable.on('readable', () => {\n             *   let chunk;\n             *   while (null !== (chunk = readable.read())) {\n             *     chunks.push(chunk);\n             *   }\n             * });\n             *\n             * readable.on('end', () => {\n             *   const content = chunks.join('');\n             * });\n             * ```\n             *\n             * A `Readable` stream in object mode will always return a single item from\n             * a call to `readable.read(size)`, regardless of the value of the`size` argument.\n             *\n             * If the `readable.read()` method returns a chunk of data, a `'data'` event will\n             * also be emitted.\n             *\n             * Calling {@link read} after the `'end'` event has\n             * been emitted will return `null`. No runtime error will be raised.\n             * @since v0.9.4\n             * @param size Optional argument to specify how much data to read.\n             */\n            read(size?: number): any;\n            /**\n             * The `readable.setEncoding()` method sets the character encoding for\n             * data read from the `Readable` stream.\n             *\n             * By default, no encoding is assigned and stream data will be returned as`Buffer` objects. Setting an encoding causes the stream data\n             * to be returned as strings of the specified encoding rather than as `Buffer`objects. For instance, calling `readable.setEncoding('utf8')` will cause the\n             * output data to be interpreted as UTF-8 data, and passed as strings. Calling`readable.setEncoding('hex')` will cause the data to be encoded in hexadecimal\n             * string format.\n             *\n             * The `Readable` stream will properly handle multi-byte characters delivered\n             * through the stream that would otherwise become improperly decoded if simply\n             * pulled from the stream as `Buffer` objects.\n             *\n             * ```js\n             * const readable = getReadableStreamSomehow();\n             * readable.setEncoding('utf8');\n             * readable.on('data', (chunk) => {\n             *   assert.equal(typeof chunk, 'string');\n             *   console.log('Got %d characters of string data:', chunk.length);\n             * });\n             * ```\n             * @since v0.9.4\n             * @param encoding The encoding to use.\n             */\n            setEncoding(encoding: BufferEncoding): this;\n            /**\n             * The `readable.pause()` method will cause a stream in flowing mode to stop\n             * emitting `'data'` events, switching out of flowing mode. Any data that\n             * becomes available will remain in the internal buffer.\n             *\n             * ```js\n             * const readable = getReadableStreamSomehow();\n             * readable.on('data', (chunk) => {\n             *   console.log(`Received ${chunk.length} bytes of data.`);\n             *   readable.pause();\n             *   console.log('There will be no additional data for 1 second.');\n             *   setTimeout(() => {\n             *     console.log('Now data will start flowing again.');\n             *     readable.resume();\n             *   }, 1000);\n             * });\n             * ```\n             *\n             * The `readable.pause()` method has no effect if there is a `'readable'`event listener.\n             * @since v0.9.4\n             */\n            pause(): this;\n            /**\n             * The `readable.resume()` method causes an explicitly paused `Readable` stream to\n             * resume emitting `'data'` events, switching the stream into flowing mode.\n             *\n             * The `readable.resume()` method can be used to fully consume the data from a\n             * stream without actually processing any of that data:\n             *\n             * ```js\n             * getReadableStreamSomehow()\n             *   .resume()\n             *   .on('end', () => {\n             *     console.log('Reached the end, but did not read anything.');\n             *   });\n             * ```\n             *\n             * The `readable.resume()` method has no effect if there is a `'readable'`event listener.\n             * @since v0.9.4\n             */\n            resume(): this;\n            /**\n             * The `readable.isPaused()` method returns the current operating state of the`Readable`. This is used primarily by the mechanism that underlies the`readable.pipe()` method. In most\n             * typical cases, there will be no reason to\n             * use this method directly.\n             *\n             * ```js\n             * const readable = new stream.Readable();\n             *\n             * readable.isPaused(); // === false\n             * readable.pause();\n             * readable.isPaused(); // === true\n             * readable.resume();\n             * readable.isPaused(); // === false\n             * ```\n             * @since v0.11.14\n             */\n            isPaused(): boolean;\n            /**\n             * The `readable.unpipe()` method detaches a `Writable` stream previously attached\n             * using the {@link pipe} method.\n             *\n             * If the `destination` is not specified, then _all_ pipes are detached.\n             *\n             * If the `destination` is specified, but no pipe is set up for it, then\n             * the method does nothing.\n             *\n             * ```js\n             * const fs = require('fs');\n             * const readable = getReadableStreamSomehow();\n             * const writable = fs.createWriteStream('file.txt');\n             * // All the data from readable goes into 'file.txt',\n             * // but only for the first second.\n             * readable.pipe(writable);\n             * setTimeout(() => {\n             *   console.log('Stop writing to file.txt.');\n             *   readable.unpipe(writable);\n             *   console.log('Manually close the file stream.');\n             *   writable.end();\n             * }, 1000);\n             * ```\n             * @since v0.9.4\n             * @param destination Optional specific stream to unpipe\n             */\n            unpipe(destination?: NodeJS.WritableStream): this;\n            /**\n             * Passing `chunk` as `null` signals the end of the stream (EOF) and behaves the\n             * same as `readable.push(null)`, after which no more data can be written. The EOF\n             * signal is put at the end of the buffer and any buffered data will still be\n             * flushed.\n             *\n             * The `readable.unshift()` method pushes a chunk of data back into the internal\n             * buffer. This is useful in certain situations where a stream is being consumed by\n             * code that needs to \"un-consume\" some amount of data that it has optimistically\n             * pulled out of the source, so that the data can be passed on to some other party.\n             *\n             * The `stream.unshift(chunk)` method cannot be called after the `'end'` event\n             * has been emitted or a runtime error will be thrown.\n             *\n             * Developers using `stream.unshift()` often should consider switching to\n             * use of a `Transform` stream instead. See the `API for stream implementers` section for more information.\n             *\n             * ```js\n             * // Pull off a header delimited by \\n\\n.\n             * // Use unshift() if we get too much.\n             * // Call the callback with (error, header, stream).\n             * const { StringDecoder } = require('string_decoder');\n             * function parseHeader(stream, callback) {\n             *   stream.on('error', callback);\n             *   stream.on('readable', onReadable);\n             *   const decoder = new StringDecoder('utf8');\n             *   let header = '';\n             *   function onReadable() {\n             *     let chunk;\n             *     while (null !== (chunk = stream.read())) {\n             *       const str = decoder.write(chunk);\n             *       if (str.match(/\\n\\n/)) {\n             *         // Found the header boundary.\n             *         const split = str.split(/\\n\\n/);\n             *         header += split.shift();\n             *         const remaining = split.join('\\n\\n');\n             *         const buf = Buffer.from(remaining, 'utf8');\n             *         stream.removeListener('error', callback);\n             *         // Remove the 'readable' listener before unshifting.\n             *         stream.removeListener('readable', onReadable);\n             *         if (buf.length)\n             *           stream.unshift(buf);\n             *         // Now the body of the message can be read from the stream.\n             *         callback(null, header, stream);\n             *       } else {\n             *         // Still reading the header.\n             *         header += str;\n             *       }\n             *     }\n             *   }\n             * }\n             * ```\n             *\n             * Unlike {@link push}, `stream.unshift(chunk)` will not\n             * end the reading process by resetting the internal reading state of the stream.\n             * This can cause unexpected results if `readable.unshift()` is called during a\n             * read (i.e. from within a {@link _read} implementation on a\n             * custom stream). Following the call to `readable.unshift()` with an immediate {@link push} will reset the reading state appropriately,\n             * however it is best to simply avoid calling `readable.unshift()` while in the\n             * process of performing a read.\n             * @since v0.9.11\n             * @param chunk Chunk of data to unshift onto the read queue. For streams not operating in object mode, `chunk` must be a string, `Buffer`, `Uint8Array` or `null`. For object mode\n             * streams, `chunk` may be any JavaScript value.\n             * @param encoding Encoding of string chunks. Must be a valid `Buffer` encoding, such as `'utf8'` or `'ascii'`.\n             */\n            unshift(chunk: any, encoding?: BufferEncoding): void;\n            /**\n             * Prior to Node.js 0.10, streams did not implement the entire `stream` module API\n             * as it is currently defined. (See `Compatibility` for more information.)\n             *\n             * When using an older Node.js library that emits `'data'` events and has a {@link pause} method that is advisory only, the`readable.wrap()` method can be used to create a `Readable`\n             * stream that uses\n             * the old stream as its data source.\n             *\n             * It will rarely be necessary to use `readable.wrap()` but the method has been\n             * provided as a convenience for interacting with older Node.js applications and\n             * libraries.\n             *\n             * ```js\n             * const { OldReader } = require('./old-api-module.js');\n             * const { Readable } = require('stream');\n             * const oreader = new OldReader();\n             * const myReader = new Readable().wrap(oreader);\n             *\n             * myReader.on('readable', () => {\n             *   myReader.read(); // etc.\n             * });\n             * ```\n             * @since v0.9.4\n             * @param stream An \"old style\" readable stream\n             */\n            wrap(stream: NodeJS.ReadableStream): this;\n            push(chunk: any, encoding?: BufferEncoding): boolean;\n            _destroy(error: Error | null, callback: (error?: Error | null) => void): void;\n            /**\n             * Destroy the stream. Optionally emit an `'error'` event, and emit a `'close'`event (unless `emitClose` is set to `false`). After this call, the readable\n             * stream will release any internal resources and subsequent calls to `push()`will be ignored.\n             *\n             * Once `destroy()` has been called any further calls will be a no-op and no\n             * further errors except from `_destroy()` may be emitted as `'error'`.\n             *\n             * Implementors should not override this method, but instead implement `readable._destroy()`.\n             * @since v8.0.0\n             * @param error Error which will be passed as payload in `'error'` event\n             */\n            destroy(error?: Error): void;\n            /**\n             * Event emitter\n             * The defined events on documents including:\n             * 1. close\n             * 2. data\n             * 3. end\n             * 4. error\n             * 5. pause\n             * 6. readable\n             * 7. resume\n             */\n            addListener(event: 'close', listener: () => void): this;\n            addListener(event: 'data', listener: (chunk: any) => void): this;\n            addListener(event: 'end', listener: () => void): this;\n            addListener(event: 'error', listener: (err: Error) => void): this;\n            addListener(event: 'pause', listener: () => void): this;\n            addListener(event: 'readable', listener: () => void): this;\n            addListener(event: 'resume', listener: () => void): this;\n            addListener(event: string | symbol, listener: (...args: any[]) => void): this;\n            emit(event: 'close'): boolean;\n            emit(event: 'data', chunk: any): boolean;\n            emit(event: 'end'): boolean;\n            emit(event: 'error', err: Error): boolean;\n            emit(event: 'pause'): boolean;\n            emit(event: 'readable'): boolean;\n            emit(event: 'resume'): boolean;\n            emit(event: string | symbol, ...args: any[]): boolean;\n            on(event: 'close', listener: () => void): this;\n            on(event: 'data', listener: (chunk: any) => void): this;\n            on(event: 'end', listener: () => void): this;\n            on(event: 'error', listener: (err: Error) => void): this;\n            on(event: 'pause', listener: () => void): this;\n            on(event: 'readable', listener: () => void): this;\n            on(event: 'resume', listener: () => void): this;\n            on(event: string | symbol, listener: (...args: any[]) => void): this;\n            once(event: 'close', listener: () => void): this;\n            once(event: 'data', listener: (chunk: any) => void): this;\n            once(event: 'end', listener: () => void): this;\n            once(event: 'error', listener: (err: Error) => void): this;\n            once(event: 'pause', listener: () => void): this;\n            once(event: 'readable', listener: () => void): this;\n            once(event: 'resume', listener: () => void): this;\n            once(event: string | symbol, listener: (...args: any[]) => void): this;\n            prependListener(event: 'close', listener: () => void): this;\n            prependListener(event: 'data', listener: (chunk: any) => void): this;\n            prependListener(event: 'end', listener: () => void): this;\n            prependListener(event: 'error', listener: (err: Error) => void): this;\n            prependListener(event: 'pause', listener: () => void): this;\n            prependListener(event: 'readable', listener: () => void): this;\n            prependListener(event: 'resume', listener: () => void): this;\n            prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\n            prependOnceListener(event: 'close', listener: () => void): this;\n            prependOnceListener(event: 'data', listener: (chunk: any) => void): this;\n            prependOnceListener(event: 'end', listener: () => void): this;\n            prependOnceListener(event: 'error', listener: (err: Error) => void): this;\n            prependOnceListener(event: 'pause', listener: () => void): this;\n            prependOnceListener(event: 'readable', listener: () => void): this;\n            prependOnceListener(event: 'resume', listener: () => void): this;\n            prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\n            removeListener(event: 'close', listener: () => void): this;\n            removeListener(event: 'data', listener: (chunk: any) => void): this;\n            removeListener(event: 'end', listener: () => void): this;\n            removeListener(event: 'error', listener: (err: Error) => void): this;\n            removeListener(event: 'pause', listener: () => void): this;\n            removeListener(event: 'readable', listener: () => void): this;\n            removeListener(event: 'resume', listener: () => void): this;\n            removeListener(event: string | symbol, listener: (...args: any[]) => void): this;\n            [Symbol.asyncIterator](): AsyncIterableIterator<any>;\n        }\n        interface WritableOptions extends StreamOptions<Writable> {\n            decodeStrings?: boolean | undefined;\n            defaultEncoding?: BufferEncoding | undefined;\n            write?(this: Writable, chunk: any, encoding: BufferEncoding, callback: (error?: Error | null) => void): void;\n            writev?(\n                this: Writable,\n                chunks: Array<{\n                    chunk: any;\n                    encoding: BufferEncoding;\n                }>,\n                callback: (error?: Error | null) => void\n            ): void;\n            final?(this: Writable, callback: (error?: Error | null) => void): void;\n        }\n        /**\n         * @since v0.9.4\n         */\n        class Writable extends Stream implements NodeJS.WritableStream {\n            /**\n             * Is `true` if it is safe to call `writable.write()`, which means\n             * the stream has not been destroyed, errored or ended.\n             * @since v11.4.0\n             */\n            readonly writable: boolean;\n            /**\n             * Is `true` after `writable.end()` has been called. This property\n             * does not indicate whether the data has been flushed, for this use `writable.writableFinished` instead.\n             * @since v12.9.0\n             */\n            readonly writableEnded: boolean;\n            /**\n             * Is set to `true` immediately before the `'finish'` event is emitted.\n             * @since v12.6.0\n             */\n            readonly writableFinished: boolean;\n            /**\n             * Return the value of `highWaterMark` passed when creating this `Writable`.\n             * @since v9.3.0\n             */\n            readonly writableHighWaterMark: number;\n            /**\n             * This property contains the number of bytes (or objects) in the queue\n             * ready to be written. The value provides introspection data regarding\n             * the status of the `highWaterMark`.\n             * @since v9.4.0\n             */\n            readonly writableLength: number;\n            /**\n             * Getter for the property `objectMode` of a given `Writable` stream.\n             * @since v12.3.0\n             */\n            readonly writableObjectMode: boolean;\n            /**\n             * Number of times `writable.uncork()` needs to be\n             * called in order to fully uncork the stream.\n             * @since v13.2.0, v12.16.0\n             */\n            readonly writableCorked: number;\n            /**\n             * Is `true` after `writable.destroy()` has been called.\n             * @since v8.0.0\n             */\n            destroyed: boolean;\n            constructor(opts?: WritableOptions);\n            _write(chunk: any, encoding: BufferEncoding, callback: (error?: Error | null) => void): void;\n            _writev?(\n                chunks: Array<{\n                    chunk: any;\n                    encoding: BufferEncoding;\n                }>,\n                callback: (error?: Error | null) => void\n            ): void;\n            _construct?(callback: (error?: Error | null) => void): void;\n            _destroy(error: Error | null, callback: (error?: Error | null) => void): void;\n            _final(callback: (error?: Error | null) => void): void;\n            /**\n             * The `writable.write()` method writes some data to the stream, and calls the\n             * supplied `callback` once the data has been fully handled. If an error\n             * occurs, the `callback` will be called with the error as its\n             * first argument. The `callback` is called asynchronously and before `'error'` is\n             * emitted.\n             *\n             * The return value is `true` if the internal buffer is less than the`highWaterMark` configured when the stream was created after admitting `chunk`.\n             * If `false` is returned, further attempts to write data to the stream should\n             * stop until the `'drain'` event is emitted.\n             *\n             * While a stream is not draining, calls to `write()` will buffer `chunk`, and\n             * return false. Once all currently buffered chunks are drained (accepted for\n             * delivery by the operating system), the `'drain'` event will be emitted.\n             * It is recommended that once `write()` returns false, no more chunks be written\n             * until the `'drain'` event is emitted. While calling `write()` on a stream that\n             * is not draining is allowed, Node.js will buffer all written chunks until\n             * maximum memory usage occurs, at which point it will abort unconditionally.\n             * Even before it aborts, high memory usage will cause poor garbage collector\n             * performance and high RSS (which is not typically released back to the system,\n             * even after the memory is no longer required). Since TCP sockets may never\n             * drain if the remote peer does not read the data, writing a socket that is\n             * not draining may lead to a remotely exploitable vulnerability.\n             *\n             * Writing data while the stream is not draining is particularly\n             * problematic for a `Transform`, because the `Transform` streams are paused\n             * by default until they are piped or a `'data'` or `'readable'` event handler\n             * is added.\n             *\n             * If the data to be written can be generated or fetched on demand, it is\n             * recommended to encapsulate the logic into a `Readable` and use {@link pipe}. However, if calling `write()` is preferred, it is\n             * possible to respect backpressure and avoid memory issues using the `'drain'` event:\n             *\n             * ```js\n             * function write(data, cb) {\n             *   if (!stream.write(data)) {\n             *     stream.once('drain', cb);\n             *   } else {\n             *     process.nextTick(cb);\n             *   }\n             * }\n             *\n             * // Wait for cb to be called before doing any other write.\n             * write('hello', () => {\n             *   console.log('Write completed, do more writes now.');\n             * });\n             * ```\n             *\n             * A `Writable` stream in object mode will always ignore the `encoding` argument.\n             * @since v0.9.4\n             * @param chunk Optional data to write. For streams not operating in object mode, `chunk` must be a string, `Buffer` or `Uint8Array`. For object mode streams, `chunk` may be any\n             * JavaScript value other than `null`.\n             * @param [encoding='utf8'] The encoding, if `chunk` is a string.\n             * @param callback Callback for when this chunk of data is flushed.\n             * @return `false` if the stream wishes for the calling code to wait for the `'drain'` event to be emitted before continuing to write additional data; otherwise `true`.\n             */\n            write(chunk: any, callback?: (error: Error | null | undefined) => void): boolean;\n            write(chunk: any, encoding: BufferEncoding, callback?: (error: Error | null | undefined) => void): boolean;\n            /**\n             * The `writable.setDefaultEncoding()` method sets the default `encoding` for a `Writable` stream.\n             * @since v0.11.15\n             * @param encoding The new default encoding\n             */\n            setDefaultEncoding(encoding: BufferEncoding): this;\n            /**\n             * Calling the `writable.end()` method signals that no more data will be written\n             * to the `Writable`. The optional `chunk` and `encoding` arguments allow one\n             * final additional chunk of data to be written immediately before closing the\n             * stream.\n             *\n             * Calling the {@link write} method after calling {@link end} will raise an error.\n             *\n             * ```js\n             * // Write 'hello, ' and then end with 'world!'.\n             * const fs = require('fs');\n             * const file = fs.createWriteStream('example.txt');\n             * file.write('hello, ');\n             * file.end('world!');\n             * // Writing more now is not allowed!\n             * ```\n             * @since v0.9.4\n             * @param chunk Optional data to write. For streams not operating in object mode, `chunk` must be a string, `Buffer` or `Uint8Array`. For object mode streams, `chunk` may be any\n             * JavaScript value other than `null`.\n             * @param encoding The encoding if `chunk` is a string\n             * @param callback Callback for when the stream is finished.\n             */\n            end(cb?: () => void): void;\n            end(chunk: any, cb?: () => void): void;\n            end(chunk: any, encoding: BufferEncoding, cb?: () => void): void;\n            /**\n             * The `writable.cork()` method forces all written data to be buffered in memory.\n             * The buffered data will be flushed when either the {@link uncork} or {@link end} methods are called.\n             *\n             * The primary intent of `writable.cork()` is to accommodate a situation in which\n             * several small chunks are written to the stream in rapid succession. Instead of\n             * immediately forwarding them to the underlying destination, `writable.cork()`buffers all the chunks until `writable.uncork()` is called, which will pass them\n             * all to `writable._writev()`, if present. This prevents a head-of-line blocking\n             * situation where data is being buffered while waiting for the first small chunk\n             * to be processed. However, use of `writable.cork()` without implementing`writable._writev()` may have an adverse effect on throughput.\n             *\n             * See also: `writable.uncork()`, `writable._writev()`.\n             * @since v0.11.2\n             */\n            cork(): void;\n            /**\n             * The `writable.uncork()` method flushes all data buffered since {@link cork} was called.\n             *\n             * When using `writable.cork()` and `writable.uncork()` to manage the buffering\n             * of writes to a stream, it is recommended that calls to `writable.uncork()` be\n             * deferred using `process.nextTick()`. Doing so allows batching of all`writable.write()` calls that occur within a given Node.js event loop phase.\n             *\n             * ```js\n             * stream.cork();\n             * stream.write('some ');\n             * stream.write('data ');\n             * process.nextTick(() => stream.uncork());\n             * ```\n             *\n             * If the `writable.cork()` method is called multiple times on a stream, the\n             * same number of calls to `writable.uncork()` must be called to flush the buffered\n             * data.\n             *\n             * ```js\n             * stream.cork();\n             * stream.write('some ');\n             * stream.cork();\n             * stream.write('data ');\n             * process.nextTick(() => {\n             *   stream.uncork();\n             *   // The data will not be flushed until uncork() is called a second time.\n             *   stream.uncork();\n             * });\n             * ```\n             *\n             * See also: `writable.cork()`.\n             * @since v0.11.2\n             */\n            uncork(): void;\n            /**\n             * Destroy the stream. Optionally emit an `'error'` event, and emit a `'close'`event (unless `emitClose` is set to `false`). After this call, the writable\n             * stream has ended and subsequent calls to `write()` or `end()` will result in\n             * an `ERR_STREAM_DESTROYED` error.\n             * This is a destructive and immediate way to destroy a stream. Previous calls to`write()` may not have drained, and may trigger an `ERR_STREAM_DESTROYED` error.\n             * Use `end()` instead of destroy if data should flush before close, or wait for\n             * the `'drain'` event before destroying the stream.\n             *\n             * Once `destroy()` has been called any further calls will be a no-op and no\n             * further errors except from `_destroy()` may be emitted as `'error'`.\n             *\n             * Implementors should not override this method,\n             * but instead implement `writable._destroy()`.\n             * @since v8.0.0\n             * @param error Optional, an error to emit with `'error'` event.\n             */\n            destroy(error?: Error): void;\n            /**\n             * Event emitter\n             * The defined events on documents including:\n             * 1. close\n             * 2. drain\n             * 3. error\n             * 4. finish\n             * 5. pipe\n             * 6. unpipe\n             */\n            addListener(event: 'close', listener: () => void): this;\n            addListener(event: 'drain', listener: () => void): this;\n            addListener(event: 'error', listener: (err: Error) => void): this;\n            addListener(event: 'finish', listener: () => void): this;\n            addListener(event: 'pipe', listener: (src: Readable) => void): this;\n            addListener(event: 'unpipe', listener: (src: Readable) => void): this;\n            addListener(event: string | symbol, listener: (...args: any[]) => void): this;\n            emit(event: 'close'): boolean;\n            emit(event: 'drain'): boolean;\n            emit(event: 'error', err: Error): boolean;\n            emit(event: 'finish'): boolean;\n            emit(event: 'pipe', src: Readable): boolean;\n            emit(event: 'unpipe', src: Readable): boolean;\n            emit(event: string | symbol, ...args: any[]): boolean;\n            on(event: 'close', listener: () => void): this;\n            on(event: 'drain', listener: () => void): this;\n            on(event: 'error', listener: (err: Error) => void): this;\n            on(event: 'finish', listener: () => void): this;\n            on(event: 'pipe', listener: (src: Readable) => void): this;\n            on(event: 'unpipe', listener: (src: Readable) => void): this;\n            on(event: string | symbol, listener: (...args: any[]) => void): this;\n            once(event: 'close', listener: () => void): this;\n            once(event: 'drain', listener: () => void): this;\n            once(event: 'error', listener: (err: Error) => void): this;\n            once(event: 'finish', listener: () => void): this;\n            once(event: 'pipe', listener: (src: Readable) => void): this;\n            once(event: 'unpipe', listener: (src: Readable) => void): this;\n            once(event: string | symbol, listener: (...args: any[]) => void): this;\n            prependListener(event: 'close', listener: () => void): this;\n            prependListener(event: 'drain', listener: () => void): this;\n            prependListener(event: 'error', listener: (err: Error) => void): this;\n            prependListener(event: 'finish', listener: () => void): this;\n            prependListener(event: 'pipe', listener: (src: Readable) => void): this;\n            prependListener(event: 'unpipe', listener: (src: Readable) => void): this;\n            prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\n            prependOnceListener(event: 'close', listener: () => void): this;\n            prependOnceListener(event: 'drain', listener: () => void): this;\n            prependOnceListener(event: 'error', listener: (err: Error) => void): this;\n            prependOnceListener(event: 'finish', listener: () => void): this;\n            prependOnceListener(event: 'pipe', listener: (src: Readable) => void): this;\n            prependOnceListener(event: 'unpipe', listener: (src: Readable) => void): this;\n            prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\n            removeListener(event: 'close', listener: () => void): this;\n            removeListener(event: 'drain', listener: () => void): this;\n            removeListener(event: 'error', listener: (err: Error) => void): this;\n            removeListener(event: 'finish', listener: () => void): this;\n            removeListener(event: 'pipe', listener: (src: Readable) => void): this;\n            removeListener(event: 'unpipe', listener: (src: Readable) => void): this;\n            removeListener(event: string | symbol, listener: (...args: any[]) => void): this;\n        }\n        interface DuplexOptions extends ReadableOptions, WritableOptions {\n            allowHalfOpen?: boolean | undefined;\n            readableObjectMode?: boolean | undefined;\n            writableObjectMode?: boolean | undefined;\n            readableHighWaterMark?: number | undefined;\n            writableHighWaterMark?: number | undefined;\n            writableCorked?: number | undefined;\n            construct?(this: Duplex, callback: (error?: Error | null) => void): void;\n            read?(this: Duplex, size: number): void;\n            write?(this: Duplex, chunk: any, encoding: BufferEncoding, callback: (error?: Error | null) => void): void;\n            writev?(\n                this: Duplex,\n                chunks: Array<{\n                    chunk: any;\n                    encoding: BufferEncoding;\n                }>,\n                callback: (error?: Error | null) => void\n            ): void;\n            final?(this: Duplex, callback: (error?: Error | null) => void): void;\n            destroy?(this: Duplex, error: Error | null, callback: (error: Error | null) => void): void;\n        }\n        /**\n         * Duplex streams are streams that implement both the `Readable` and `Writable` interfaces.\n         *\n         * Examples of `Duplex` streams include:\n         *\n         * * `TCP sockets`\n         * * `zlib streams`\n         * * `crypto streams`\n         * @since v0.9.4\n         */\n        class Duplex extends Readable implements Writable {\n            readonly writable: boolean;\n            readonly writableEnded: boolean;\n            readonly writableFinished: boolean;\n            readonly writableHighWaterMark: number;\n            readonly writableLength: number;\n            readonly writableObjectMode: boolean;\n            readonly writableCorked: number;\n            /**\n             * If `false` then the stream will automatically end the writable side when the\n             * readable side ends. Set initially by the `allowHalfOpen` constructor option,\n             * which defaults to `false`.\n             *\n             * This can be changed manually to change the half-open behavior of an existing`Duplex` stream instance, but must be changed before the `'end'` event is\n             * emitted.\n             * @since v0.9.4\n             */\n            allowHalfOpen: boolean;\n            constructor(opts?: DuplexOptions);\n            /**\n             * A utility method for creating duplex streams.\n             *\n             * - `Stream` converts writable stream into writable `Duplex` and readable stream\n             *   to `Duplex`.\n             * - `Blob` converts into readable `Duplex`.\n             * - `string` converts into readable `Duplex`.\n             * - `ArrayBuffer` converts into readable `Duplex`.\n             * - `AsyncIterable` converts into a readable `Duplex`. Cannot yield `null`.\n             * - `AsyncGeneratorFunction` converts into a readable/writable transform\n             *   `Duplex`. Must take a source `AsyncIterable` as first parameter. Cannot yield\n             *   `null`.\n             * - `AsyncFunction` converts into a writable `Duplex`. Must return\n             *   either `null` or `undefined`\n             * - `Object ({ writable, readable })` converts `readable` and\n             *   `writable` into `Stream` and then combines them into `Duplex` where the\n             *   `Duplex` will write to the `writable` and read from the `readable`.\n             * - `Promise` converts into readable `Duplex`. Value `null` is ignored.\n             *\n             * @since v16.8.0\n             */\n            static from(src: Stream | Blob | ArrayBuffer | string | Iterable<any> | AsyncIterable<any> | AsyncGeneratorFunction | Promise<any> | Object): Duplex;\n            _write(chunk: any, encoding: BufferEncoding, callback: (error?: Error | null) => void): void;\n            _writev?(\n                chunks: Array<{\n                    chunk: any;\n                    encoding: BufferEncoding;\n                }>,\n                callback: (error?: Error | null) => void\n            ): void;\n            _destroy(error: Error | null, callback: (error: Error | null) => void): void;\n            _final(callback: (error?: Error | null) => void): void;\n            write(chunk: any, encoding?: BufferEncoding, cb?: (error: Error | null | undefined) => void): boolean;\n            write(chunk: any, cb?: (error: Error | null | undefined) => void): boolean;\n            setDefaultEncoding(encoding: BufferEncoding): this;\n            end(cb?: () => void): void;\n            end(chunk: any, cb?: () => void): void;\n            end(chunk: any, encoding?: BufferEncoding, cb?: () => void): void;\n            cork(): void;\n            uncork(): void;\n        }\n        type TransformCallback = (error?: Error | null, data?: any) => void;\n        interface TransformOptions extends DuplexOptions {\n            construct?(this: Transform, callback: (error?: Error | null) => void): void;\n            read?(this: Transform, size: number): void;\n            write?(this: Transform, chunk: any, encoding: BufferEncoding, callback: (error?: Error | null) => void): void;\n            writev?(\n                this: Transform,\n                chunks: Array<{\n                    chunk: any;\n                    encoding: BufferEncoding;\n                }>,\n                callback: (error?: Error | null) => void\n            ): void;\n            final?(this: Transform, callback: (error?: Error | null) => void): void;\n            destroy?(this: Transform, error: Error | null, callback: (error: Error | null) => void): void;\n            transform?(this: Transform, chunk: any, encoding: BufferEncoding, callback: TransformCallback): void;\n            flush?(this: Transform, callback: TransformCallback): void;\n        }\n        /**\n         * Transform streams are `Duplex` streams where the output is in some way\n         * related to the input. Like all `Duplex` streams, `Transform` streams\n         * implement both the `Readable` and `Writable` interfaces.\n         *\n         * Examples of `Transform` streams include:\n         *\n         * * `zlib streams`\n         * * `crypto streams`\n         * @since v0.9.4\n         */\n        class Transform extends Duplex {\n            constructor(opts?: TransformOptions);\n            _transform(chunk: any, encoding: BufferEncoding, callback: TransformCallback): void;\n            _flush(callback: TransformCallback): void;\n        }\n        /**\n         * The `stream.PassThrough` class is a trivial implementation of a `Transform` stream that simply passes the input bytes across to the output. Its purpose is\n         * primarily for examples and testing, but there are some use cases where`stream.PassThrough` is useful as a building block for novel sorts of streams.\n         */\n        class PassThrough extends Transform {}\n        /**\n         * Attaches an AbortSignal to a readable or writeable stream. This lets code\n         * control stream destruction using an `AbortController`.\n         *\n         * Calling `abort` on the `AbortController` corresponding to the passed`AbortSignal` will behave the same way as calling `.destroy(new AbortError())`on the stream.\n         *\n         * ```js\n         * const fs = require('fs');\n         *\n         * const controller = new AbortController();\n         * const read = addAbortSignal(\n         *   controller.signal,\n         *   fs.createReadStream(('object.json'))\n         * );\n         * // Later, abort the operation closing the stream\n         * controller.abort();\n         * ```\n         *\n         * Or using an `AbortSignal` with a readable stream as an async iterable:\n         *\n         * ```js\n         * const controller = new AbortController();\n         * setTimeout(() => controller.abort(), 10_000); // set a timeout\n         * const stream = addAbortSignal(\n         *   controller.signal,\n         *   fs.createReadStream(('object.json'))\n         * );\n         * (async () => {\n         *   try {\n         *     for await (const chunk of stream) {\n         *       await process(chunk);\n         *     }\n         *   } catch (e) {\n         *     if (e.name === 'AbortError') {\n         *       // The operation was cancelled\n         *     } else {\n         *       throw e;\n         *     }\n         *   }\n         * })();\n         * ```\n         * @since v15.4.0\n         * @param signal A signal representing possible cancellation\n         * @param stream a stream to attach a signal to\n         */\n        function addAbortSignal<T extends Stream>(signal: AbortSignal, stream: T): T;\n        interface FinishedOptions extends Abortable {\n            error?: boolean | undefined;\n            readable?: boolean | undefined;\n            writable?: boolean | undefined;\n        }\n        /**\n         * A function to get notified when a stream is no longer readable, writable\n         * or has experienced an error or a premature close event.\n         *\n         * ```js\n         * const { finished } = require('stream');\n         *\n         * const rs = fs.createReadStream('archive.tar');\n         *\n         * finished(rs, (err) => {\n         *   if (err) {\n         *     console.error('Stream failed.', err);\n         *   } else {\n         *     console.log('Stream is done reading.');\n         *   }\n         * });\n         *\n         * rs.resume(); // Drain the stream.\n         * ```\n         *\n         * Especially useful in error handling scenarios where a stream is destroyed\n         * prematurely (like an aborted HTTP request), and will not emit `'end'`or `'finish'`.\n         *\n         * The `finished` API provides promise version:\n         *\n         * ```js\n         * const { finished } = require('stream/promises');\n         *\n         * const rs = fs.createReadStream('archive.tar');\n         *\n         * async function run() {\n         *   await finished(rs);\n         *   console.log('Stream is done reading.');\n         * }\n         *\n         * run().catch(console.error);\n         * rs.resume(); // Drain the stream.\n         * ```\n         *\n         * `stream.finished()` leaves dangling event listeners (in particular`'error'`, `'end'`, `'finish'` and `'close'`) after `callback` has been\n         * invoked. The reason for this is so that unexpected `'error'` events (due to\n         * incorrect stream implementations) do not cause unexpected crashes.\n         * If this is unwanted behavior then the returned cleanup function needs to be\n         * invoked in the callback:\n         *\n         * ```js\n         * const cleanup = finished(rs, (err) => {\n         *   cleanup();\n         *   // ...\n         * });\n         * ```\n         * @since v10.0.0\n         * @param stream A readable and/or writable stream.\n         * @param callback A callback function that takes an optional error argument.\n         * @return A cleanup function which removes all registered listeners.\n         */\n        function finished(stream: NodeJS.ReadableStream | NodeJS.WritableStream | NodeJS.ReadWriteStream, options: FinishedOptions, callback: (err?: NodeJS.ErrnoException | null) => void): () => void;\n        function finished(stream: NodeJS.ReadableStream | NodeJS.WritableStream | NodeJS.ReadWriteStream, callback: (err?: NodeJS.ErrnoException | null) => void): () => void;\n        namespace finished {\n            function __promisify__(stream: NodeJS.ReadableStream | NodeJS.WritableStream | NodeJS.ReadWriteStream, options?: FinishedOptions): Promise<void>;\n        }\n        type PipelineSourceFunction<T> = () => Iterable<T> | AsyncIterable<T>;\n        type PipelineSource<T> = Iterable<T> | AsyncIterable<T> | NodeJS.ReadableStream | PipelineSourceFunction<T>;\n        type PipelineTransform<S extends PipelineTransformSource<any>, U> =\n            | NodeJS.ReadWriteStream\n            | ((source: S extends (...args: any[]) => Iterable<infer ST> | AsyncIterable<infer ST> ? AsyncIterable<ST> : S) => AsyncIterable<U>);\n        type PipelineTransformSource<T> = PipelineSource<T> | PipelineTransform<any, T>;\n        type PipelineDestinationIterableFunction<T> = (source: AsyncIterable<T>) => AsyncIterable<any>;\n        type PipelineDestinationPromiseFunction<T, P> = (source: AsyncIterable<T>) => Promise<P>;\n        type PipelineDestination<S extends PipelineTransformSource<any>, P> = S extends PipelineTransformSource<infer ST>\n            ? NodeJS.WritableStream | PipelineDestinationIterableFunction<ST> | PipelineDestinationPromiseFunction<ST, P>\n            : never;\n        type PipelineCallback<S extends PipelineDestination<any, any>> = S extends PipelineDestinationPromiseFunction<any, infer P>\n            ? (err: NodeJS.ErrnoException | null, value: P) => void\n            : (err: NodeJS.ErrnoException | null) => void;\n        type PipelinePromise<S extends PipelineDestination<any, any>> = S extends PipelineDestinationPromiseFunction<any, infer P> ? Promise<P> : Promise<void>;\n        interface PipelineOptions {\n            signal: AbortSignal;\n        }\n        /**\n         * A module method to pipe between streams and generators forwarding errors and\n         * properly cleaning up and provide a callback when the pipeline is complete.\n         *\n         * ```js\n         * const { pipeline } = require('stream');\n         * const fs = require('fs');\n         * const zlib = require('zlib');\n         *\n         * // Use the pipeline API to easily pipe a series of streams\n         * // together and get notified when the pipeline is fully done.\n         *\n         * // A pipeline to gzip a potentially huge tar file efficiently:\n         *\n         * pipeline(\n         *   fs.createReadStream('archive.tar'),\n         *   zlib.createGzip(),\n         *   fs.createWriteStream('archive.tar.gz'),\n         *   (err) => {\n         *     if (err) {\n         *       console.error('Pipeline failed.', err);\n         *     } else {\n         *       console.log('Pipeline succeeded.');\n         *     }\n         *   }\n         * );\n         * ```\n         *\n         * The `pipeline` API provides a promise version, which can also\n         * receive an options argument as the last parameter with a`signal` `AbortSignal` property. When the signal is aborted,`destroy` will be called on the underlying pipeline, with\n         * an`AbortError`.\n         *\n         * ```js\n         * const { pipeline } = require('stream/promises');\n         *\n         * async function run() {\n         *   await pipeline(\n         *     fs.createReadStream('archive.tar'),\n         *     zlib.createGzip(),\n         *     fs.createWriteStream('archive.tar.gz')\n         *   );\n         *   console.log('Pipeline succeeded.');\n         * }\n         *\n         * run().catch(console.error);\n         * ```\n         *\n         * To use an `AbortSignal`, pass it inside an options object,\n         * as the last argument:\n         *\n         * ```js\n         * const { pipeline } = require('stream/promises');\n         *\n         * async function run() {\n         *   const ac = new AbortController();\n         *   const signal = ac.signal;\n         *\n         *   setTimeout(() => ac.abort(), 1);\n         *   await pipeline(\n         *     fs.createReadStream('archive.tar'),\n         *     zlib.createGzip(),\n         *     fs.createWriteStream('archive.tar.gz'),\n         *     { signal },\n         *   );\n         * }\n         *\n         * run().catch(console.error); // AbortError\n         * ```\n         *\n         * The `pipeline` API also supports async generators:\n         *\n         * ```js\n         * const { pipeline } = require('stream/promises');\n         * const fs = require('fs');\n         *\n         * async function run() {\n         *   await pipeline(\n         *     fs.createReadStream('lowercase.txt'),\n         *     async function* (source, signal) {\n         *       source.setEncoding('utf8');  // Work with strings rather than `Buffer`s.\n         *       for await (const chunk of source) {\n         *         yield await processChunk(chunk, { signal });\n         *       }\n         *     },\n         *     fs.createWriteStream('uppercase.txt')\n         *   );\n         *   console.log('Pipeline succeeded.');\n         * }\n         *\n         * run().catch(console.error);\n         * ```\n         *\n         * Remember to handle the `signal` argument passed into the async generator.\n         * Especially in the case where the async generator is the source for the\n         * pipeline (i.e. first argument) or the pipeline will never complete.\n         *\n         * ```js\n         * const { pipeline } = require('stream/promises');\n         * const fs = require('fs');\n         *\n         * async function run() {\n         *   await pipeline(\n         *     async function * (signal) {\n         *       await someLongRunningfn({ signal });\n         *       yield 'asd';\n         *     },\n         *     fs.createWriteStream('uppercase.txt')\n         *   );\n         *   console.log('Pipeline succeeded.');\n         * }\n         *\n         * run().catch(console.error);\n         * ```\n         *\n         * `stream.pipeline()` will call `stream.destroy(err)` on all streams except:\n         *\n         * * `Readable` streams which have emitted `'end'` or `'close'`.\n         * * `Writable` streams which have emitted `'finish'` or `'close'`.\n         *\n         * `stream.pipeline()` leaves dangling event listeners on the streams\n         * after the `callback` has been invoked. In the case of reuse of streams after\n         * failure, this can cause event listener leaks and swallowed errors.\n         * @since v10.0.0\n         * @param callback Called when the pipeline is fully done.\n         */\n        function pipeline<A extends PipelineSource<any>, B extends PipelineDestination<A, any>>(\n            source: A,\n            destination: B,\n            callback?: PipelineCallback<B>\n        ): B extends NodeJS.WritableStream ? B : NodeJS.WritableStream;\n        function pipeline<A extends PipelineSource<any>, T1 extends PipelineTransform<A, any>, B extends PipelineDestination<T1, any>>(\n            source: A,\n            transform1: T1,\n            destination: B,\n            callback?: PipelineCallback<B>\n        ): B extends NodeJS.WritableStream ? B : NodeJS.WritableStream;\n        function pipeline<A extends PipelineSource<any>, T1 extends PipelineTransform<A, any>, T2 extends PipelineTransform<T1, any>, B extends PipelineDestination<T2, any>>(\n            source: A,\n            transform1: T1,\n            transform2: T2,\n            destination: B,\n            callback?: PipelineCallback<B>\n        ): B extends NodeJS.WritableStream ? B : NodeJS.WritableStream;\n        function pipeline<\n            A extends PipelineSource<any>,\n            T1 extends PipelineTransform<A, any>,\n            T2 extends PipelineTransform<T1, any>,\n            T3 extends PipelineTransform<T2, any>,\n            B extends PipelineDestination<T3, any>\n        >(source: A, transform1: T1, transform2: T2, transform3: T3, destination: B, callback?: PipelineCallback<B>): B extends NodeJS.WritableStream ? B : NodeJS.WritableStream;\n        function pipeline<\n            A extends PipelineSource<any>,\n            T1 extends PipelineTransform<A, any>,\n            T2 extends PipelineTransform<T1, any>,\n            T3 extends PipelineTransform<T2, any>,\n            T4 extends PipelineTransform<T3, any>,\n            B extends PipelineDestination<T4, any>\n        >(source: A, transform1: T1, transform2: T2, transform3: T3, transform4: T4, destination: B, callback?: PipelineCallback<B>): B extends NodeJS.WritableStream ? B : NodeJS.WritableStream;\n        function pipeline(\n            streams: ReadonlyArray<NodeJS.ReadableStream | NodeJS.WritableStream | NodeJS.ReadWriteStream>,\n            callback?: (err: NodeJS.ErrnoException | null) => void\n        ): NodeJS.WritableStream;\n        function pipeline(\n            stream1: NodeJS.ReadableStream,\n            stream2: NodeJS.ReadWriteStream | NodeJS.WritableStream,\n            ...streams: Array<NodeJS.ReadWriteStream | NodeJS.WritableStream | ((err: NodeJS.ErrnoException | null) => void)>\n        ): NodeJS.WritableStream;\n        namespace pipeline {\n            function __promisify__<A extends PipelineSource<any>, B extends PipelineDestination<A, any>>(source: A, destination: B, options?: PipelineOptions): PipelinePromise<B>;\n            function __promisify__<A extends PipelineSource<any>, T1 extends PipelineTransform<A, any>, B extends PipelineDestination<T1, any>>(\n                source: A,\n                transform1: T1,\n                destination: B,\n                options?: PipelineOptions\n            ): PipelinePromise<B>;\n            function __promisify__<A extends PipelineSource<any>, T1 extends PipelineTransform<A, any>, T2 extends PipelineTransform<T1, any>, B extends PipelineDestination<T2, any>>(\n                source: A,\n                transform1: T1,\n                transform2: T2,\n                destination: B,\n                options?: PipelineOptions\n            ): PipelinePromise<B>;\n            function __promisify__<\n                A extends PipelineSource<any>,\n                T1 extends PipelineTransform<A, any>,\n                T2 extends PipelineTransform<T1, any>,\n                T3 extends PipelineTransform<T2, any>,\n                B extends PipelineDestination<T3, any>\n            >(source: A, transform1: T1, transform2: T2, transform3: T3, destination: B, options?: PipelineOptions): PipelinePromise<B>;\n            function __promisify__<\n                A extends PipelineSource<any>,\n                T1 extends PipelineTransform<A, any>,\n                T2 extends PipelineTransform<T1, any>,\n                T3 extends PipelineTransform<T2, any>,\n                T4 extends PipelineTransform<T3, any>,\n                B extends PipelineDestination<T4, any>\n            >(source: A, transform1: T1, transform2: T2, transform3: T3, transform4: T4, destination: B, options?: PipelineOptions): PipelinePromise<B>;\n            function __promisify__(streams: ReadonlyArray<NodeJS.ReadableStream | NodeJS.WritableStream | NodeJS.ReadWriteStream>, options?: PipelineOptions): Promise<void>;\n            function __promisify__(\n                stream1: NodeJS.ReadableStream,\n                stream2: NodeJS.ReadWriteStream | NodeJS.WritableStream,\n                ...streams: Array<NodeJS.ReadWriteStream | NodeJS.WritableStream | PipelineOptions>\n            ): Promise<void>;\n        }\n        interface Pipe {\n            close(): void;\n            hasRef(): boolean;\n            ref(): void;\n            unref(): void;\n        }\n        const promises: typeof streamPromises;\n        const consumers: typeof streamConsumers;\n    }\n    export = internal;\n}\ndeclare module 'node:stream' {\n    import stream = require('stream');\n    export = stream;\n}\n"},"./node_modules/raw-loader/dist/cjs.js!./node_modules/@types/node/string_decoder.d.ts":function(e,n,t){"use strict";t.r(n),n.default="/**\n * The `string_decoder` module provides an API for decoding `Buffer` objects into\n * strings in a manner that preserves encoded multi-byte UTF-8 and UTF-16\n * characters. It can be accessed using:\n *\n * ```js\n * const { StringDecoder } = require('string_decoder');\n * ```\n *\n * The following example shows the basic use of the `StringDecoder` class.\n *\n * ```js\n * const { StringDecoder } = require('string_decoder');\n * const decoder = new StringDecoder('utf8');\n *\n * const cent = Buffer.from([0xC2, 0xA2]);\n * console.log(decoder.write(cent));\n *\n * const euro = Buffer.from([0xE2, 0x82, 0xAC]);\n * console.log(decoder.write(euro));\n * ```\n *\n * When a `Buffer` instance is written to the `StringDecoder` instance, an\n * internal buffer is used to ensure that the decoded string does not contain\n * any incomplete multibyte characters. These are held in the buffer until the\n * next call to `stringDecoder.write()` or until `stringDecoder.end()` is called.\n *\n * In the following example, the three UTF-8 encoded bytes of the European Euro\n * symbol (`€`) are written over three separate operations:\n *\n * ```js\n * const { StringDecoder } = require('string_decoder');\n * const decoder = new StringDecoder('utf8');\n *\n * decoder.write(Buffer.from([0xE2]));\n * decoder.write(Buffer.from([0x82]));\n * console.log(decoder.end(Buffer.from([0xAC])));\n * ```\n * @see [source](https://github.com/nodejs/node/blob/v16.9.0/lib/string_decoder.js)\n */\ndeclare module 'string_decoder' {\n    class StringDecoder {\n        constructor(encoding?: BufferEncoding);\n        /**\n         * Returns a decoded string, ensuring that any incomplete multibyte characters at\n         * the end of the `Buffer`, or `TypedArray`, or `DataView` are omitted from the\n         * returned string and stored in an internal buffer for the next call to`stringDecoder.write()` or `stringDecoder.end()`.\n         * @since v0.1.99\n         * @param buffer A `Buffer`, or `TypedArray`, or `DataView` containing the bytes to decode.\n         */\n        write(buffer: Buffer): string;\n        /**\n         * Returns any remaining input stored in the internal buffer as a string. Bytes\n         * representing incomplete UTF-8 and UTF-16 characters will be replaced with\n         * substitution characters appropriate for the character encoding.\n         *\n         * If the `buffer` argument is provided, one final call to `stringDecoder.write()`is performed before returning the remaining input.\n         * After `end()` is called, the `stringDecoder` object can be reused for new input.\n         * @since v0.9.3\n         * @param buffer A `Buffer`, or `TypedArray`, or `DataView` containing the bytes to decode.\n         */\n        end(buffer?: Buffer): string;\n    }\n}\ndeclare module 'node:string_decoder' {\n    export * from 'string_decoder';\n}\n"},"./node_modules/raw-loader/dist/cjs.js!./node_modules/@types/node/timers.d.ts":function(e,n,t){"use strict";t.r(n),n.default="/**\n * The `timer` module exposes a global API for scheduling functions to\n * be called at some future period of time. Because the timer functions are\n * globals, there is no need to call `require('timers')` to use the API.\n *\n * The timer functions within Node.js implement a similar API as the timers API\n * provided by Web Browsers but use a different internal implementation that is\n * built around the Node.js [Event Loop](https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#setimmediate-vs-settimeout).\n * @see [source](https://github.com/nodejs/node/blob/v16.9.0/lib/timers.js)\n */\ndeclare module 'timers' {\n    import { Abortable } from 'node:events';\n    import { setTimeout as setTimeoutPromise, setImmediate as setImmediatePromise, setInterval as setIntervalPromise } from 'node:timers/promises';\n    interface TimerOptions extends Abortable {\n        /**\n         * Set to `false` to indicate that the scheduled `Timeout`\n         * should not require the Node.js event loop to remain active.\n         * @default true\n         */\n        ref?: boolean | undefined;\n    }\n    let setTimeout: typeof global.setTimeout;\n    let clearTimeout: typeof global.clearTimeout;\n    let setInterval: typeof global.setInterval;\n    let clearInterval: typeof global.clearInterval;\n    let setImmediate: typeof global.setImmediate;\n    let clearImmediate: typeof global.clearImmediate;\n    global {\n        namespace NodeJS {\n            // compatibility with older typings\n            interface Timer extends RefCounted {\n                hasRef(): boolean;\n                refresh(): this;\n                [Symbol.toPrimitive](): number;\n            }\n            interface Immediate extends RefCounted {\n                /**\n                 * If true, the `Immediate` object will keep the Node.js event loop active.\n                 * @since v11.0.0\n                 */\n                hasRef(): boolean;\n                _onImmediate: Function; // to distinguish it from the Timeout class\n            }\n            interface Timeout extends Timer {\n                /**\n                 * If true, the `Timeout` object will keep the Node.js event loop active.\n                 * @since v11.0.0\n                 */\n                hasRef(): boolean;\n                /**\n                 * Sets the timer's start time to the current time, and reschedules the timer to\n                 * call its callback at the previously specified duration adjusted to the current\n                 * time. This is useful for refreshing a timer without allocating a new\n                 * JavaScript object.\n                 *\n                 * Using this on a timer that has already called its callback will reactivate the\n                 * timer.\n                 * @since v10.2.0\n                 * @return a reference to `timeout`\n                 */\n                refresh(): this;\n                [Symbol.toPrimitive](): number;\n            }\n        }\n        function setTimeout<TArgs extends any[]>(callback: (...args: TArgs) => void, ms?: number, ...args: TArgs): NodeJS.Timeout;\n        // util.promisify no rest args compability\n        // tslint:disable-next-line void-return\n        function setTimeout(callback: (args: void) => void, ms?: number): NodeJS.Timeout;\n        namespace setTimeout {\n            const __promisify__: typeof setTimeoutPromise;\n        }\n        function clearTimeout(timeoutId: NodeJS.Timeout): void;\n        function setInterval<TArgs extends any[]>(callback: (...args: TArgs) => void, ms?: number, ...args: TArgs): NodeJS.Timer;\n        // util.promisify no rest args compability\n        // tslint:disable-next-line void-return\n        function setInterval(callback: (args: void) => void, ms?: number): NodeJS.Timer;\n        namespace setInterval {\n            const __promisify__: typeof setIntervalPromise;\n        }\n        function clearInterval(intervalId: NodeJS.Timeout): void;\n        function setImmediate<TArgs extends any[]>(callback: (...args: TArgs) => void, ...args: TArgs): NodeJS.Immediate;\n        // util.promisify no rest args compability\n        // tslint:disable-next-line void-return\n        function setImmediate(callback: (args: void) => void): NodeJS.Immediate;\n        namespace setImmediate {\n            const __promisify__: typeof setImmediatePromise;\n        }\n        function clearImmediate(immediateId: NodeJS.Immediate): void;\n        function queueMicrotask(callback: () => void): void;\n    }\n}\ndeclare module 'node:timers' {\n    export * from 'timers';\n}\n"},"./node_modules/raw-loader/dist/cjs.js!./node_modules/@types/node/url.d.ts":function(e,n,t){"use strict";t.r(n),n.default="/**\n * The `url` module provides utilities for URL resolution and parsing. It can be\n * accessed using:\n *\n * ```js\n * import url from 'url';\n * ```\n * @see [source](https://github.com/nodejs/node/blob/v16.9.0/lib/url.js)\n */\ndeclare module 'url' {\n    import { Blob } from 'node:buffer';\n    import { ClientRequestArgs } from 'node:http';\n    import { ParsedUrlQuery, ParsedUrlQueryInput } from 'node:querystring';\n    // Input to `url.format`\n    interface UrlObject {\n        auth?: string | null | undefined;\n        hash?: string | null | undefined;\n        host?: string | null | undefined;\n        hostname?: string | null | undefined;\n        href?: string | null | undefined;\n        pathname?: string | null | undefined;\n        protocol?: string | null | undefined;\n        search?: string | null | undefined;\n        slashes?: boolean | null | undefined;\n        port?: string | number | null | undefined;\n        query?: string | null | ParsedUrlQueryInput | undefined;\n    }\n    // Output of `url.parse`\n    interface Url {\n        auth: string | null;\n        hash: string | null;\n        host: string | null;\n        hostname: string | null;\n        href: string;\n        path: string | null;\n        pathname: string | null;\n        protocol: string | null;\n        search: string | null;\n        slashes: boolean | null;\n        port: string | null;\n        query: string | null | ParsedUrlQuery;\n    }\n    interface UrlWithParsedQuery extends Url {\n        query: ParsedUrlQuery;\n    }\n    interface UrlWithStringQuery extends Url {\n        query: string | null;\n    }\n    /**\n     * The `url.parse()` method takes a URL string, parses it, and returns a URL\n     * object.\n     *\n     * A `TypeError` is thrown if `urlString` is not a string.\n     *\n     * A `URIError` is thrown if the `auth` property is present but cannot be decoded.\n     *\n     * Use of the legacy `url.parse()` method is discouraged. Users should\n     * use the WHATWG `URL` API. Because the `url.parse()` method uses a\n     * lenient, non-standard algorithm for parsing URL strings, security\n     * issues can be introduced. Specifically, issues with [host name spoofing](https://hackerone.com/reports/678487) and\n     * incorrect handling of usernames and passwords have been identified.\n     * @since v0.1.25\n     * @deprecated Legacy: Use the WHATWG URL API instead.\n     * @param urlString The URL string to parse.\n     * @param [parseQueryString=false] If `true`, the `query` property will always be set to an object returned by the {@link querystring} module's `parse()` method. If `false`, the `query` property\n     * on the returned URL object will be an unparsed, undecoded string.\n     * @param [slashesDenoteHost=false] If `true`, the first token after the literal string `//` and preceding the next `/` will be interpreted as the `host`. For instance, given `//foo/bar`, the\n     * result would be `{host: 'foo', pathname: '/bar'}` rather than `{pathname: '//foo/bar'}`.\n     */\n    function parse(urlString: string): UrlWithStringQuery;\n    function parse(urlString: string, parseQueryString: false | undefined, slashesDenoteHost?: boolean): UrlWithStringQuery;\n    function parse(urlString: string, parseQueryString: true, slashesDenoteHost?: boolean): UrlWithParsedQuery;\n    function parse(urlString: string, parseQueryString: boolean, slashesDenoteHost?: boolean): Url;\n    /**\n     * The URL object has both a `toString()` method and `href` property that return string serializations of the URL.\n     * These are not, however, customizable in any way. The `url.format(URL[, options])` method allows for basic\n     * customization of the output.\n     * Returns a customizable serialization of a URL `String` representation of a `WHATWG URL` object.\n     *\n     * ```js\n     * import url from 'url';\n     * const myURL = new URL('https://a:b@測試?abc#foo');\n     *\n     * console.log(myURL.href);\n     * // Prints https://a:b@xn--g6w251d/?abc#foo\n     *\n     * console.log(myURL.toString());\n     * // Prints https://a:b@xn--g6w251d/?abc#foo\n     *\n     * console.log(url.format(myURL, { fragment: false, unicode: true, auth: false }));\n     * // Prints 'https://測試/?abc'\n     * ```\n     * @since v7.6.0\n     * @param urlObject A `WHATWG URL` object\n     * @param options\n     */\n    function format(urlObject: URL, options?: URLFormatOptions): string;\n    /**\n     * The `url.format()` method returns a formatted URL string derived from`urlObject`.\n     *\n     * ```js\n     * const url = require('url');\n     * url.format({\n     *   protocol: 'https',\n     *   hostname: 'example.com',\n     *   pathname: '/some/path',\n     *   query: {\n     *     page: 1,\n     *     format: 'json'\n     *   }\n     * });\n     *\n     * // => 'https://example.com/some/path?page=1&#x26;format=json'\n     * ```\n     *\n     * If `urlObject` is not an object or a string, `url.format()` will throw a `TypeError`.\n     *\n     * The formatting process operates as follows:\n     *\n     * * A new empty string `result` is created.\n     * * If `urlObject.protocol` is a string, it is appended as-is to `result`.\n     * * Otherwise, if `urlObject.protocol` is not `undefined` and is not a string, an `Error` is thrown.\n     * * For all string values of `urlObject.protocol` that _do not end_ with an ASCII\n     * colon (`:`) character, the literal string `:` will be appended to `result`.\n     * * If either of the following conditions is true, then the literal string `//`will be appended to `result`:\n     *    * `urlObject.slashes` property is true;\n     *    * `urlObject.protocol` begins with `http`, `https`, `ftp`, `gopher`, or`file`;\n     * * If the value of the `urlObject.auth` property is truthy, and either`urlObject.host` or `urlObject.hostname` are not `undefined`, the value of`urlObject.auth` will be coerced into a string\n     * and appended to `result`followed by the literal string `@`.\n     * * If the `urlObject.host` property is `undefined` then:\n     *    * If the `urlObject.hostname` is a string, it is appended to `result`.\n     *    * Otherwise, if `urlObject.hostname` is not `undefined` and is not a string,\n     *    an `Error` is thrown.\n     *    * If the `urlObject.port` property value is truthy, and `urlObject.hostname`is not `undefined`:\n     *          * The literal string `:` is appended to `result`, and\n     *          * The value of `urlObject.port` is coerced to a string and appended to`result`.\n     * * Otherwise, if the `urlObject.host` property value is truthy, the value of`urlObject.host` is coerced to a string and appended to `result`.\n     * * If the `urlObject.pathname` property is a string that is not an empty string:\n     *    * If the `urlObject.pathname`_does not start_ with an ASCII forward slash\n     *    (`/`), then the literal string `'/'` is appended to `result`.\n     *    * The value of `urlObject.pathname` is appended to `result`.\n     * * Otherwise, if `urlObject.pathname` is not `undefined` and is not a string, an `Error` is thrown.\n     * * If the `urlObject.search` property is `undefined` and if the `urlObject.query`property is an `Object`, the literal string `?` is appended to `result`followed by the output of calling the\n     * `querystring` module's `stringify()`method passing the value of `urlObject.query`.\n     * * Otherwise, if `urlObject.search` is a string:\n     *    * If the value of `urlObject.search`_does not start_ with the ASCII question\n     *    mark (`?`) character, the literal string `?` is appended to `result`.\n     *    * The value of `urlObject.search` is appended to `result`.\n     * * Otherwise, if `urlObject.search` is not `undefined` and is not a string, an `Error` is thrown.\n     * * If the `urlObject.hash` property is a string:\n     *    * If the value of `urlObject.hash`_does not start_ with the ASCII hash (`#`)\n     *    character, the literal string `#` is appended to `result`.\n     *    * The value of `urlObject.hash` is appended to `result`.\n     * * Otherwise, if the `urlObject.hash` property is not `undefined` and is not a\n     * string, an `Error` is thrown.\n     * * `result` is returned.\n     * @since v0.1.25\n     * @deprecated Legacy: Use the WHATWG URL API instead.\n     * @param urlObject A URL object (as returned by `url.parse()` or constructed otherwise). If a string, it is converted to an object by passing it to `url.parse()`.\n     */\n    function format(urlObject: UrlObject | string): string;\n    /**\n     * The `url.resolve()` method resolves a target URL relative to a base URL in a\n     * manner similar to that of a Web browser resolving an anchor tag HREF.\n     *\n     * ```js\n     * const url = require('url');\n     * url.resolve('/one/two/three', 'four');         // '/one/two/four'\n     * url.resolve('http://example.com/', '/one');    // 'http://example.com/one'\n     * url.resolve('http://example.com/one', '/two'); // 'http://example.com/two'\n     * ```\n     *\n     * You can achieve the same result using the WHATWG URL API:\n     *\n     * ```js\n     * function resolve(from, to) {\n     *   const resolvedUrl = new URL(to, new URL(from, 'resolve://'));\n     *   if (resolvedUrl.protocol === 'resolve:') {\n     *     // `from` is a relative URL.\n     *     const { pathname, search, hash } = resolvedUrl;\n     *     return pathname + search + hash;\n     *   }\n     *   return resolvedUrl.toString();\n     * }\n     *\n     * resolve('/one/two/three', 'four');         // '/one/two/four'\n     * resolve('http://example.com/', '/one');    // 'http://example.com/one'\n     * resolve('http://example.com/one', '/two'); // 'http://example.com/two'\n     * ```\n     * @since v0.1.25\n     * @deprecated Legacy: Use the WHATWG URL API instead.\n     * @param from The Base URL being resolved against.\n     * @param to The HREF URL being resolved.\n     */\n    function resolve(from: string, to: string): string;\n    /**\n     * Returns the [Punycode](https://tools.ietf.org/html/rfc5891#section-4.4) ASCII serialization of the `domain`. If `domain` is an\n     * invalid domain, the empty string is returned.\n     *\n     * It performs the inverse operation to {@link domainToUnicode}.\n     *\n     * This feature is only available if the `node` executable was compiled with `ICU` enabled. If not, the domain names are passed through unchanged.\n     *\n     * ```js\n     * import url from 'url';\n     *\n     * console.log(url.domainToASCII('español.com'));\n     * // Prints xn--espaol-zwa.com\n     * console.log(url.domainToASCII('中文.com'));\n     * // Prints xn--fiq228c.com\n     * console.log(url.domainToASCII('xn--iñvalid.com'));\n     * // Prints an empty string\n     * ```\n     * @since v7.4.0, v6.13.0\n     */\n    function domainToASCII(domain: string): string;\n    /**\n     * Returns the Unicode serialization of the `domain`. If `domain` is an invalid\n     * domain, the empty string is returned.\n     *\n     * It performs the inverse operation to {@link domainToASCII}.\n     *\n     * This feature is only available if the `node` executable was compiled with `ICU` enabled. If not, the domain names are passed through unchanged.\n     *\n     * ```js\n     * import url from 'url';\n     *\n     * console.log(url.domainToUnicode('xn--espaol-zwa.com'));\n     * // Prints español.com\n     * console.log(url.domainToUnicode('xn--fiq228c.com'));\n     * // Prints 中文.com\n     * console.log(url.domainToUnicode('xn--iñvalid.com'));\n     * // Prints an empty string\n     * ```\n     * @since v7.4.0, v6.13.0\n     */\n    function domainToUnicode(domain: string): string;\n    /**\n     * This function ensures the correct decodings of percent-encoded characters as\n     * well as ensuring a cross-platform valid absolute path string.\n     *\n     * ```js\n     * import { fileURLToPath } from 'url';\n     *\n     * const __filename = fileURLToPath(import.meta.url);\n     *\n     * new URL('file:///C:/path/').pathname;      // Incorrect: /C:/path/\n     * fileURLToPath('file:///C:/path/');         // Correct:   C:\\path\\ (Windows)\n     *\n     * new URL('file://nas/foo.txt').pathname;    // Incorrect: /foo.txt\n     * fileURLToPath('file://nas/foo.txt');       // Correct:   \\\\nas\\foo.txt (Windows)\n     *\n     * new URL('file:///你好.txt').pathname;      // Incorrect: /%E4%BD%A0%E5%A5%BD.txt\n     * fileURLToPath('file:///你好.txt');         // Correct:   /你好.txt (POSIX)\n     *\n     * new URL('file:///hello world').pathname;   // Incorrect: /hello%20world\n     * fileURLToPath('file:///hello world');      // Correct:   /hello world (POSIX)\n     * ```\n     * @since v10.12.0\n     * @param url The file URL string or URL object to convert to a path.\n     * @return The fully-resolved platform-specific Node.js file path.\n     */\n    function fileURLToPath(url: string | URL): string;\n    /**\n     * This function ensures that `path` is resolved absolutely, and that the URL\n     * control characters are correctly encoded when converting into a File URL.\n     *\n     * ```js\n     * import { pathToFileURL } from 'url';\n     *\n     * new URL('/foo#1', 'file:');           // Incorrect: file:///foo#1\n     * pathToFileURL('/foo#1');              // Correct:   file:///foo%231 (POSIX)\n     *\n     * new URL('/some/path%.c', 'file:');    // Incorrect: file:///some/path%.c\n     * pathToFileURL('/some/path%.c');       // Correct:   file:///some/path%25.c (POSIX)\n     * ```\n     * @since v10.12.0\n     * @param path The path to convert to a File URL.\n     * @return The file URL object.\n     */\n    function pathToFileURL(path: string): URL;\n    /**\n     * This utility function converts a URL object into an ordinary options object as\n     * expected by the `http.request()` and `https.request()` APIs.\n     *\n     * ```js\n     * import { urlToHttpOptions } from 'url';\n     * const myURL = new URL('https://a:b@測試?abc#foo');\n     *\n     * console.log(urlToHttpOptions(myURL));\n     *\n     * {\n     *   protocol: 'https:',\n     *   hostname: 'xn--g6w251d',\n     *   hash: '#foo',\n     *   search: '?abc',\n     *   pathname: '/',\n     *   path: '/?abc',\n     *   href: 'https://a:b@xn--g6w251d/?abc#foo',\n     *   auth: 'a:b'\n     * }\n     *\n     * ```\n     * @since v15.7.0\n     * @param url The `WHATWG URL` object to convert to an options object.\n     * @return Options object\n     */\n    function urlToHttpOptions(url: URL): ClientRequestArgs;\n    interface URLFormatOptions {\n        auth?: boolean | undefined;\n        fragment?: boolean | undefined;\n        search?: boolean | undefined;\n        unicode?: boolean | undefined;\n    }\n    /**\n     * Browser-compatible `URL` class, implemented by following the WHATWG URL\n     * Standard. [Examples of parsed URLs](https://url.spec.whatwg.org/#example-url-parsing) may be found in the Standard itself.\n     * The `URL` class is also available on the global object.\n     *\n     * In accordance with browser conventions, all properties of `URL` objects\n     * are implemented as getters and setters on the class prototype, rather than as\n     * data properties on the object itself. Thus, unlike `legacy urlObject` s,\n     * using the `delete` keyword on any properties of `URL` objects (e.g. `delete myURL.protocol`, `delete myURL.pathname`, etc) has no effect but will still\n     * return `true`.\n     * @since v7.0.0, v6.13.0\n     */\n    class URL {\n        /**\n         * Creates a `'blob:nodedata:...'` URL string that represents the given `Blob` object and can be used to retrieve the `Blob` later.\n         *\n         * ```js\n         * const {\n         *   Blob,\n         *   resolveObjectURL,\n         * } = require('buffer');\n         *\n         * const blob = new Blob(['hello']);\n         * const id = URL.createObjectURL(blob);\n         *\n         * // later...\n         *\n         * const otherBlob = resolveObjectURL(id);\n         * console.log(otherBlob.size);\n         * ```\n         *\n         * The data stored by the registered `Blob` will be retained in memory until`URL.revokeObjectURL()` is called to remove it.\n         *\n         * `Blob` objects are registered within the current thread. If using Worker\n         * Threads, `Blob` objects registered within one Worker will not be available\n         * to other workers or the main thread.\n         * @since v16.7.0\n         * @experimental\n         */\n        static createObjectURL(blob: Blob): string;\n        /**\n         * Removes the stored `Blob` identified by the given ID.\n         * @since v16.7.0\n         * @experimental\n         * @param id A `'blob:nodedata:...` URL string returned by a prior call to `URL.createObjectURL()`.\n         */\n        static revokeObjectURL(objectUrl: string): void;\n        constructor(input: string, base?: string | URL);\n        /**\n         * Gets and sets the fragment portion of the URL.\n         *\n         * ```js\n         * const myURL = new URL('https://example.org/foo#bar');\n         * console.log(myURL.hash);\n         * // Prints #bar\n         *\n         * myURL.hash = 'baz';\n         * console.log(myURL.href);\n         * // Prints https://example.org/foo#baz\n         * ```\n         *\n         * Invalid URL characters included in the value assigned to the `hash` property\n         * are `percent-encoded`. The selection of which characters to\n         * percent-encode may vary somewhat from what the {@link parse} and {@link format} methods would produce.\n         */\n        hash: string;\n        /**\n         * Gets and sets the host portion of the URL.\n         *\n         * ```js\n         * const myURL = new URL('https://example.org:81/foo');\n         * console.log(myURL.host);\n         * // Prints example.org:81\n         *\n         * myURL.host = 'example.com:82';\n         * console.log(myURL.href);\n         * // Prints https://example.com:82/foo\n         * ```\n         *\n         * Invalid host values assigned to the `host` property are ignored.\n         */\n        host: string;\n        /**\n         * Gets and sets the host name portion of the URL. The key difference between`url.host` and `url.hostname` is that `url.hostname` does _not_ include the\n         * port.\n         *\n         * ```js\n         * const myURL = new URL('https://example.org:81/foo');\n         * console.log(myURL.hostname);\n         * // Prints example.org\n         *\n         * // Setting the hostname does not change the port\n         * myURL.hostname = 'example.com:82';\n         * console.log(myURL.href);\n         * // Prints https://example.com:81/foo\n         *\n         * // Use myURL.host to change the hostname and port\n         * myURL.host = 'example.org:82';\n         * console.log(myURL.href);\n         * // Prints https://example.org:82/foo\n         * ```\n         *\n         * Invalid host name values assigned to the `hostname` property are ignored.\n         */\n        hostname: string;\n        /**\n         * Gets and sets the serialized URL.\n         *\n         * ```js\n         * const myURL = new URL('https://example.org/foo');\n         * console.log(myURL.href);\n         * // Prints https://example.org/foo\n         *\n         * myURL.href = 'https://example.com/bar';\n         * console.log(myURL.href);\n         * // Prints https://example.com/bar\n         * ```\n         *\n         * Getting the value of the `href` property is equivalent to calling {@link toString}.\n         *\n         * Setting the value of this property to a new value is equivalent to creating a\n         * new `URL` object using `new URL(value)`. Each of the `URL`object's properties will be modified.\n         *\n         * If the value assigned to the `href` property is not a valid URL, a `TypeError`will be thrown.\n         */\n        href: string;\n        /**\n         * Gets the read-only serialization of the URL's origin.\n         *\n         * ```js\n         * const myURL = new URL('https://example.org/foo/bar?baz');\n         * console.log(myURL.origin);\n         * // Prints https://example.org\n         * ```\n         *\n         * ```js\n         * const idnURL = new URL('https://測試');\n         * console.log(idnURL.origin);\n         * // Prints https://xn--g6w251d\n         *\n         * console.log(idnURL.hostname);\n         * // Prints xn--g6w251d\n         * ```\n         */\n        readonly origin: string;\n        /**\n         * Gets and sets the password portion of the URL.\n         *\n         * ```js\n         * const myURL = new URL('https://abc:xyz@example.com');\n         * console.log(myURL.password);\n         * // Prints xyz\n         *\n         * myURL.password = '123';\n         * console.log(myURL.href);\n         * // Prints https://abc:123@example.com\n         * ```\n         *\n         * Invalid URL characters included in the value assigned to the `password` property\n         * are `percent-encoded`. The selection of which characters to\n         * percent-encode may vary somewhat from what the {@link parse} and {@link format} methods would produce.\n         */\n        password: string;\n        /**\n         * Gets and sets the path portion of the URL.\n         *\n         * ```js\n         * const myURL = new URL('https://example.org/abc/xyz?123');\n         * console.log(myURL.pathname);\n         * // Prints /abc/xyz\n         *\n         * myURL.pathname = '/abcdef';\n         * console.log(myURL.href);\n         * // Prints https://example.org/abcdef?123\n         * ```\n         *\n         * Invalid URL characters included in the value assigned to the `pathname`property are `percent-encoded`. The selection of which characters\n         * to percent-encode may vary somewhat from what the {@link parse} and {@link format} methods would produce.\n         */\n        pathname: string;\n        /**\n         * Gets and sets the port portion of the URL.\n         *\n         * The port value may be a number or a string containing a number in the range`0` to `65535` (inclusive). Setting the value to the default port of the`URL` objects given `protocol` will\n         * result in the `port` value becoming\n         * the empty string (`''`).\n         *\n         * The port value can be an empty string in which case the port depends on\n         * the protocol/scheme:\n         *\n         * <omitted>\n         *\n         * Upon assigning a value to the port, the value will first be converted to a\n         * string using `.toString()`.\n         *\n         * If that string is invalid but it begins with a number, the leading number is\n         * assigned to `port`.\n         * If the number lies outside the range denoted above, it is ignored.\n         *\n         * ```js\n         * const myURL = new URL('https://example.org:8888');\n         * console.log(myURL.port);\n         * // Prints 8888\n         *\n         * // Default ports are automatically transformed to the empty string\n         * // (HTTPS protocol's default port is 443)\n         * myURL.port = '443';\n         * console.log(myURL.port);\n         * // Prints the empty string\n         * console.log(myURL.href);\n         * // Prints https://example.org/\n         *\n         * myURL.port = 1234;\n         * console.log(myURL.port);\n         * // Prints 1234\n         * console.log(myURL.href);\n         * // Prints https://example.org:1234/\n         *\n         * // Completely invalid port strings are ignored\n         * myURL.port = 'abcd';\n         * console.log(myURL.port);\n         * // Prints 1234\n         *\n         * // Leading numbers are treated as a port number\n         * myURL.port = '5678abcd';\n         * console.log(myURL.port);\n         * // Prints 5678\n         *\n         * // Non-integers are truncated\n         * myURL.port = 1234.5678;\n         * console.log(myURL.port);\n         * // Prints 1234\n         *\n         * // Out-of-range numbers which are not represented in scientific notation\n         * // will be ignored.\n         * myURL.port = 1e10; // 10000000000, will be range-checked as described below\n         * console.log(myURL.port);\n         * // Prints 1234\n         * ```\n         *\n         * Numbers which contain a decimal point,\n         * such as floating-point numbers or numbers in scientific notation,\n         * are not an exception to this rule.\n         * Leading numbers up to the decimal point will be set as the URL's port,\n         * assuming they are valid:\n         *\n         * ```js\n         * myURL.port = 4.567e21;\n         * console.log(myURL.port);\n         * // Prints 4 (because it is the leading number in the string '4.567e21')\n         * ```\n         */\n        port: string;\n        /**\n         * Gets and sets the protocol portion of the URL.\n         *\n         * ```js\n         * const myURL = new URL('https://example.org');\n         * console.log(myURL.protocol);\n         * // Prints https:\n         *\n         * myURL.protocol = 'ftp';\n         * console.log(myURL.href);\n         * // Prints ftp://example.org/\n         * ```\n         *\n         * Invalid URL protocol values assigned to the `protocol` property are ignored.\n         */\n        protocol: string;\n        /**\n         * Gets and sets the serialized query portion of the URL.\n         *\n         * ```js\n         * const myURL = new URL('https://example.org/abc?123');\n         * console.log(myURL.search);\n         * // Prints ?123\n         *\n         * myURL.search = 'abc=xyz';\n         * console.log(myURL.href);\n         * // Prints https://example.org/abc?abc=xyz\n         * ```\n         *\n         * Any invalid URL characters appearing in the value assigned the `search`property will be `percent-encoded`. The selection of which\n         * characters to percent-encode may vary somewhat from what the {@link parse} and {@link format} methods would produce.\n         */\n        search: string;\n        /**\n         * Gets the `URLSearchParams` object representing the query parameters of the\n         * URL. This property is read-only but the `URLSearchParams` object it provides\n         * can be used to mutate the URL instance; to replace the entirety of query\n         * parameters of the URL, use the {@link search} setter. See `URLSearchParams` documentation for details.\n         *\n         * Use care when using `.searchParams` to modify the `URL` because,\n         * per the WHATWG specification, the `URLSearchParams` object uses\n         * different rules to determine which characters to percent-encode. For\n         * instance, the `URL` object will not percent encode the ASCII tilde (`~`)\n         * character, while `URLSearchParams` will always encode it:\n         *\n         * ```js\n         * const myUrl = new URL('https://example.org/abc?foo=~bar');\n         *\n         * console.log(myUrl.search);  // prints ?foo=~bar\n         *\n         * // Modify the URL via searchParams...\n         * myUrl.searchParams.sort();\n         *\n         * console.log(myUrl.search);  // prints ?foo=%7Ebar\n         * ```\n         */\n        readonly searchParams: URLSearchParams;\n        /**\n         * Gets and sets the username portion of the URL.\n         *\n         * ```js\n         * const myURL = new URL('https://abc:xyz@example.com');\n         * console.log(myURL.username);\n         * // Prints abc\n         *\n         * myURL.username = '123';\n         * console.log(myURL.href);\n         * // Prints https://123:xyz@example.com/\n         * ```\n         *\n         * Any invalid URL characters appearing in the value assigned the `username`property will be `percent-encoded`. The selection of which\n         * characters to percent-encode may vary somewhat from what the {@link parse} and {@link format} methods would produce.\n         */\n        username: string;\n        /**\n         * The `toString()` method on the `URL` object returns the serialized URL. The\n         * value returned is equivalent to that of {@link href} and {@link toJSON}.\n         */\n        toString(): string;\n        /**\n         * The `toJSON()` method on the `URL` object returns the serialized URL. The\n         * value returned is equivalent to that of {@link href} and {@link toString}.\n         *\n         * This method is automatically called when an `URL` object is serialized\n         * with [`JSON.stringify()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify).\n         *\n         * ```js\n         * const myURLs = [\n         *   new URL('https://www.example.com'),\n         *   new URL('https://test.example.org'),\n         * ];\n         * console.log(JSON.stringify(myURLs));\n         * // Prints [\"https://www.example.com/\",\"https://test.example.org/\"]\n         * ```\n         */\n        toJSON(): string;\n    }\n    /**\n     * The `URLSearchParams` API provides read and write access to the query of a`URL`. The `URLSearchParams` class can also be used standalone with one of the\n     * four following constructors.\n     * The `URLSearchParams` class is also available on the global object.\n     *\n     * The WHATWG `URLSearchParams` interface and the `querystring` module have\n     * similar purpose, but the purpose of the `querystring` module is more\n     * general, as it allows the customization of delimiter characters (`&#x26;` and `=`).\n     * On the other hand, this API is designed purely for URL query strings.\n     *\n     * ```js\n     * const myURL = new URL('https://example.org/?abc=123');\n     * console.log(myURL.searchParams.get('abc'));\n     * // Prints 123\n     *\n     * myURL.searchParams.append('abc', 'xyz');\n     * console.log(myURL.href);\n     * // Prints https://example.org/?abc=123&#x26;abc=xyz\n     *\n     * myURL.searchParams.delete('abc');\n     * myURL.searchParams.set('a', 'b');\n     * console.log(myURL.href);\n     * // Prints https://example.org/?a=b\n     *\n     * const newSearchParams = new URLSearchParams(myURL.searchParams);\n     * // The above is equivalent to\n     * // const newSearchParams = new URLSearchParams(myURL.search);\n     *\n     * newSearchParams.append('a', 'c');\n     * console.log(myURL.href);\n     * // Prints https://example.org/?a=b\n     * console.log(newSearchParams.toString());\n     * // Prints a=b&#x26;a=c\n     *\n     * // newSearchParams.toString() is implicitly called\n     * myURL.search = newSearchParams;\n     * console.log(myURL.href);\n     * // Prints https://example.org/?a=b&#x26;a=c\n     * newSearchParams.delete('a');\n     * console.log(myURL.href);\n     * // Prints https://example.org/?a=b&#x26;a=c\n     * ```\n     * @since v7.5.0, v6.13.0\n     */\n    class URLSearchParams implements Iterable<[string, string]> {\n        constructor(init?: URLSearchParams | string | Record<string, string | ReadonlyArray<string>> | Iterable<[string, string]> | ReadonlyArray<[string, string]>);\n        /**\n         * Append a new name-value pair to the query string.\n         */\n        append(name: string, value: string): void;\n        /**\n         * Remove all name-value pairs whose name is `name`.\n         */\n        delete(name: string): void;\n        /**\n         * Returns an ES6 `Iterator` over each of the name-value pairs in the query.\n         * Each item of the iterator is a JavaScript `Array`. The first item of the `Array`is the `name`, the second item of the `Array` is the `value`.\n         *\n         * Alias for `urlSearchParams[@@iterator]()`.\n         */\n        entries(): IterableIterator<[string, string]>;\n        /**\n         * Iterates over each name-value pair in the query and invokes the given function.\n         *\n         * ```js\n         * const myURL = new URL('https://example.org/?a=b&#x26;c=d');\n         * myURL.searchParams.forEach((value, name, searchParams) => {\n         *   console.log(name, value, myURL.searchParams === searchParams);\n         * });\n         * // Prints:\n         * //   a b true\n         * //   c d true\n         * ```\n         * @param fn Invoked for each name-value pair in the query\n         * @param thisArg To be used as `this` value for when `fn` is called\n         */\n        forEach<TThis = this>(callback: (this: TThis, value: string, name: string, searchParams: this) => void, thisArg?: TThis): void;\n        /**\n         * Returns the value of the first name-value pair whose name is `name`. If there\n         * are no such pairs, `null` is returned.\n         * @return or `null` if there is no name-value pair with the given `name`.\n         */\n        get(name: string): string | null;\n        /**\n         * Returns the values of all name-value pairs whose name is `name`. If there are\n         * no such pairs, an empty array is returned.\n         */\n        getAll(name: string): string[];\n        /**\n         * Returns `true` if there is at least one name-value pair whose name is `name`.\n         */\n        has(name: string): boolean;\n        /**\n         * Returns an ES6 `Iterator` over the names of each name-value pair.\n         *\n         * ```js\n         * const params = new URLSearchParams('foo=bar&#x26;foo=baz');\n         * for (const name of params.keys()) {\n         *   console.log(name);\n         * }\n         * // Prints:\n         * //   foo\n         * //   foo\n         * ```\n         */\n        keys(): IterableIterator<string>;\n        /**\n         * Sets the value in the `URLSearchParams` object associated with `name` to`value`. If there are any pre-existing name-value pairs whose names are `name`,\n         * set the first such pair's value to `value` and remove all others. If not,\n         * append the name-value pair to the query string.\n         *\n         * ```js\n         * const params = new URLSearchParams();\n         * params.append('foo', 'bar');\n         * params.append('foo', 'baz');\n         * params.append('abc', 'def');\n         * console.log(params.toString());\n         * // Prints foo=bar&#x26;foo=baz&#x26;abc=def\n         *\n         * params.set('foo', 'def');\n         * params.set('xyz', 'opq');\n         * console.log(params.toString());\n         * // Prints foo=def&#x26;abc=def&#x26;xyz=opq\n         * ```\n         */\n        set(name: string, value: string): void;\n        /**\n         * Sort all existing name-value pairs in-place by their names. Sorting is done\n         * with a [stable sorting algorithm](https://en.wikipedia.org/wiki/Sorting_algorithm#Stability), so relative order between name-value pairs\n         * with the same name is preserved.\n         *\n         * This method can be used, in particular, to increase cache hits.\n         *\n         * ```js\n         * const params = new URLSearchParams('query[]=abc&#x26;type=search&#x26;query[]=123');\n         * params.sort();\n         * console.log(params.toString());\n         * // Prints query%5B%5D=abc&#x26;query%5B%5D=123&#x26;type=search\n         * ```\n         * @since v7.7.0, v6.13.0\n         */\n        sort(): void;\n        /**\n         * Returns the search parameters serialized as a string, with characters\n         * percent-encoded where necessary.\n         */\n        toString(): string;\n        /**\n         * Returns an ES6 `Iterator` over the values of each name-value pair.\n         */\n        values(): IterableIterator<string>;\n        [Symbol.iterator](): IterableIterator<[string, string]>;\n    }\n}\ndeclare module 'node:url' {\n    export * from 'url';\n}\n"},"./node_modules/raw-loader/dist/cjs.js!./node_modules/@types/node/util.d.ts":function(e,n,t){"use strict";t.r(n),n.default="/**\n * The `util` module supports the needs of Node.js internal APIs. Many of the\n * utilities are useful for application and module developers as well. To access\n * it:\n *\n * ```js\n * const util = require('util');\n * ```\n * @see [source](https://github.com/nodejs/node/blob/v16.9.0/lib/util.js)\n */\ndeclare module 'util' {\n    import * as types from 'node:util/types';\n    export interface InspectOptions {\n        /**\n         * If set to `true`, getters are going to be\n         * inspected as well. If set to `'get'` only getters without setter are going\n         * to be inspected. If set to `'set'` only getters having a corresponding\n         * setter are going to be inspected. This might cause side effects depending on\n         * the getter function.\n         * @default `false`\n         */\n        getters?: 'get' | 'set' | boolean | undefined;\n        showHidden?: boolean | undefined;\n        /**\n         * @default 2\n         */\n        depth?: number | null | undefined;\n        colors?: boolean | undefined;\n        customInspect?: boolean | undefined;\n        showProxy?: boolean | undefined;\n        maxArrayLength?: number | null | undefined;\n        /**\n         * Specifies the maximum number of characters to\n         * include when formatting. Set to `null` or `Infinity` to show all elements.\n         * Set to `0` or negative to show no characters.\n         * @default 10000\n         */\n        maxStringLength?: number | null | undefined;\n        breakLength?: number | undefined;\n        /**\n         * Setting this to `false` causes each object key\n         * to be displayed on a new line. It will also add new lines to text that is\n         * longer than `breakLength`. If set to a number, the most `n` inner elements\n         * are united on a single line as long as all properties fit into\n         * `breakLength`. Short array elements are also grouped together. Note that no\n         * text will be reduced below 16 characters, no matter the `breakLength` size.\n         * For more information, see the example below.\n         * @default `true`\n         */\n        compact?: boolean | number | undefined;\n        sorted?: boolean | ((a: string, b: string) => number) | undefined;\n    }\n    export type Style = 'special' | 'number' | 'bigint' | 'boolean' | 'undefined' | 'null' | 'string' | 'symbol' | 'date' | 'regexp' | 'module';\n    export type CustomInspectFunction = (depth: number, options: InspectOptionsStylized) => string;\n    export interface InspectOptionsStylized extends InspectOptions {\n        stylize(text: string, styleType: Style): string;\n    }\n    /**\n     * The `util.format()` method returns a formatted string using the first argument\n     * as a `printf`\\-like format string which can contain zero or more format\n     * specifiers. Each specifier is replaced with the converted value from the\n     * corresponding argument. Supported specifiers are:\n     *\n     * If a specifier does not have a corresponding argument, it is not replaced:\n     *\n     * ```js\n     * util.format('%s:%s', 'foo');\n     * // Returns: 'foo:%s'\n     * ```\n     *\n     * Values that are not part of the format string are formatted using`util.inspect()` if their type is not `string`.\n     *\n     * If there are more arguments passed to the `util.format()` method than the\n     * number of specifiers, the extra arguments are concatenated to the returned\n     * string, separated by spaces:\n     *\n     * ```js\n     * util.format('%s:%s', 'foo', 'bar', 'baz');\n     * // Returns: 'foo:bar baz'\n     * ```\n     *\n     * If the first argument does not contain a valid format specifier, `util.format()`returns a string that is the concatenation of all arguments separated by spaces:\n     *\n     * ```js\n     * util.format(1, 2, 3);\n     * // Returns: '1 2 3'\n     * ```\n     *\n     * If only one argument is passed to `util.format()`, it is returned as it is\n     * without any formatting:\n     *\n     * ```js\n     * util.format('%% %s');\n     * // Returns: '%% %s'\n     * ```\n     *\n     * `util.format()` is a synchronous method that is intended as a debugging tool.\n     * Some input values can have a significant performance overhead that can block the\n     * event loop. Use this function with care and never in a hot code path.\n     * @since v0.5.3\n     * @param format A `printf`-like format string.\n     */\n    export function format(format?: any, ...param: any[]): string;\n    /**\n     * This function is identical to {@link format}, except in that it takes\n     * an `inspectOptions` argument which specifies options that are passed along to {@link inspect}.\n     *\n     * ```js\n     * util.formatWithOptions({ colors: true }, 'See object %O', { foo: 42 });\n     * // Returns 'See object { foo: 42 }', where `42` is colored as a number\n     * // when printed to a terminal.\n     * ```\n     * @since v10.0.0\n     */\n    export function formatWithOptions(inspectOptions: InspectOptions, format?: any, ...param: any[]): string;\n    /**\n     * Returns the string name for a numeric error code that comes from a Node.js API.\n     * The mapping between error codes and error names is platform-dependent.\n     * See `Common System Errors` for the names of common errors.\n     *\n     * ```js\n     * fs.access('file/that/does/not/exist', (err) => {\n     *   const name = util.getSystemErrorName(err.errno);\n     *   console.error(name);  // ENOENT\n     * });\n     * ```\n     * @since v9.7.0\n     */\n    export function getSystemErrorName(err: number): string;\n    /**\n     * Returns a Map of all system error codes available from the Node.js API.\n     * The mapping between error codes and error names is platform-dependent.\n     * See `Common System Errors` for the names of common errors.\n     *\n     * ```js\n     * fs.access('file/that/does/not/exist', (err) => {\n     *   const errorMap = util.getSystemErrorMap();\n     *   const name = errorMap.get(err.errno);\n     *   console.error(name);  // ENOENT\n     * });\n     * ```\n     * @since v16.0.0\n     */\n    export function getSystemErrorMap(): Map<number, [string, string]>;\n    /**\n     * The `util.log()` method prints the given `string` to `stdout` with an included\n     * timestamp.\n     *\n     * ```js\n     * const util = require('util');\n     *\n     * util.log('Timestamped message.');\n     * ```\n     * @since v0.3.0\n     * @deprecated Since v6.0.0 - Use a third party module instead.\n     */\n    export function log(string: string): void;\n    /**\n     * Returns the `string` after replacing any surrogate code points\n     * (or equivalently, any unpaired surrogate code units) with the\n     * Unicode \"replacement character\" U+FFFD.\n     * @since v16.8.0\n     */\n    export function toUSVString(string: string): string;\n    /**\n     * The `util.inspect()` method returns a string representation of `object` that is\n     * intended for debugging. The output of `util.inspect` may change at any time\n     * and should not be depended upon programmatically. Additional `options` may be\n     * passed that alter the result.`util.inspect()` will use the constructor's name and/or `@@toStringTag` to make\n     * an identifiable tag for an inspected value.\n     *\n     * ```js\n     * class Foo {\n     *   get [Symbol.toStringTag]() {\n     *     return 'bar';\n     *   }\n     * }\n     *\n     * class Bar {}\n     *\n     * const baz = Object.create(null, { [Symbol.toStringTag]: { value: 'foo' } });\n     *\n     * util.inspect(new Foo()); // 'Foo [bar] {}'\n     * util.inspect(new Bar()); // 'Bar {}'\n     * util.inspect(baz);       // '[foo] {}'\n     * ```\n     *\n     * Circular references point to their anchor by using a reference index:\n     *\n     * ```js\n     * const { inspect } = require('util');\n     *\n     * const obj = {};\n     * obj.a = [obj];\n     * obj.b = {};\n     * obj.b.inner = obj.b;\n     * obj.b.obj = obj;\n     *\n     * console.log(inspect(obj));\n     * // <ref *1> {\n     * //   a: [ [Circular *1] ],\n     * //   b: <ref *2> { inner: [Circular *2], obj: [Circular *1] }\n     * // }\n     * ```\n     *\n     * The following example inspects all properties of the `util` object:\n     *\n     * ```js\n     * const util = require('util');\n     *\n     * console.log(util.inspect(util, { showHidden: true, depth: null }));\n     * ```\n     *\n     * The following example highlights the effect of the `compact` option:\n     *\n     * ```js\n     * const util = require('util');\n     *\n     * const o = {\n     *   a: [1, 2, [[\n     *     'Lorem ipsum dolor sit amet,\\nconsectetur adipiscing elit, sed do ' +\n     *       'eiusmod \\ntempor incididunt ut labore et dolore magna aliqua.',\n     *     'test',\n     *     'foo']], 4],\n     *   b: new Map([['za', 1], ['zb', 'test']])\n     * };\n     * console.log(util.inspect(o, { compact: true, depth: 5, breakLength: 80 }));\n     *\n     * // { a:\n     * //   [ 1,\n     * //     2,\n     * //     [ [ 'Lorem ipsum dolor sit amet,\\nconsectetur [...]', // A long line\n     * //           'test',\n     * //           'foo' ] ],\n     * //     4 ],\n     * //   b: Map(2) { 'za' => 1, 'zb' => 'test' } }\n     *\n     * // Setting `compact` to false or an integer creates more reader friendly output.\n     * console.log(util.inspect(o, { compact: false, depth: 5, breakLength: 80 }));\n     *\n     * // {\n     * //   a: [\n     * //     1,\n     * //     2,\n     * //     [\n     * //       [\n     * //         'Lorem ipsum dolor sit amet,\\n' +\n     * //           'consectetur adipiscing elit, sed do eiusmod \\n' +\n     * //           'tempor incididunt ut labore et dolore magna aliqua.',\n     * //         'test',\n     * //         'foo'\n     * //       ]\n     * //     ],\n     * //     4\n     * //   ],\n     * //   b: Map(2) {\n     * //     'za' => 1,\n     * //     'zb' => 'test'\n     * //   }\n     * // }\n     *\n     * // Setting `breakLength` to e.g. 150 will print the \"Lorem ipsum\" text in a\n     * // single line.\n     * ```\n     *\n     * The `showHidden` option allows [`WeakMap`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap) and\n     * [`WeakSet`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet) entries to be\n     * inspected. If there are more entries than `maxArrayLength`, there is no\n     * guarantee which entries are displayed. That means retrieving the same [`WeakSet`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet) entries twice may\n     * result in different output. Furthermore, entries\n     * with no remaining strong references may be garbage collected at any time.\n     *\n     * ```js\n     * const { inspect } = require('util');\n     *\n     * const obj = { a: 1 };\n     * const obj2 = { b: 2 };\n     * const weakSet = new WeakSet([obj, obj2]);\n     *\n     * console.log(inspect(weakSet, { showHidden: true }));\n     * // WeakSet { { a: 1 }, { b: 2 } }\n     * ```\n     *\n     * The `sorted` option ensures that an object's property insertion order does not\n     * impact the result of `util.inspect()`.\n     *\n     * ```js\n     * const { inspect } = require('util');\n     * const assert = require('assert');\n     *\n     * const o1 = {\n     *   b: [2, 3, 1],\n     *   a: '`a` comes before `b`',\n     *   c: new Set([2, 3, 1])\n     * };\n     * console.log(inspect(o1, { sorted: true }));\n     * // { a: '`a` comes before `b`', b: [ 2, 3, 1 ], c: Set(3) { 1, 2, 3 } }\n     * console.log(inspect(o1, { sorted: (a, b) => b.localeCompare(a) }));\n     * // { c: Set(3) { 3, 2, 1 }, b: [ 2, 3, 1 ], a: '`a` comes before `b`' }\n     *\n     * const o2 = {\n     *   c: new Set([2, 1, 3]),\n     *   a: '`a` comes before `b`',\n     *   b: [2, 3, 1]\n     * };\n     * assert.strict.equal(\n     *   inspect(o1, { sorted: true }),\n     *   inspect(o2, { sorted: true })\n     * );\n     * ```\n     *\n     * `util.inspect()` is a synchronous method intended for debugging. Its maximum\n     * output length is approximately 128 MB. Inputs that result in longer output will\n     * be truncated.\n     * @since v0.3.0\n     * @param object Any JavaScript primitive or `Object`.\n     * @return The representation of `object`.\n     */\n    export function inspect(object: any, showHidden?: boolean, depth?: number | null, color?: boolean): string;\n    export function inspect(object: any, options: InspectOptions): string;\n    export namespace inspect {\n        let colors: NodeJS.Dict<[number, number]>;\n        let styles: {\n            [K in Style]: string;\n        };\n        let defaultOptions: InspectOptions;\n        /**\n         * Allows changing inspect settings from the repl.\n         */\n        let replDefaults: InspectOptions;\n        /**\n         * That can be used to declare custom inspect functions.\n         */\n        const custom: unique symbol;\n    }\n    /**\n     * Alias for [`Array.isArray()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray).\n     *\n     * Returns `true` if the given `object` is an `Array`. Otherwise, returns `false`.\n     *\n     * ```js\n     * const util = require('util');\n     *\n     * util.isArray([]);\n     * // Returns: true\n     * util.isArray(new Array());\n     * // Returns: true\n     * util.isArray({});\n     * // Returns: false\n     * ```\n     * @since v0.6.0\n     * @deprecated Since v4.0.0 - Use `isArray` instead.\n     */\n    export function isArray(object: unknown): object is unknown[];\n    /**\n     * Returns `true` if the given `object` is a `RegExp`. Otherwise, returns `false`.\n     *\n     * ```js\n     * const util = require('util');\n     *\n     * util.isRegExp(/some regexp/);\n     * // Returns: true\n     * util.isRegExp(new RegExp('another regexp'));\n     * // Returns: true\n     * util.isRegExp({});\n     * // Returns: false\n     * ```\n     * @since v0.6.0\n     * @deprecated Since v4.0.0 - Deprecated\n     */\n    export function isRegExp(object: unknown): object is RegExp;\n    /**\n     * Returns `true` if the given `object` is a `Date`. Otherwise, returns `false`.\n     *\n     * ```js\n     * const util = require('util');\n     *\n     * util.isDate(new Date());\n     * // Returns: true\n     * util.isDate(Date());\n     * // false (without 'new' returns a String)\n     * util.isDate({});\n     * // Returns: false\n     * ```\n     * @since v0.6.0\n     * @deprecated Since v4.0.0 - Use {@link types.isDate} instead.\n     */\n    export function isDate(object: unknown): object is Date;\n    /**\n     * Returns `true` if the given `object` is an `Error`. Otherwise, returns`false`.\n     *\n     * ```js\n     * const util = require('util');\n     *\n     * util.isError(new Error());\n     * // Returns: true\n     * util.isError(new TypeError());\n     * // Returns: true\n     * util.isError({ name: 'Error', message: 'an error occurred' });\n     * // Returns: false\n     * ```\n     *\n     * This method relies on `Object.prototype.toString()` behavior. It is\n     * possible to obtain an incorrect result when the `object` argument manipulates`@@toStringTag`.\n     *\n     * ```js\n     * const util = require('util');\n     * const obj = { name: 'Error', message: 'an error occurred' };\n     *\n     * util.isError(obj);\n     * // Returns: false\n     * obj[Symbol.toStringTag] = 'Error';\n     * util.isError(obj);\n     * // Returns: true\n     * ```\n     * @since v0.6.0\n     * @deprecated Since v4.0.0 - Use {@link types.isNativeError} instead.\n     */\n    export function isError(object: unknown): object is Error;\n    /**\n     * Usage of `util.inherits()` is discouraged. Please use the ES6 `class` and`extends` keywords to get language level inheritance support. Also note\n     * that the two styles are [semantically incompatible](https://github.com/nodejs/node/issues/4179).\n     *\n     * Inherit the prototype methods from one [constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor) into another. The\n     * prototype of `constructor` will be set to a new object created from`superConstructor`.\n     *\n     * This mainly adds some input validation on top of`Object.setPrototypeOf(constructor.prototype, superConstructor.prototype)`.\n     * As an additional convenience, `superConstructor` will be accessible\n     * through the `constructor.super_` property.\n     *\n     * ```js\n     * const util = require('util');\n     * const EventEmitter = require('events');\n     *\n     * function MyStream() {\n     *   EventEmitter.call(this);\n     * }\n     *\n     * util.inherits(MyStream, EventEmitter);\n     *\n     * MyStream.prototype.write = function(data) {\n     *   this.emit('data', data);\n     * };\n     *\n     * const stream = new MyStream();\n     *\n     * console.log(stream instanceof EventEmitter); // true\n     * console.log(MyStream.super_ === EventEmitter); // true\n     *\n     * stream.on('data', (data) => {\n     *   console.log(`Received data: \"${data}\"`);\n     * });\n     * stream.write('It works!'); // Received data: \"It works!\"\n     * ```\n     *\n     * ES6 example using `class` and `extends`:\n     *\n     * ```js\n     * const EventEmitter = require('events');\n     *\n     * class MyStream extends EventEmitter {\n     *   write(data) {\n     *     this.emit('data', data);\n     *   }\n     * }\n     *\n     * const stream = new MyStream();\n     *\n     * stream.on('data', (data) => {\n     *   console.log(`Received data: \"${data}\"`);\n     * });\n     * stream.write('With ES6');\n     * ```\n     * @since v0.3.0\n     * @deprecated Legacy: Use ES2015 class syntax and `extends` keyword instead.\n     */\n    export function inherits(constructor: unknown, superConstructor: unknown): void;\n    export type DebugLoggerFunction = (msg: string, ...param: unknown[]) => void;\n    export interface DebugLogger extends DebugLoggerFunction {\n        enabled: boolean;\n    }\n    /**\n     * The `util.debuglog()` method is used to create a function that conditionally\n     * writes debug messages to `stderr` based on the existence of the `NODE_DEBUG`environment variable. If the `section` name appears within the value of that\n     * environment variable, then the returned function operates similar to `console.error()`. If not, then the returned function is a no-op.\n     *\n     * ```js\n     * const util = require('util');\n     * const debuglog = util.debuglog('foo');\n     *\n     * debuglog('hello from foo [%d]', 123);\n     * ```\n     *\n     * If this program is run with `NODE_DEBUG=foo` in the environment, then\n     * it will output something like:\n     *\n     * ```console\n     * FOO 3245: hello from foo [123]\n     * ```\n     *\n     * where `3245` is the process id. If it is not run with that\n     * environment variable set, then it will not print anything.\n     *\n     * The `section` supports wildcard also:\n     *\n     * ```js\n     * const util = require('util');\n     * const debuglog = util.debuglog('foo-bar');\n     *\n     * debuglog('hi there, it\\'s foo-bar [%d]', 2333);\n     * ```\n     *\n     * if it is run with `NODE_DEBUG=foo*` in the environment, then it will output\n     * something like:\n     *\n     * ```console\n     * FOO-BAR 3257: hi there, it's foo-bar [2333]\n     * ```\n     *\n     * Multiple comma-separated `section` names may be specified in the `NODE_DEBUG`environment variable: `NODE_DEBUG=fs,net,tls`.\n     *\n     * The optional `callback` argument can be used to replace the logging function\n     * with a different function that doesn't have any initialization or\n     * unnecessary wrapping.\n     *\n     * ```js\n     * const util = require('util');\n     * let debuglog = util.debuglog('internals', (debug) => {\n     *   // Replace with a logging function that optimizes out\n     *   // testing if the section is enabled\n     *   debuglog = debug;\n     * });\n     * ```\n     * @since v0.11.3\n     * @param section A string identifying the portion of the application for which the `debuglog` function is being created.\n     * @param callback A callback invoked the first time the logging function is called with a function argument that is a more optimized logging function.\n     * @return The logging function\n     */\n    export function debuglog(section: string, callback?: (fn: DebugLoggerFunction) => void): DebugLogger;\n    export const debug: typeof debuglog;\n    /**\n     * Returns `true` if the given `object` is a `Boolean`. Otherwise, returns `false`.\n     *\n     * ```js\n     * const util = require('util');\n     *\n     * util.isBoolean(1);\n     * // Returns: false\n     * util.isBoolean(0);\n     * // Returns: false\n     * util.isBoolean(false);\n     * // Returns: true\n     * ```\n     * @since v0.11.5\n     * @deprecated Since v4.0.0 - Use `typeof value === 'boolean'` instead.\n     */\n    export function isBoolean(object: unknown): object is boolean;\n    /**\n     * Returns `true` if the given `object` is a `Buffer`. Otherwise, returns `false`.\n     *\n     * ```js\n     * const util = require('util');\n     *\n     * util.isBuffer({ length: 0 });\n     * // Returns: false\n     * util.isBuffer([]);\n     * // Returns: false\n     * util.isBuffer(Buffer.from('hello world'));\n     * // Returns: true\n     * ```\n     * @since v0.11.5\n     * @deprecated Since v4.0.0 - Use `isBuffer` instead.\n     */\n    export function isBuffer(object: unknown): object is Buffer;\n    /**\n     * Returns `true` if the given `object` is a `Function`. Otherwise, returns`false`.\n     *\n     * ```js\n     * const util = require('util');\n     *\n     * function Foo() {}\n     * const Bar = () => {};\n     *\n     * util.isFunction({});\n     * // Returns: false\n     * util.isFunction(Foo);\n     * // Returns: true\n     * util.isFunction(Bar);\n     * // Returns: true\n     * ```\n     * @since v0.11.5\n     * @deprecated Since v4.0.0 - Use `typeof value === 'function'` instead.\n     */\n    export function isFunction(object: unknown): boolean;\n    /**\n     * Returns `true` if the given `object` is strictly `null`. Otherwise, returns`false`.\n     *\n     * ```js\n     * const util = require('util');\n     *\n     * util.isNull(0);\n     * // Returns: false\n     * util.isNull(undefined);\n     * // Returns: false\n     * util.isNull(null);\n     * // Returns: true\n     * ```\n     * @since v0.11.5\n     * @deprecated Since v4.0.0 - Use `value === null` instead.\n     */\n    export function isNull(object: unknown): object is null;\n    /**\n     * Returns `true` if the given `object` is `null` or `undefined`. Otherwise,\n     * returns `false`.\n     *\n     * ```js\n     * const util = require('util');\n     *\n     * util.isNullOrUndefined(0);\n     * // Returns: false\n     * util.isNullOrUndefined(undefined);\n     * // Returns: true\n     * util.isNullOrUndefined(null);\n     * // Returns: true\n     * ```\n     * @since v0.11.5\n     * @deprecated Since v4.0.0 - Use `value === undefined || value === null` instead.\n     */\n    export function isNullOrUndefined(object: unknown): object is null | undefined;\n    /**\n     * Returns `true` if the given `object` is a `Number`. Otherwise, returns `false`.\n     *\n     * ```js\n     * const util = require('util');\n     *\n     * util.isNumber(false);\n     * // Returns: false\n     * util.isNumber(Infinity);\n     * // Returns: true\n     * util.isNumber(0);\n     * // Returns: true\n     * util.isNumber(NaN);\n     * // Returns: true\n     * ```\n     * @since v0.11.5\n     * @deprecated Since v4.0.0 - Use `typeof value === 'number'` instead.\n     */\n    export function isNumber(object: unknown): object is number;\n    /**\n     * Returns `true` if the given `object` is strictly an `Object`**and** not a`Function` (even though functions are objects in JavaScript).\n     * Otherwise, returns `false`.\n     *\n     * ```js\n     * const util = require('util');\n     *\n     * util.isObject(5);\n     * // Returns: false\n     * util.isObject(null);\n     * // Returns: false\n     * util.isObject({});\n     * // Returns: true\n     * util.isObject(() => {});\n     * // Returns: false\n     * ```\n     * @since v0.11.5\n     * @deprecated Since v4.0.0 - Deprecated: Use `value !== null && typeof value === 'object'` instead.\n     */\n    export function isObject(object: unknown): boolean;\n    /**\n     * Returns `true` if the given `object` is a primitive type. Otherwise, returns`false`.\n     *\n     * ```js\n     * const util = require('util');\n     *\n     * util.isPrimitive(5);\n     * // Returns: true\n     * util.isPrimitive('foo');\n     * // Returns: true\n     * util.isPrimitive(false);\n     * // Returns: true\n     * util.isPrimitive(null);\n     * // Returns: true\n     * util.isPrimitive(undefined);\n     * // Returns: true\n     * util.isPrimitive({});\n     * // Returns: false\n     * util.isPrimitive(() => {});\n     * // Returns: false\n     * util.isPrimitive(/^$/);\n     * // Returns: false\n     * util.isPrimitive(new Date());\n     * // Returns: false\n     * ```\n     * @since v0.11.5\n     * @deprecated Since v4.0.0 - Use `(typeof value !== 'object' && typeof value !== 'function') || value === null` instead.\n     */\n    export function isPrimitive(object: unknown): boolean;\n    /**\n     * Returns `true` if the given `object` is a `string`. Otherwise, returns `false`.\n     *\n     * ```js\n     * const util = require('util');\n     *\n     * util.isString('');\n     * // Returns: true\n     * util.isString('foo');\n     * // Returns: true\n     * util.isString(String('foo'));\n     * // Returns: true\n     * util.isString(5);\n     * // Returns: false\n     * ```\n     * @since v0.11.5\n     * @deprecated Since v4.0.0 - Use `typeof value === 'string'` instead.\n     */\n    export function isString(object: unknown): object is string;\n    /**\n     * Returns `true` if the given `object` is a `Symbol`. Otherwise, returns `false`.\n     *\n     * ```js\n     * const util = require('util');\n     *\n     * util.isSymbol(5);\n     * // Returns: false\n     * util.isSymbol('foo');\n     * // Returns: false\n     * util.isSymbol(Symbol('foo'));\n     * // Returns: true\n     * ```\n     * @since v0.11.5\n     * @deprecated Since v4.0.0 - Use `typeof value === 'symbol'` instead.\n     */\n    export function isSymbol(object: unknown): object is symbol;\n    /**\n     * Returns `true` if the given `object` is `undefined`. Otherwise, returns `false`.\n     *\n     * ```js\n     * const util = require('util');\n     *\n     * const foo = undefined;\n     * util.isUndefined(5);\n     * // Returns: false\n     * util.isUndefined(foo);\n     * // Returns: true\n     * util.isUndefined(null);\n     * // Returns: false\n     * ```\n     * @since v0.11.5\n     * @deprecated Since v4.0.0 - Use `value === undefined` instead.\n     */\n    export function isUndefined(object: unknown): object is undefined;\n    /**\n     * The `util.deprecate()` method wraps `fn` (which may be a function or class) in\n     * such a way that it is marked as deprecated.\n     *\n     * ```js\n     * const util = require('util');\n     *\n     * exports.obsoleteFunction = util.deprecate(() => {\n     *   // Do something here.\n     * }, 'obsoleteFunction() is deprecated. Use newShinyFunction() instead.');\n     * ```\n     *\n     * When called, `util.deprecate()` will return a function that will emit a`DeprecationWarning` using the `'warning'` event. The warning will\n     * be emitted and printed to `stderr` the first time the returned function is\n     * called. After the warning is emitted, the wrapped function is called without\n     * emitting a warning.\n     *\n     * If the same optional `code` is supplied in multiple calls to `util.deprecate()`,\n     * the warning will be emitted only once for that `code`.\n     *\n     * ```js\n     * const util = require('util');\n     *\n     * const fn1 = util.deprecate(someFunction, someMessage, 'DEP0001');\n     * const fn2 = util.deprecate(someOtherFunction, someOtherMessage, 'DEP0001');\n     * fn1(); // Emits a deprecation warning with code DEP0001\n     * fn2(); // Does not emit a deprecation warning because it has the same code\n     * ```\n     *\n     * If either the `--no-deprecation` or `--no-warnings` command-line flags are\n     * used, or if the `process.noDeprecation` property is set to `true`_prior_ to\n     * the first deprecation warning, the `util.deprecate()` method does nothing.\n     *\n     * If the `--trace-deprecation` or `--trace-warnings` command-line flags are set,\n     * or the `process.traceDeprecation` property is set to `true`, a warning and a\n     * stack trace are printed to `stderr` the first time the deprecated function is\n     * called.\n     *\n     * If the `--throw-deprecation` command-line flag is set, or the`process.throwDeprecation` property is set to `true`, then an exception will be\n     * thrown when the deprecated function is called.\n     *\n     * The `--throw-deprecation` command-line flag and `process.throwDeprecation`property take precedence over `--trace-deprecation` and`process.traceDeprecation`.\n     * @since v0.8.0\n     * @param fn The function that is being deprecated.\n     * @param msg A warning message to display when the deprecated function is invoked.\n     * @param code A deprecation code. See the `list of deprecated APIs` for a list of codes.\n     * @return The deprecated function wrapped to emit a warning.\n     */\n    export function deprecate<T extends Function>(fn: T, msg: string, code?: string): T;\n    /**\n     * Returns `true` if there is deep strict equality between `val1` and `val2`.\n     * Otherwise, returns `false`.\n     *\n     * See `assert.deepStrictEqual()` for more information about deep strict\n     * equality.\n     * @since v9.0.0\n     */\n    export function isDeepStrictEqual(val1: unknown, val2: unknown): boolean;\n    /**\n     * Returns `str` with any ANSI escape codes removed.\n     *\n     * ```js\n     * console.log(util.stripVTControlCharacters('\\u001B[4mvalue\\u001B[0m'));\n     * // Prints \"value\"\n     * ```\n     * @since v16.11.0\n     */\n    export function stripVTControlCharacters(str: string): string;\n    /**\n     * Takes an `async` function (or a function that returns a `Promise`) and returns a\n     * function following the error-first callback style, i.e. taking\n     * an `(err, value) => ...` callback as the last argument. In the callback, the\n     * first argument will be the rejection reason (or `null` if the `Promise`resolved), and the second argument will be the resolved value.\n     *\n     * ```js\n     * const util = require('util');\n     *\n     * async function fn() {\n     *   return 'hello world';\n     * }\n     * const callbackFunction = util.callbackify(fn);\n     *\n     * callbackFunction((err, ret) => {\n     *   if (err) throw err;\n     *   console.log(ret);\n     * });\n     * ```\n     *\n     * Will print:\n     *\n     * ```text\n     * hello world\n     * ```\n     *\n     * The callback is executed asynchronously, and will have a limited stack trace.\n     * If the callback throws, the process will emit an `'uncaughtException'` event, and if not handled will exit.\n     *\n     * Since `null` has a special meaning as the first argument to a callback, if a\n     * wrapped function rejects a `Promise` with a falsy value as a reason, the value\n     * is wrapped in an `Error` with the original value stored in a field named`reason`.\n     *\n     * ```js\n     * function fn() {\n     *   return Promise.reject(null);\n     * }\n     * const callbackFunction = util.callbackify(fn);\n     *\n     * callbackFunction((err, ret) => {\n     *   // When the Promise was rejected with `null` it is wrapped with an Error and\n     *   // the original value is stored in `reason`.\n     *   err &#x26;&#x26; err.hasOwnProperty('reason') &#x26;&#x26; err.reason === null;  // true\n     * });\n     * ```\n     * @since v8.2.0\n     * @param original An `async` function\n     * @return a callback style function\n     */\n    export function callbackify(fn: () => Promise<void>): (callback: (err: NodeJS.ErrnoException) => void) => void;\n    export function callbackify<TResult>(fn: () => Promise<TResult>): (callback: (err: NodeJS.ErrnoException, result: TResult) => void) => void;\n    export function callbackify<T1>(fn: (arg1: T1) => Promise<void>): (arg1: T1, callback: (err: NodeJS.ErrnoException) => void) => void;\n    export function callbackify<T1, TResult>(fn: (arg1: T1) => Promise<TResult>): (arg1: T1, callback: (err: NodeJS.ErrnoException, result: TResult) => void) => void;\n    export function callbackify<T1, T2>(fn: (arg1: T1, arg2: T2) => Promise<void>): (arg1: T1, arg2: T2, callback: (err: NodeJS.ErrnoException) => void) => void;\n    export function callbackify<T1, T2, TResult>(fn: (arg1: T1, arg2: T2) => Promise<TResult>): (arg1: T1, arg2: T2, callback: (err: NodeJS.ErrnoException | null, result: TResult) => void) => void;\n    export function callbackify<T1, T2, T3>(fn: (arg1: T1, arg2: T2, arg3: T3) => Promise<void>): (arg1: T1, arg2: T2, arg3: T3, callback: (err: NodeJS.ErrnoException) => void) => void;\n    export function callbackify<T1, T2, T3, TResult>(\n        fn: (arg1: T1, arg2: T2, arg3: T3) => Promise<TResult>\n    ): (arg1: T1, arg2: T2, arg3: T3, callback: (err: NodeJS.ErrnoException | null, result: TResult) => void) => void;\n    export function callbackify<T1, T2, T3, T4>(\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4) => Promise<void>\n    ): (arg1: T1, arg2: T2, arg3: T3, arg4: T4, callback: (err: NodeJS.ErrnoException) => void) => void;\n    export function callbackify<T1, T2, T3, T4, TResult>(\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4) => Promise<TResult>\n    ): (arg1: T1, arg2: T2, arg3: T3, arg4: T4, callback: (err: NodeJS.ErrnoException | null, result: TResult) => void) => void;\n    export function callbackify<T1, T2, T3, T4, T5>(\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5) => Promise<void>\n    ): (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, callback: (err: NodeJS.ErrnoException) => void) => void;\n    export function callbackify<T1, T2, T3, T4, T5, TResult>(\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5) => Promise<TResult>\n    ): (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, callback: (err: NodeJS.ErrnoException | null, result: TResult) => void) => void;\n    export function callbackify<T1, T2, T3, T4, T5, T6>(\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6) => Promise<void>\n    ): (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, callback: (err: NodeJS.ErrnoException) => void) => void;\n    export function callbackify<T1, T2, T3, T4, T5, T6, TResult>(\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6) => Promise<TResult>\n    ): (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, callback: (err: NodeJS.ErrnoException | null, result: TResult) => void) => void;\n    export interface CustomPromisifyLegacy<TCustom extends Function> extends Function {\n        __promisify__: TCustom;\n    }\n    export interface CustomPromisifySymbol<TCustom extends Function> extends Function {\n        [promisify.custom]: TCustom;\n    }\n    export type CustomPromisify<TCustom extends Function> = CustomPromisifySymbol<TCustom> | CustomPromisifyLegacy<TCustom>;\n    /**\n     * Takes a function following the common error-first callback style, i.e. taking\n     * an `(err, value) => ...` callback as the last argument, and returns a version\n     * that returns promises.\n     *\n     * ```js\n     * const util = require('util');\n     * const fs = require('fs');\n     *\n     * const stat = util.promisify(fs.stat);\n     * stat('.').then((stats) => {\n     *   // Do something with `stats`\n     * }).catch((error) => {\n     *   // Handle the error.\n     * });\n     * ```\n     *\n     * Or, equivalently using `async function`s:\n     *\n     * ```js\n     * const util = require('util');\n     * const fs = require('fs');\n     *\n     * const stat = util.promisify(fs.stat);\n     *\n     * async function callStat() {\n     *   const stats = await stat('.');\n     *   console.log(`This directory is owned by ${stats.uid}`);\n     * }\n     * ```\n     *\n     * If there is an `original[util.promisify.custom]` property present, `promisify`will return its value, see `Custom promisified functions`.\n     *\n     * `promisify()` assumes that `original` is a function taking a callback as its\n     * final argument in all cases. If `original` is not a function, `promisify()`will throw an error. If `original` is a function but its last argument is not\n     * an error-first callback, it will still be passed an error-first\n     * callback as its last argument.\n     *\n     * Using `promisify()` on class methods or other methods that use `this` may not\n     * work as expected unless handled specially:\n     *\n     * ```js\n     * const util = require('util');\n     *\n     * class Foo {\n     *   constructor() {\n     *     this.a = 42;\n     *   }\n     *\n     *   bar(callback) {\n     *     callback(null, this.a);\n     *   }\n     * }\n     *\n     * const foo = new Foo();\n     *\n     * const naiveBar = util.promisify(foo.bar);\n     * // TypeError: Cannot read property 'a' of undefined\n     * // naiveBar().then(a => console.log(a));\n     *\n     * naiveBar.call(foo).then((a) => console.log(a)); // '42'\n     *\n     * const bindBar = naiveBar.bind(foo);\n     * bindBar().then((a) => console.log(a)); // '42'\n     * ```\n     * @since v8.0.0\n     */\n    export function promisify<TCustom extends Function>(fn: CustomPromisify<TCustom>): TCustom;\n    export function promisify<TResult>(fn: (callback: (err: any, result: TResult) => void) => void): () => Promise<TResult>;\n    export function promisify(fn: (callback: (err?: any) => void) => void): () => Promise<void>;\n    export function promisify<T1, TResult>(fn: (arg1: T1, callback: (err: any, result: TResult) => void) => void): (arg1: T1) => Promise<TResult>;\n    export function promisify<T1>(fn: (arg1: T1, callback: (err?: any) => void) => void): (arg1: T1) => Promise<void>;\n    export function promisify<T1, T2, TResult>(fn: (arg1: T1, arg2: T2, callback: (err: any, result: TResult) => void) => void): (arg1: T1, arg2: T2) => Promise<TResult>;\n    export function promisify<T1, T2>(fn: (arg1: T1, arg2: T2, callback: (err?: any) => void) => void): (arg1: T1, arg2: T2) => Promise<void>;\n    export function promisify<T1, T2, T3, TResult>(fn: (arg1: T1, arg2: T2, arg3: T3, callback: (err: any, result: TResult) => void) => void): (arg1: T1, arg2: T2, arg3: T3) => Promise<TResult>;\n    export function promisify<T1, T2, T3>(fn: (arg1: T1, arg2: T2, arg3: T3, callback: (err?: any) => void) => void): (arg1: T1, arg2: T2, arg3: T3) => Promise<void>;\n    export function promisify<T1, T2, T3, T4, TResult>(\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, callback: (err: any, result: TResult) => void) => void\n    ): (arg1: T1, arg2: T2, arg3: T3, arg4: T4) => Promise<TResult>;\n    export function promisify<T1, T2, T3, T4>(fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, callback: (err?: any) => void) => void): (arg1: T1, arg2: T2, arg3: T3, arg4: T4) => Promise<void>;\n    export function promisify<T1, T2, T3, T4, T5, TResult>(\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, callback: (err: any, result: TResult) => void) => void\n    ): (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5) => Promise<TResult>;\n    export function promisify<T1, T2, T3, T4, T5>(\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, callback: (err?: any) => void) => void\n    ): (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5) => Promise<void>;\n    export function promisify(fn: Function): Function;\n    export namespace promisify {\n        /**\n         * That can be used to declare custom promisified variants of functions.\n         */\n        const custom: unique symbol;\n    }\n    /**\n     * An implementation of the [WHATWG Encoding Standard](https://encoding.spec.whatwg.org/) `TextDecoder` API.\n     *\n     * ```js\n     * const decoder = new TextDecoder('shift_jis');\n     * let string = '';\n     * let buffer;\n     * while (buffer = getNextChunkSomehow()) {\n     *   string += decoder.decode(buffer, { stream: true });\n     * }\n     * string += decoder.decode(); // end-of-stream\n     * ```\n     * @since v8.3.0\n     */\n    export class TextDecoder {\n        /**\n         * The encoding supported by the `TextDecoder` instance.\n         */\n        readonly encoding: string;\n        /**\n         * The value will be `true` if decoding errors result in a `TypeError` being\n         * thrown.\n         */\n        readonly fatal: boolean;\n        /**\n         * The value will be `true` if the decoding result will include the byte order\n         * mark.\n         */\n        readonly ignoreBOM: boolean;\n        constructor(\n            encoding?: string,\n            options?: {\n                fatal?: boolean | undefined;\n                ignoreBOM?: boolean | undefined;\n            }\n        );\n        /**\n         * Decodes the `input` and returns a string. If `options.stream` is `true`, any\n         * incomplete byte sequences occurring at the end of the `input` are buffered\n         * internally and emitted after the next call to `textDecoder.decode()`.\n         *\n         * If `textDecoder.fatal` is `true`, decoding errors that occur will result in a`TypeError` being thrown.\n         * @param input An `ArrayBuffer`, `DataView` or `TypedArray` instance containing the encoded data.\n         */\n        decode(\n            input?: NodeJS.ArrayBufferView | ArrayBuffer | null,\n            options?: {\n                stream?: boolean | undefined;\n            }\n        ): string;\n    }\n    export interface EncodeIntoResult {\n        /**\n         * The read Unicode code units of input.\n         */\n        read: number;\n        /**\n         * The written UTF-8 bytes of output.\n         */\n        written: number;\n    }\n    export { types };\n    /**\n     * An implementation of the [WHATWG Encoding Standard](https://encoding.spec.whatwg.org/) `TextEncoder` API. All\n     * instances of `TextEncoder` only support UTF-8 encoding.\n     *\n     * ```js\n     * const encoder = new TextEncoder();\n     * const uint8array = encoder.encode('this is some data');\n     * ```\n     *\n     * The `TextEncoder` class is also available on the global object.\n     * @since v8.3.0\n     */\n    export class TextEncoder {\n        /**\n         * The encoding supported by the `TextEncoder` instance. Always set to `'utf-8'`.\n         */\n        readonly encoding: string;\n        /**\n         * UTF-8 encodes the `input` string and returns a `Uint8Array` containing the\n         * encoded bytes.\n         * @param [input='an empty string'] The text to encode.\n         */\n        encode(input?: string): Uint8Array;\n        /**\n         * UTF-8 encodes the `src` string to the `dest` Uint8Array and returns an object\n         * containing the read Unicode code units and written UTF-8 bytes.\n         *\n         * ```js\n         * const encoder = new TextEncoder();\n         * const src = 'this is some data';\n         * const dest = new Uint8Array(10);\n         * const { read, written } = encoder.encodeInto(src, dest);\n         * ```\n         * @param src The text to encode.\n         * @param dest The array to hold the encode result.\n         */\n        encodeInto(src: string, dest: Uint8Array): EncodeIntoResult;\n    }\n}\ndeclare module 'util/types' {\n    export * from 'util/types';\n}\ndeclare module 'util/types' {\n    import { KeyObject, webcrypto } from 'node:crypto';\n    /**\n     * Returns `true` if the value is a built-in [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) or\n     * [`SharedArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer) instance.\n     *\n     * See also `util.types.isArrayBuffer()` and `util.types.isSharedArrayBuffer()`.\n     *\n     * ```js\n     * util.types.isAnyArrayBuffer(new ArrayBuffer());  // Returns true\n     * util.types.isAnyArrayBuffer(new SharedArrayBuffer());  // Returns true\n     * ```\n     * @since v10.0.0\n     */\n    function isAnyArrayBuffer(object: unknown): object is ArrayBufferLike;\n    /**\n     * Returns `true` if the value is an `arguments` object.\n     *\n     * ```js\n     * function foo() {\n     *   util.types.isArgumentsObject(arguments);  // Returns true\n     * }\n     * ```\n     * @since v10.0.0\n     */\n    function isArgumentsObject(object: unknown): object is IArguments;\n    /**\n     * Returns `true` if the value is a built-in [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) instance.\n     * This does _not_ include [`SharedArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer) instances. Usually, it is\n     * desirable to test for both; See `util.types.isAnyArrayBuffer()` for that.\n     *\n     * ```js\n     * util.types.isArrayBuffer(new ArrayBuffer());  // Returns true\n     * util.types.isArrayBuffer(new SharedArrayBuffer());  // Returns false\n     * ```\n     * @since v10.0.0\n     */\n    function isArrayBuffer(object: unknown): object is ArrayBuffer;\n    /**\n     * Returns `true` if the value is an instance of one of the [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) views, such as typed\n     * array objects or [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView). Equivalent to\n     * [`ArrayBuffer.isView()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/isView).\n     *\n     * ```js\n     * util.types.isArrayBufferView(new Int8Array());  // true\n     * util.types.isArrayBufferView(Buffer.from('hello world')); // true\n     * util.types.isArrayBufferView(new DataView(new ArrayBuffer(16)));  // true\n     * util.types.isArrayBufferView(new ArrayBuffer());  // false\n     * ```\n     * @since v10.0.0\n     */\n    function isArrayBufferView(object: unknown): object is NodeJS.ArrayBufferView;\n    /**\n     * Returns `true` if the value is an [async function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function).\n     * This only reports back what the JavaScript engine is seeing;\n     * in particular, the return value may not match the original source code if\n     * a transpilation tool was used.\n     *\n     * ```js\n     * util.types.isAsyncFunction(function foo() {});  // Returns false\n     * util.types.isAsyncFunction(async function foo() {});  // Returns true\n     * ```\n     * @since v10.0.0\n     */\n    function isAsyncFunction(object: unknown): boolean;\n    /**\n     * Returns `true` if the value is a `BigInt64Array` instance.\n     *\n     * ```js\n     * util.types.isBigInt64Array(new BigInt64Array());   // Returns true\n     * util.types.isBigInt64Array(new BigUint64Array());  // Returns false\n     * ```\n     * @since v10.0.0\n     */\n    function isBigInt64Array(value: unknown): value is BigInt64Array;\n    /**\n     * Returns `true` if the value is a `BigUint64Array` instance.\n     *\n     * ```js\n     * util.types.isBigUint64Array(new BigInt64Array());   // Returns false\n     * util.types.isBigUint64Array(new BigUint64Array());  // Returns true\n     * ```\n     * @since v10.0.0\n     */\n    function isBigUint64Array(value: unknown): value is BigUint64Array;\n    /**\n     * Returns `true` if the value is a boolean object, e.g. created\n     * by `new Boolean()`.\n     *\n     * ```js\n     * util.types.isBooleanObject(false);  // Returns false\n     * util.types.isBooleanObject(true);   // Returns false\n     * util.types.isBooleanObject(new Boolean(false)); // Returns true\n     * util.types.isBooleanObject(new Boolean(true));  // Returns true\n     * util.types.isBooleanObject(Boolean(false)); // Returns false\n     * util.types.isBooleanObject(Boolean(true));  // Returns false\n     * ```\n     * @since v10.0.0\n     */\n    function isBooleanObject(object: unknown): object is Boolean;\n    /**\n     * Returns `true` if the value is any boxed primitive object, e.g. created\n     * by `new Boolean()`, `new String()` or `Object(Symbol())`.\n     *\n     * For example:\n     *\n     * ```js\n     * util.types.isBoxedPrimitive(false); // Returns false\n     * util.types.isBoxedPrimitive(new Boolean(false)); // Returns true\n     * util.types.isBoxedPrimitive(Symbol('foo')); // Returns false\n     * util.types.isBoxedPrimitive(Object(Symbol('foo'))); // Returns true\n     * util.types.isBoxedPrimitive(Object(BigInt(5))); // Returns true\n     * ```\n     * @since v10.11.0\n     */\n    function isBoxedPrimitive(object: unknown): object is String | Number | BigInt | Boolean | Symbol;\n    /**\n     * Returns `true` if the value is a built-in [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) instance.\n     *\n     * ```js\n     * const ab = new ArrayBuffer(20);\n     * util.types.isDataView(new DataView(ab));  // Returns true\n     * util.types.isDataView(new Float64Array());  // Returns false\n     * ```\n     *\n     * See also [`ArrayBuffer.isView()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/isView).\n     * @since v10.0.0\n     */\n    function isDataView(object: unknown): object is DataView;\n    /**\n     * Returns `true` if the value is a built-in [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instance.\n     *\n     * ```js\n     * util.types.isDate(new Date());  // Returns true\n     * ```\n     * @since v10.0.0\n     */\n    function isDate(object: unknown): object is Date;\n    /**\n     * Returns `true` if the value is a native `External` value.\n     *\n     * A native `External` value is a special type of object that contains a\n     * raw C++ pointer (`void*`) for access from native code, and has no other\n     * properties. Such objects are created either by Node.js internals or native\n     * addons. In JavaScript, they are [frozen](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze) objects with a`null` prototype.\n     *\n     * ```c\n     * #include <js_native_api.h>\n     * #include <stdlib.h>\n     * napi_value result;\n     * static napi_value MyNapi(napi_env env, napi_callback_info info) {\n     *   int* raw = (int*) malloc(1024);\n     *   napi_status status = napi_create_external(env, (void*) raw, NULL, NULL, &#x26;result);\n     *   if (status != napi_ok) {\n     *     napi_throw_error(env, NULL, \"napi_create_external failed\");\n     *     return NULL;\n     *   }\n     *   return result;\n     * }\n     * ...\n     * DECLARE_NAPI_PROPERTY(\"myNapi\", MyNapi)\n     * ...\n     * ```\n     *\n     * ```js\n     * const native = require('napi_addon.node');\n     * const data = native.myNapi();\n     * util.types.isExternal(data); // returns true\n     * util.types.isExternal(0); // returns false\n     * util.types.isExternal(new String('foo')); // returns false\n     * ```\n     *\n     * For further information on `napi_create_external`, refer to `napi_create_external()`.\n     * @since v10.0.0\n     */\n    function isExternal(object: unknown): boolean;\n    /**\n     * Returns `true` if the value is a built-in [`Float32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array) instance.\n     *\n     * ```js\n     * util.types.isFloat32Array(new ArrayBuffer());  // Returns false\n     * util.types.isFloat32Array(new Float32Array());  // Returns true\n     * util.types.isFloat32Array(new Float64Array());  // Returns false\n     * ```\n     * @since v10.0.0\n     */\n    function isFloat32Array(object: unknown): object is Float32Array;\n    /**\n     * Returns `true` if the value is a built-in [`Float64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array) instance.\n     *\n     * ```js\n     * util.types.isFloat64Array(new ArrayBuffer());  // Returns false\n     * util.types.isFloat64Array(new Uint8Array());  // Returns false\n     * util.types.isFloat64Array(new Float64Array());  // Returns true\n     * ```\n     * @since v10.0.0\n     */\n    function isFloat64Array(object: unknown): object is Float64Array;\n    /**\n     * Returns `true` if the value is a generator function.\n     * This only reports back what the JavaScript engine is seeing;\n     * in particular, the return value may not match the original source code if\n     * a transpilation tool was used.\n     *\n     * ```js\n     * util.types.isGeneratorFunction(function foo() {});  // Returns false\n     * util.types.isGeneratorFunction(function* foo() {});  // Returns true\n     * ```\n     * @since v10.0.0\n     */\n    function isGeneratorFunction(object: unknown): object is GeneratorFunction;\n    /**\n     * Returns `true` if the value is a generator object as returned from a\n     * built-in generator function.\n     * This only reports back what the JavaScript engine is seeing;\n     * in particular, the return value may not match the original source code if\n     * a transpilation tool was used.\n     *\n     * ```js\n     * function* foo() {}\n     * const generator = foo();\n     * util.types.isGeneratorObject(generator);  // Returns true\n     * ```\n     * @since v10.0.0\n     */\n    function isGeneratorObject(object: unknown): object is Generator;\n    /**\n     * Returns `true` if the value is a built-in [`Int8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array) instance.\n     *\n     * ```js\n     * util.types.isInt8Array(new ArrayBuffer());  // Returns false\n     * util.types.isInt8Array(new Int8Array());  // Returns true\n     * util.types.isInt8Array(new Float64Array());  // Returns false\n     * ```\n     * @since v10.0.0\n     */\n    function isInt8Array(object: unknown): object is Int8Array;\n    /**\n     * Returns `true` if the value is a built-in [`Int16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array) instance.\n     *\n     * ```js\n     * util.types.isInt16Array(new ArrayBuffer());  // Returns false\n     * util.types.isInt16Array(new Int16Array());  // Returns true\n     * util.types.isInt16Array(new Float64Array());  // Returns false\n     * ```\n     * @since v10.0.0\n     */\n    function isInt16Array(object: unknown): object is Int16Array;\n    /**\n     * Returns `true` if the value is a built-in [`Int32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array) instance.\n     *\n     * ```js\n     * util.types.isInt32Array(new ArrayBuffer());  // Returns false\n     * util.types.isInt32Array(new Int32Array());  // Returns true\n     * util.types.isInt32Array(new Float64Array());  // Returns false\n     * ```\n     * @since v10.0.0\n     */\n    function isInt32Array(object: unknown): object is Int32Array;\n    /**\n     * Returns `true` if the value is a built-in [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) instance.\n     *\n     * ```js\n     * util.types.isMap(new Map());  // Returns true\n     * ```\n     * @since v10.0.0\n     */\n    function isMap<T>(object: T | {}): object is T extends ReadonlyMap<any, any> ? (unknown extends T ? never : ReadonlyMap<any, any>) : Map<unknown, unknown>;\n    /**\n     * Returns `true` if the value is an iterator returned for a built-in [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) instance.\n     *\n     * ```js\n     * const map = new Map();\n     * util.types.isMapIterator(map.keys());  // Returns true\n     * util.types.isMapIterator(map.values());  // Returns true\n     * util.types.isMapIterator(map.entries());  // Returns true\n     * util.types.isMapIterator(map[Symbol.iterator]());  // Returns true\n     * ```\n     * @since v10.0.0\n     */\n    function isMapIterator(object: unknown): boolean;\n    /**\n     * Returns `true` if the value is an instance of a [Module Namespace Object](https://tc39.github.io/ecma262/#sec-module-namespace-exotic-objects).\n     *\n     * ```js\n     * import * as ns from './a.js';\n     *\n     * util.types.isModuleNamespaceObject(ns);  // Returns true\n     * ```\n     * @since v10.0.0\n     */\n    function isModuleNamespaceObject(value: unknown): boolean;\n    /**\n     * Returns `true` if the value is an instance of a built-in `Error` type.\n     *\n     * ```js\n     * util.types.isNativeError(new Error());  // Returns true\n     * util.types.isNativeError(new TypeError());  // Returns true\n     * util.types.isNativeError(new RangeError());  // Returns true\n     * ```\n     * @since v10.0.0\n     */\n    function isNativeError(object: unknown): object is Error;\n    /**\n     * Returns `true` if the value is a number object, e.g. created\n     * by `new Number()`.\n     *\n     * ```js\n     * util.types.isNumberObject(0);  // Returns false\n     * util.types.isNumberObject(new Number(0));   // Returns true\n     * ```\n     * @since v10.0.0\n     */\n    function isNumberObject(object: unknown): object is Number;\n    /**\n     * Returns `true` if the value is a built-in [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\n     *\n     * ```js\n     * util.types.isPromise(Promise.resolve(42));  // Returns true\n     * ```\n     * @since v10.0.0\n     */\n    function isPromise(object: unknown): object is Promise<unknown>;\n    /**\n     * Returns `true` if the value is a [`Proxy`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy) instance.\n     *\n     * ```js\n     * const target = {};\n     * const proxy = new Proxy(target, {});\n     * util.types.isProxy(target);  // Returns false\n     * util.types.isProxy(proxy);  // Returns true\n     * ```\n     * @since v10.0.0\n     */\n    function isProxy(object: unknown): boolean;\n    /**\n     * Returns `true` if the value is a regular expression object.\n     *\n     * ```js\n     * util.types.isRegExp(/abc/);  // Returns true\n     * util.types.isRegExp(new RegExp('abc'));  // Returns true\n     * ```\n     * @since v10.0.0\n     */\n    function isRegExp(object: unknown): object is RegExp;\n    /**\n     * Returns `true` if the value is a built-in [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) instance.\n     *\n     * ```js\n     * util.types.isSet(new Set());  // Returns true\n     * ```\n     * @since v10.0.0\n     */\n    function isSet<T>(object: T | {}): object is T extends ReadonlySet<any> ? (unknown extends T ? never : ReadonlySet<any>) : Set<unknown>;\n    /**\n     * Returns `true` if the value is an iterator returned for a built-in [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) instance.\n     *\n     * ```js\n     * const set = new Set();\n     * util.types.isSetIterator(set.keys());  // Returns true\n     * util.types.isSetIterator(set.values());  // Returns true\n     * util.types.isSetIterator(set.entries());  // Returns true\n     * util.types.isSetIterator(set[Symbol.iterator]());  // Returns true\n     * ```\n     * @since v10.0.0\n     */\n    function isSetIterator(object: unknown): boolean;\n    /**\n     * Returns `true` if the value is a built-in [`SharedArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer) instance.\n     * This does _not_ include [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) instances. Usually, it is\n     * desirable to test for both; See `util.types.isAnyArrayBuffer()` for that.\n     *\n     * ```js\n     * util.types.isSharedArrayBuffer(new ArrayBuffer());  // Returns false\n     * util.types.isSharedArrayBuffer(new SharedArrayBuffer());  // Returns true\n     * ```\n     * @since v10.0.0\n     */\n    function isSharedArrayBuffer(object: unknown): object is SharedArrayBuffer;\n    /**\n     * Returns `true` if the value is a string object, e.g. created\n     * by `new String()`.\n     *\n     * ```js\n     * util.types.isStringObject('foo');  // Returns false\n     * util.types.isStringObject(new String('foo'));   // Returns true\n     * ```\n     * @since v10.0.0\n     */\n    function isStringObject(object: unknown): object is String;\n    /**\n     * Returns `true` if the value is a symbol object, created\n     * by calling `Object()` on a `Symbol` primitive.\n     *\n     * ```js\n     * const symbol = Symbol('foo');\n     * util.types.isSymbolObject(symbol);  // Returns false\n     * util.types.isSymbolObject(Object(symbol));   // Returns true\n     * ```\n     * @since v10.0.0\n     */\n    function isSymbolObject(object: unknown): object is Symbol;\n    /**\n     * Returns `true` if the value is a built-in [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) instance.\n     *\n     * ```js\n     * util.types.isTypedArray(new ArrayBuffer());  // Returns false\n     * util.types.isTypedArray(new Uint8Array());  // Returns true\n     * util.types.isTypedArray(new Float64Array());  // Returns true\n     * ```\n     *\n     * See also [`ArrayBuffer.isView()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/isView).\n     * @since v10.0.0\n     */\n    function isTypedArray(object: unknown): object is NodeJS.TypedArray;\n    /**\n     * Returns `true` if the value is a built-in [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) instance.\n     *\n     * ```js\n     * util.types.isUint8Array(new ArrayBuffer());  // Returns false\n     * util.types.isUint8Array(new Uint8Array());  // Returns true\n     * util.types.isUint8Array(new Float64Array());  // Returns false\n     * ```\n     * @since v10.0.0\n     */\n    function isUint8Array(object: unknown): object is Uint8Array;\n    /**\n     * Returns `true` if the value is a built-in [`Uint8ClampedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray) instance.\n     *\n     * ```js\n     * util.types.isUint8ClampedArray(new ArrayBuffer());  // Returns false\n     * util.types.isUint8ClampedArray(new Uint8ClampedArray());  // Returns true\n     * util.types.isUint8ClampedArray(new Float64Array());  // Returns false\n     * ```\n     * @since v10.0.0\n     */\n    function isUint8ClampedArray(object: unknown): object is Uint8ClampedArray;\n    /**\n     * Returns `true` if the value is a built-in [`Uint16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array) instance.\n     *\n     * ```js\n     * util.types.isUint16Array(new ArrayBuffer());  // Returns false\n     * util.types.isUint16Array(new Uint16Array());  // Returns true\n     * util.types.isUint16Array(new Float64Array());  // Returns false\n     * ```\n     * @since v10.0.0\n     */\n    function isUint16Array(object: unknown): object is Uint16Array;\n    /**\n     * Returns `true` if the value is a built-in [`Uint32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array) instance.\n     *\n     * ```js\n     * util.types.isUint32Array(new ArrayBuffer());  // Returns false\n     * util.types.isUint32Array(new Uint32Array());  // Returns true\n     * util.types.isUint32Array(new Float64Array());  // Returns false\n     * ```\n     * @since v10.0.0\n     */\n    function isUint32Array(object: unknown): object is Uint32Array;\n    /**\n     * Returns `true` if the value is a built-in [`WeakMap`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap) instance.\n     *\n     * ```js\n     * util.types.isWeakMap(new WeakMap());  // Returns true\n     * ```\n     * @since v10.0.0\n     */\n    function isWeakMap(object: unknown): object is WeakMap<object, unknown>;\n    /**\n     * Returns `true` if the value is a built-in [`WeakSet`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet) instance.\n     *\n     * ```js\n     * util.types.isWeakSet(new WeakSet());  // Returns true\n     * ```\n     * @since v10.0.0\n     */\n    function isWeakSet(object: unknown): object is WeakSet<object>;\n    /**\n     * Returns `true` if `value` is a `KeyObject`, `false` otherwise.\n     * @since v16.2.0\n     */\n    function isKeyObject(object: unknown): object is KeyObject;\n    /**\n     * Returns `true` if `value` is a `CryptoKey`, `false` otherwise.\n     * @since v16.2.0\n     */\n    function isCryptoKey(object: unknown): object is webcrypto.CryptoKey;\n}\ndeclare module 'node:util' {\n    export * from 'util';\n}\ndeclare module 'node:util/types' {\n    export * from 'util/types';\n}\n"},"./node_modules/raw-loader/dist/cjs.js!./node_modules/postman-collection/types/index.d.ts":function(e,n,t){"use strict";t.r(n),n.default='// Type definitions for postman-collection 4.0.2\n// Project: https://github.com/postmanlabs/postman-collection\n// Definitions by: PostmanLabs\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.4\n/// <reference types="node" />\n\ndeclare module "postman-collection" {\n\n    /**\n     * @example\n     * Create a new CertificateList\n     * var CertificateList = require(\'postman-collection\').CertificateList,\n     *    certificateList = new CertificateList({}, [\n     *        {\n     *            name: \'my certificate for example.com\',\n     *            matches: [\'https://example.com/*\'],\n     *            key: { src: \'/path/to/key/file\' },\n     *            cert: { src: \'/path/to/certificate/file\' }\n     *        },\n     *        {\n     *            name: \'my certificate for example2.com\',\n     *            matches: [\'https://example2.com/*\'],\n     *            key: { src: \'/path/to/key/file\' },\n     *            cert: { src: \'/path/to/key/file\' }\n     *        }\n     * ]);\n     * @param parent - -\n     * @param list - The list of certificate representations\n     */\n    export class CertificateList extends PropertyList {\n        constructor(parent: any, list: any[]);\n        /**\n         * Matches the given url against the member certificates\' allowed matches\n         * and returns the certificate that can be used for the url.\n         * @param url - The url to find the certificate for\n         * @returns The matched certificate\n         */\n        resolveOne(url: string): Certificate.definition;\n        /**\n         * Checks if the given object is a CertificateList\n         * @param obj - -\n         */\n        static isCertificateList(obj: any): boolean;\n    }\n\n    export namespace Certificate {\n        /**\n         * The following is the object representation accepted as param for the Certificate constructor.\n         * Also the type of the object returned when Property.toJSON or Property.toObjectResolved is called on a\n         * Certificate instance.\n         * @example\n         * JSON definition of an example certificate object\n         * {\n         *     "name": "My certificate for example.com",\n         *     "matches": ["https://example.com/*"],\n         *     "key": { "src": "/path/to/key" },\n         *     "cert": { "src": "/User/path/to/certificate" },\n         *     "passphrase": "iampassphrase"\n         * }\n         * @property [name] - A name for the certificate\n         * @property [matches] - A list of match patterns\n         * @property [key] - Object with path on the file system for private key file, as src\n         * @property [cert] - Object with path on the file system for certificate file, as src\n         * @property [passphrase] - The passphrase for the certificate key\n         */\n        type definition = {\n            name?: string;\n            matches?: any[];\n            key?: any;\n            cert?: any;\n            passphrase?: string;\n        };\n    }\n\n    /**\n     * A Certificate definition that represents the ssl certificate\n     * to be used for an url.\n     * Properties can then use the `.toObjectResolved` function to procure an object representation of the property with\n     * all the variable references replaced by corresponding values.\n     * @example\n     *  Create a new Certificate\n     *\n     * var Certificate = require(\'postman-collection\').Certificate,\n     *    certificate = new Certificate({\n     *     name: \'Certificate for example.com\',\n     *     matches: [\'example.com\'],\n     *     key: { src: \'/User/path/to/certificate/key\' },\n     *     cert: { src: \'/User/path/to/certificate\' },\n     *     passphrase: \'iampassphrase\'\n     * });\n     * @param [options] - Object with matches, key, cert and passphrase\n     */\n    export class Certificate extends Property {\n        constructor(options?: Certificate.definition);\n        /**\n         * Updates the certificate with the given properties.\n         * @param [options] - Object with matches, key, cert and passphrase\n         */\n        update(options?: Certificate.definition): void;\n        /**\n         * Unique identifier\n         */\n        id: string;\n        /**\n         * Name for user reference\n         */\n        name: string;\n        /**\n         * List of match pattern\n         */\n        matches: UrlMatchPatternList;\n        /**\n         * Private Key\n         */\n        key: any;\n        /**\n         * Certificate\n         */\n        cert: any;\n        /**\n         * PFX or PKCS12 Certificate\n         */\n        pfx: any;\n        /**\n         * passphrase\n         */\n        passphrase: any;\n        /**\n         * Checks if the certificate can be applied to a given url\n         * @param url - The url string for which the certificate is checked for match.\n         */\n        canApplyTo(url: string | Url): void;\n        /**\n         * Allows the serialization of a Certificate\n         *\n         * This is overridden, in order to ensure that certificate contents are not accidentally serialized,\n         * which can be a security risk.\n         */\n        toJSON(): void;\n        /**\n         * Checks if the given object is a Certificate\n         * @param obj - -\n         */\n        static isCertificate(obj: any): boolean;\n    }\n\n    export namespace Collection {\n        /**\n         * The following is the object structure accepted as constructor parameter while calling `new Collection(...)`. It is\n         * also the structure exported when Property.toJSON or Property.toObjectResolved is called on a\n         * collection instance.\n         * @example\n         * JSON definition of an example collection\n         * {\n         *     "info": {\n         *         "name": "My Postman Collection",\n         *         "version": "1.0.0"\n         *     }\n         *     "item": [{\n         *         "request": "{{base-url}}/get"\n         *     }],\n         *     "variables": [{\n         *         "id": "base-url",\n         *         "value": "https://postman-echo.com"\n         *     }]\n         * }\n         * @property [info] - The meta information regarding the collection is provided as the `info` object.\n         * @property [info.id] - Every collection is identified by the unique value of this property. It is recommended\n         * that you maintain the same id since changing the id usually implies that is a different collection than it was\n         * originally.\n         * @property [info.name] - A collection\'s friendly name is defined by this property. You would want to set this\n         * field to a value that would allow you to easily identify this collection among a bunch of other collections.\n         * @property [info.version] - Postman allows you to version your collections as they grow, and this field holds\n         * the version number. While optional, it is recommended that you use this field to its fullest extent.\n         * @property [item] - Items are the basic unit for a Postman collection.\n         * You can think of them as corresponding to a single API endpoint. Each Item has one request and may have multiple API\n         * responses associated with it.\n         * @property [variable] - Collection variables allow you to define a set of variables,\n         * that are a *part of the collection*, as opposed to environments, which are separate entities.\n         * @property [auth] - Collection auth allows you to define an authentication,\n         * that *applies to all items* in the collection.\n         * @property [event] - Postman allows you to configure scripts to run when specific events\n         * occur.\n         * @property [version] - Version of the collection expressed in [semver](http://semver.org/)\n         * format.\n         */\n        type definition = {\n            info?: {\n                id?: string;\n                name?: string;\n                version?: string;\n            };\n            item?: (Item.definition | ItemGroup.definition)[];\n            variable?: Variable.definition;\n            auth?: RequestAuth.definition;\n            event?: Event.definition[];\n            version?: string | Version.definition;\n        };\n    }\n\n    /**\n     * Create or load an instance of [Postman Collection](https://www.getpostman.com/docs/collections) as a JavaScript\n     * object that can be manipulated easily.\n     *\n     * A collection lets you group individual requests together. These requests can be further organized into folders to\n     * accurately mirror your API. Requests can also store sample responses when saved in a collection. You can add\n     * metadata like name and description too so that all the information that a developer needs to use your API is\n     * available easily.\n     * @example\n     * Load a Collection JSON file from disk\n     * var fs = require(\'fs\'), // needed to read JSON file from disk\n     *     pretty = function (obj) { // function to neatly log the collection object to console\n     *         return require(\'util\').inspect(obj, {colors: true});\n     *     },\n     *     Collection = require(\'postman-collection\').Collection,\n     *     myCollection;\n     *\n     * // Load a collection to memory from a JSON file on disk (say, sample-collection.json)\n     * myCollection = new Collection(JSON.stringify(fs.readFileSync(\'sample-collection.json\').toString()));\n     *\n     * // log items at root level of the collection\n     * console.log(pretty(myCollection));\n     * @example\n     * Create a blank collection and write to file\n     * var fs = require(\'fs\'),\n     *     Collection = require(\'postman-collection\').Collection,\n     *     mycollection;\n     *\n     * myCollection = new Collection({\n     *     info: {\n     *         name: "my Collection"\n     *     }\n     * });\n     *\n     * // log the collection to console to see its contents\n     * fs.writeFileSync(\'myCollection.postman_collection\', JSON.stringify(myCollection, null, 2));\n     * @param [definition] - Pass the initial definition of the collection (name, id, etc) as\n     * the `definition` parameter. The definition object is structured exactly as the collection format as defined in\n     * [https://www.schema.getpostman.com/](https://www.schema.getpostman.com/). This parameter is optional. That\n     * implies that you can create an empty instance of collection and add requests and other properties in order to\n     * build a new collection.\n     * @param [environments] - The collection instance constructor accepts the second parameter as an\n     * array of environment objects. Environments objects store variable definitions that are inherited by\n     * Collection.variables. These environment variables are usually the ones that are exported from the Postman\n     * App to use them with different collections. Refer to Postman\n     * [documentation on environment variables](https://www.getpostman.com/docs/environments).\n     */\n    export class Collection extends ItemGroup {\n        constructor(definition?: Collection.definition, environments?: object[]);\n        /**\n         * The `variables` property holds a list of variables that are associated with a Collection. These variables\n         * are stored within a collection so that they can be re-used and replaced in rest of the collection. For\n         * example, if one has a variable named `port` with value `8080`, then one can write a request Url\n         * as `http://localhost:{{port}}/my/endpoint` and that will be replaced to form\n         * `http://localhost:8080/my/endpoint`. **Collection Variables** are like\n         * [environment variables](https://www.getpostman.com/docs/environments), but stored locally within a\n         * collection.\n         * @example\n         * Creating a collection with variables\n         * var fs = require(\'fs\'),\n         *     Collection = require(\'postman-collection\').Collection,\n         *     mycollection;\n         *\n         * // Create a new empty collection.\n         * myCollection = new Collection();\n         *\n         * // Add a variable to the collection\n         * myCollection.variables.add({\n         *     id: \'apiBaseUrl\',\n         *     value: \'http://timeapi.org\',\n         *     type: \'string\'\n         * });\n         *\n         * //Add a request that uses the variable that we just added.\n         * myCollection.items.add({\n         *     id: \'utc-time-now\',\n         *     name: \'Get the current time in UTC\',\n         *     request: \'{{apiBaseUrl}}/utc/now\'\n         * });\n         */\n        variables: VariableList;\n        /**\n         * The `version` key in collection is used to express the version of the collection. It is useful in either\n         * tracking development iteration of an API server or the version of an API itself. It can also be used to\n         * represent the number of iterations of the collection as it is updated through its lifetime.\n         *\n         * Version is expressed in [semver](http://semver.org/) format.\n         */\n        version: Version;\n        /**\n         * Using this function, one can sync the values of collection variables from a reference object.\n         * @param obj - -\n         * @param [track] - -\n         */\n        syncVariablesFrom(obj: any, track?: boolean): any;\n        /**\n         * Transfer the variables in this scope to an object\n         * @param [obj] - -\n         */\n        syncVariablesTo(obj?: any): any;\n        /**\n         * Convert the collection to JSON compatible plain object\n         */\n        toJSON(): any;\n        /**\n         * Check whether an object is an instance of ItemGroup.\n         * @param obj - -\n         */\n        static isCollection(obj: any): boolean;\n        /**\n         * In this list, one can define the Scripts to be executed when an event is triggered. Events are\n         * triggered before certain actions are taken on a Collection, Request, etc. For example, executing a\n         * request causes the `prerequest` and the `test` events to be triggered.\n         * @example\n         * Executing a common test script for all requests in a collection\n         * var fs = require(\'fs\'), // needed to read JSON file from disk\n         *     Collection = require(\'postman-collection\').Collection,\n         *     myCollection;\n         *\n         * // Load a collection to memory from a JSON file on disk (say, sample-collection.json)\n         * myCollection = new Collection(JSON.stringify(fs.readFileSync(\'sample-collection.json\').toString()));\n         *\n         * // Add an event listener to the collection that listens to the `test` event.\n         * myCollection.events.add({\n         *     listen: \'test\',\n         *     script: {\n         *         exec: \'tests["Status code is 200"] = (responseCode.code === 200)\'\n         *     }\n         * });\n         */\n        events: EventList;\n    }\n\n    /**\n     * Contains a list of header elements\n     * @param parent - -\n     * @param cookies - -\n     */\n    export class CookieList extends PropertyList {\n        constructor(parent: any, cookies: object[]);\n        /**\n         * Checks if the given object is a CookieList\n         * @param obj - -\n         */\n        static isCookieList(obj: any): boolean;\n    }\n\n    export namespace Cookie {\n        /**\n         * The following is the object structure accepted as constructor parameter while calling `new Cookie(...)`. It is\n         * also the structure exported when Property.toJSON or Property.toObjectResolved is called on a\n         * Cookie instance.\n         * @example\n         * JSON definition of an example cookie\n         * {\n         *     "key": "my-cookie-name",\n         *     "expires": "1464769543832",\n         *      // UNIX timestamp, in *milliseconds*\n         *     "maxAge": "300",\n         *      // In seconds. In this case, the Cookie is valid for 5 minutes\n         *     "domain": "something.example.com",\n         *     "path": "/",\n         *     "secure": false,\n         *     "httpOnly": true,\n         *     "session": false,\n         *     "value": "my-cookie-value",\n         *     "extensions": [{\n         *         "key": "Priority",\n         *         "value": "HIGH"\n         *     }]\n         * }\n         * @property [key] - The name of the cookie. Some call it the "name".\n         * @property [value] - The value stored in the Cookie\n         * @property [expires] - Expires sets an expiry date for when a cookie gets deleted. It should either be a\n         * date object or timestamp string of date.\n         * @property [maxAge] - Max-age sets the time in seconds for when a cookie will be deleted.\n         * @property [domain] - Indicates the domain(s) for which the cookie should be sent.\n         * @property [path] - Limits the scope of the cookie to a specified path, e.g: "/accounts"\n         * @property [secure] - A secure cookie will only be sent to the server when a request is made using SSL and\n         * the HTTPS protocol.\n         * The idea that the contents of the cookie are of high value and could be potentially damaging to transmit\n         * as clear text.\n         * @property [httpOnly] - The idea behind HTTP-only cookies is to instruct a browser that a cookie should never\n         * be accessible via JavaScript through the document.cookie property. This feature was designed as a security measure\n         * to help prevent cross-site scripting (XSS) attacks perpetrated by stealing cookies via JavaScript.\n         * @property [hostOnly] - Indicates that this cookie is only valid for the given domain (and not its parent or\n         * child domains.)\n         * @property [session] - Indicates whether this is a Session Cookie. (A transient cookie, which is deleted at\n         * the end of an HTTP session.)\n         * @property [extensions] - Any extra attributes that are extensions to the original Cookie specification can be\n         * specified here.\n         * @property [extensions[].key] - Name of the extension.\n         * @property [extensions[].value] - Value of the extension\n         */\n        type definition = {\n            key?: string;\n            value?: string;\n            expires?: string;\n            maxAge?: number;\n            domain?: string;\n            path?: string;\n            secure?: boolean;\n            httpOnly?: boolean;\n            hostOnly?: boolean;\n            session?: boolean;\n            extensions?: {\n                key?: string;\n                value?: string;\n            };\n        };\n    }\n\n    /**\n     * A Postman Cookie definition that comprehensively represents an HTTP Cookie.\n     * @example\n     * Create a new Cookie\n     * var Cookie = require(\'postman-collection\').Cookie,\n     *     myCookie = new Cookie({\n     *          name: \'my-cookie-name\',\n     *          expires: \'1464769543832\', // UNIX timestamp, in *milliseconds*\n     *          maxAge: \'300\',  // In seconds. In this case, the Cookie is valid for 5 minutes\n     *          domain: \'something.example.com\',\n     *          path: \'/\',\n     *          secure: false,\n     *          httpOnly: true,\n     *          session: false,\n     *          value: \'my-cookie-value\',\n     *          extensions: [{\n     *              key: \'Priority\',\n     *              value: \'HIGH\'\n     *          }]\n     *     });\n     * @example\n     * Parse a Cookie Header\n     * var Cookie = require(\'postman-collection\').Cookie,\n     *     rawHeader = \'myCookie=myValue;Path=/;Expires=Sun, 04-Feb-2018 14:18:27 GMT;Secure;HttpOnly;Priority=HIGH\'\n     *     myCookie = new Cookie(rawHeader);\n     *\n     * console.log(myCookie.toJSON());\n     * @param [options] - Pass the initial definition of the Cookie.\n     */\n    export class Cookie extends PropertyBase {\n        constructor(options?: Cookie.definition);\n        /**\n         * The name of the cookie.\n         */\n        name: string;\n        /**\n         * Expires sets an expiry date for when a cookie gets deleted. It should either be a date object or\n         * timestamp string of date.\n         */\n        expires: Date | string;\n        /**\n         * Max-age sets the time in seconds for when a cookie will be deleted.\n         */\n        maxAge: number;\n        /**\n         * Indicates the domain(s) for which the cookie should be sent.\n         */\n        domain: string;\n        path: string;\n        /**\n         * A secure cookie will only be sent to the server when a request is made using SSL and the HTTPS protocol.\n         * The idea that the contents of the cookie are of high value and could be potentially damaging to transmit\n         * as clear text.\n         */\n        secure: boolean;\n        /**\n         * The idea behind HTTP-only cookies is to instruct a browser that a cookie should never be accessible via\n         * JavaScript through the document.cookie property. This feature was designed as a security measure to help\n         * prevent cross-site scripting (XSS) attacks perpetrated by stealing cookies via JavaScript.\n         */\n        httpOnly: boolean;\n        hostOnly: boolean;\n        /**\n         * Indicates whether this is a Session Cookie.\n         */\n        session: boolean;\n        value: string;\n        /**\n         * Any extra parameters that are not strictly a part of the Cookie spec go here.\n         */\n        extensions: any[];\n        /**\n         * Get the value of this cookie.\n         */\n        valueOf(): string;\n        /**\n         * Converts the Cookie to a single Set-Cookie header string.\n         */\n        toString(): string;\n        /**\n         * Check whether an object is an instance of PostmanCookie.\n         * @param obj - -\n         */\n        static isCookie(obj: any): boolean;\n        /**\n         * Stringifies an Array or PropertyList of Cookies into a single string.\n         * @param cookies - List of cookie definition object\n         */\n        static unparse(cookies: Cookie[]): string;\n        /**\n         * Unparses a single Cookie.\n         * @param cookie - Cookie definition object\n         */\n        static unparseSingle(cookie: Cookie): string;\n        /**\n         * Cookie header parser\n         * @param str - -\n         * @returns A plain cookie options object, use it to create a new Cookie\n         */\n        static parse(str: string): any;\n        /**\n         * Converts the Cookie to a single Set-Cookie header string.\n         * @param cookie - Cookie definition object\n         */\n        static stringify(cookie: Cookie): string;\n    }\n\n    export namespace Description {\n        type definition = {\n            content: string;\n            type: string;\n        };\n    }\n\n    /**\n     * This is one of the properties that are (if provided) processed by all other properties. Any property can have an\n     * instance of `Description` property assigned to it with the key name `description` and it should be treated as\n     * something that "describes" the property within which it belongs. Usually this property is used to generate\n     * documentation and other contextual information for a property in a Collection.\n     * @example\n     * Add a description to an instance of Collection\n     *  var SDK = require(\'postman-collection\'),\n     *     Collection = SDK.Collection,\n     *     Description = SDK.Description,\n     *     mycollection;\n     *\n     * // create a blank collection\n     * myCollection = new Collection();\n     * myCollection.description = new Description({\n     *     content: \'&lt;h1&gt;Hello World&lt;/h1&gt;&lt;p&gt;I am a Collection&lt;/p&gt;\',\n     *     type: \'text/html\'\n     * });\n     *\n     * // alternatively, you could also use the `.describe` method of any property to set or update the description of the\n     * // property.\n     * myCollection.describe(\'Hey! This is a cool collection.\');\n     * @param [definition] - The content of the description can be passed as a string when it\n     * is in `text/plain` format or otherwise be sent as part of an object adhering to the Description.definition\n     * structure having `content` and `type`.\n     */\n    export class Description {\n        constructor(definition?: Description.definition | string);\n        /**\n         * Updates the content of this description property.\n         * @param content - -\n         * @param [type] - -\n         */\n        update(content: string | Description.definition, type?: string): void;\n        /**\n         * The raw content of the description\n         */\n        content: string;\n        /**\n         * The mime-type of the description.\n         */\n        type: string;\n        /**\n         * Returns stringified Description.\n         */\n        toString(): string;\n        /**\n         * Creates a JSON representation of the Description (as a plain Javascript object).\n         */\n        toJSON(): any;\n        /**\n         * Checks whether a property is an instance of Description object.\n         * @param obj - -\n         */\n        static isDescription(obj: any): boolean;\n    }\n\n    /**\n     * A type of PropertyList, EventList handles resolving events from parents. If an ItemGroup contains\n     * a set of events, each Item in that group will inherit those events from its parent, and so on.\n     * @param parent - -\n     * @param populate - -\n     */\n    export class EventList extends PropertyList {\n        constructor(parent: any, populate: object[]);\n        /**\n         * Returns an array of listeners filtered by the listener name\n         * @param name - -\n         */\n        listeners(name: string): Event[];\n        /**\n         * Returns all events with specific listeners only within this list. Refer to EventList.listeners for\n         * procuring all inherited events\n         * @param name - -\n         */\n        listenersOwn(name: string): Event[];\n        /**\n         * Checks if the given object is an EventList.\n         * @param obj - -\n         */\n        static isEventList(obj: any): boolean;\n    }\n\n    export namespace Event {\n        /**\n         * @example\n         * Constructing an event\n         * var Event = require(\'postman-collection\').Event,\n         *     rawEvent = {\n         *         listen: \'test\',\n         *         script: \'tests["response code is 401"] = responseCode.code === 401\'\n         *     },\n         *     myEvent;\n         * myEvent = new Event(rawEvent);\n         * @property listen - The event-name that this script will be called for. Usually either "test" or "prerequest"\n         * @property script - A Script instance that will be executed on this event. In case of a\n         * string, a new Script is created.\n         */\n        type definition = {\n            listen: string;\n            script: Script | string;\n        };\n    }\n\n    /**\n     * A Postman event definition that refers to an event to be listened to and a script reference or definition to be\n     * executed.\n     * @param definition - Pass the initial definition of the event as the options parameter.\n     */\n    export class Event extends Property {\n        constructor(definition: Event.definition);\n        /**\n         * Update an event.\n         * @param definition - -\n         */\n        update(definition: Event.definition): void;\n        /**\n         * Name of the event that this instance is intended to listen to.\n         */\n        listen: string;\n        /**\n         * The script that is to be executed when this event is triggered.\n         */\n        script: Script;\n    }\n\n    export namespace FormParam {\n        /**\n         * @property key - The name ("key") of the form data parameter.\n         * @property value - The value of the parameter.\n         */\n        type definition = {\n            key: string;\n            value: string;\n        };\n    }\n\n    /**\n     * Represents a Form Data parameter, which can exist in request body.\n     * @param options - Pass the initial definition of the form data parameter.\n     */\n    export class FormParam {\n        constructor(options: FormParam.definition);\n        /**\n         * Converts the FormParameter to a single param string.\n         */\n        toString(): string;\n        /**\n         * Returns the value of the form parameter (if any).\n         */\n        valueOf(): any | string;\n        /**\n         * Convert the form-param to JSON compatible plain object.\n         */\n        toJSON(): any;\n        /**\n         * Declare the list index key, so that property lists of form parameters work correctly\n         */\n        static _postman_propertyIndexKey: string;\n        /**\n         * Form params can have multiple values, so set this to true.\n         */\n        static _postman_propertyAllowsMultipleValues: boolean;\n        /**\n         * Parse a form data string into an array of objects, where each object contains a key and a value.\n         */\n        static parse: any;\n    }\n\n    /**\n     * Contains a list of header elements\n     * @param parent - -\n     * @param headers - -\n     */\n    export class HeaderList extends PropertyList {\n        constructor(parent: any, headers: Header[]);\n        /**\n         * Gets size of a list of headers excluding standard header prefix.\n         */\n        contentSize(): number;\n        /**\n         * Checks if the given object is a HeaderList\n         * @param obj - -\n         */\n        static isHeaderList(obj: any): boolean;\n    }\n\n    export namespace Header {\n        /**\n         * @example\n         * Create a header\n         * var Header = require(\'postman-collection\').Header,\n         *     header = new Header({\n         *         key: \'Content-Type\',\n         *         value: \'application/xml\'\n         *     });\n         *\n         * console.log(header.toString()) // prints the string representation of the Header.\n         * @property key - The Header name (e.g: \'Content-Type\')\n         * @property value - The value of the header.\n         */\n        type definition = {\n            key: string;\n            value: string;\n        };\n    }\n\n    /**\n     * Represents an HTTP header, for requests or for responses.\n     * @example\n     * Parse a string of headers into an array of Header objects\n     * var Header = require(\'postman-collection\').Header,\n     *     headerString = \'Content-Type: application/json\\nUser-Agent: MyClientLibrary/2.0\\n\';\n     *\n     * var rawHeaders = Header.parse(headerString);\n     * console.log(rawHeaders); // [{ \'Content-Type\': \'application/json\', \'User-Agent\': \'MyClientLibrary/2.0\' }]\n     *\n     * var headers = rawHeaders.map(function (h) {\n     *     return new Header(h);\n     * });\n     *\n     * function assert(condition, message) {\n     *       if (!condition) {\n     *           message = message || "Assertion failed";\n     *           if (typeof Error !== "undefined") {\n     *               throw new Error(message);\n     *           }\n     *           throw message; //fallback\n     *       }\n     *       else {\n     *           console.log("Assertion passed");\n     *       }\n     *   }\n     *\n     * assert(headerString.trim() === Header.unparse(headers).trim());\n     * @param options - Pass the header definition as an object or the value of the header.\n     * If the value is passed as a string, it should either be in `name:value` format or the second "name" parameter\n     * should be used to pass the name as string\n     * @param [name] - optional override the header name or use when the first parameter is the header value as\n     * string.\n     */\n    export class Header extends Property {\n        constructor(options: Header.definition | string, name?: string);\n        /**\n         * Converts the header to a single header string.\n         */\n        toString(): string;\n        /**\n         * Return the value of this header.\n         */\n        valueOf(): string;\n        /**\n         * Assigns the given properties to the Header\n         * @param options - -\n         */\n        update(options: any): void;\n        /**\n         * The header Key\n         */\n        key: string;\n        /**\n         * The header value\n         */\n        value: string;\n        /**\n         * Parses a multi line header string into an array of Header.definition.\n         * @param headerString - -\n         */\n        static parse(headerString: string): any[];\n        /**\n         * Parses a single Header.\n         * @param header - -\n         */\n        static parseSingle(header: string): any;\n        /**\n         * Stringifies an Array or PropertyList of Headers into a single string.\n         * @param headers - -\n         * @param [separator = \'\\r\\n\'] - Specify a string for separating each header\n         */\n        static unparse(headers: any[] | PropertyList, separator?: string): string;\n        /**\n         * Unparses a single Header.\n         * @param header - -\n         */\n        static unparseSingle(header: string): string;\n        /**\n         * Check whether an object is an instance of PostmanHeader.\n         * @param obj - -\n         */\n        static isHeader(obj: any): boolean;\n        /**\n         * Create a new header instance\n         * @param [value] - Pass the header definition as an object or the value of the header.\n         * If the value is passed as a string, it should either be in `name:value` format or the second "name" parameter\n         * should be used to pass the name as string\n         * @param [name] - optional override the header name or use when the first parameter is the header value as\n         * string.\n         */\n        static create(value?: Header.definition | string, name?: string): Header;\n        /**\n         * This (optional) flag denotes whether this property is disabled or not. Usually, this is helpful when a\n         * property is part of a PropertyList. For example, in a PropertyList of Headers, the ones\n         * that are disabled can be filtered out and not processed.\n         */\n        disabled: boolean;\n    }\n\n    export namespace ItemGroup {\n        /**\n         * The following defines the object (or JSON) structure that one can pass to the ItemGroup while creating a new\n         * ItemGroup instance. This is also the object structure returned when `.toJSON()` is called on an ItemGroup instance.\n         * @example\n         * {\n         *     "name": "Echo Get Requests",\n         *     "id": "echo-get-requests",\n         *     "item": [{\n         *         "request": "https://postman-echo.com/get"\n         *     }, {\n         *         "request": "https://postman-echo.com/headers"\n         *     }],\n         *     "auth": {\n         *         "type": "basic",\n         *         "basic": {\n         *             "username": "jean",\n         *             "password": "{{somethingsecret}}"\n         *         }\n         *     },\n         *     "event": [{\n         *         "listen": "prerequest",\n         *         "script": {\n         *             "type": "text/javascript",\n         *             "exec": "console.log(new Date())"\n         *         }\n         *     }]\n         * }\n         */\n        type definition = {\n            item?: (ItemGroup.definition | Item.definition)[];\n            auth?: RequestAuth.definition;\n            event?: Event.definition[];\n        };\n    }\n\n    /**\n     * An ItemGroup represents a composite list of Item or ItemGroup. In terms of Postman App, ItemGroup\n     * represents a "Folder". This allows one to group Items into subsets that can have their own meaning. An\n     * ItemGroup also allows one to define a subset of common properties to be applied to each Item within it. For\n     * example, a `test` event defined on an ItemGroup is executed while testing any Item that belongs to that group.\n     * Similarly, ItemGroups can have a common {@RequestAuth} defined so that every Request, when processed,\n     * requires to be authenticated using the `auth` defined in the group.\n     *\n     * Essentially, Collection too is a special type of ItemGroup ;-).\n     * @example\n     * Add a new ItemGroup to a collection instance\n     * var Collection = require(\'postman-collection\').Collection,\n     *     ItemGroup = require(\'postman-collection\').ItemGroup,\n     *     myCollection;\n     *\n     * myCollection = new Collection(); // create an empty collection\n     * myCollection.items.add(new ItemGroup({ // add a folder called "blank folder"\n     *     "name": "This is a blank folder"\n     * }));\n     * @param [definition] - While creating a new instance of ItemGroup, one can provide the\n     * initial configuration of the item group with the requests it contains, the authentication applied to all\n     * requests, events that the requests responds to, etc.\n     */\n    export class ItemGroup extends Property {\n        constructor(definition?: ItemGroup.definition);\n        /**\n         * This is a PropertyList that holds the list of Items or ItemGroups belonging to a\n         * Collection or to an ItemGroup. Operation on an individual item in this list can be\n         * performed using various functions available to a PropertyList.\n         * @example\n         * Fetch empty ItemGroups in a list loaded from a file\n         * var fs = require(\'fs\'), // needed to read JSON file from disk\n         *     Collection = require(\'postman-collection\').Collection,\n         *     myCollection,\n         *     emptyGroups;\n         * // Load a collection to memory from a JSON file on disk (say, sample-collection.json)\n         * myCollection = new Collection(JSON.stringify(fs.readFileSync(\'sample-collection.json\').toString()));\n         *\n         * // Filter items in Collection root that is an empty ItemGroup\n         * emptyGroups = myCollection.items.filter(function (item) {\n         *     return item && item.items && (item.items.count() === 0);\n         * });\n         *\n         * // Log the emptyGroups array to check it\'s contents\n         * console.log(emptyGroups);\n         */\n        items: PropertyList;\n        /**\n         * One can define the default authentication method required for every item that belongs to this list.\n         * Individual Requests can override this in their own definitions. More on how to define an\n         * authentication method is outlined in the RequestAuth property.\n         * @example\n         * Define an entire ItemGroup (folder) or Collection to follow Basic Auth\n         * var fs = require(\'fs\'),\n         *     Collection = require(\'postman-collection\').Collection,\n         *     RequestAuth = require(\'postman-collection\').RequestAuth,\n         *     mycollection;\n         *\n         * // Create a collection having two requests\n         * myCollection = new Collection();\n         * myCollection.items.add([\n         *     { name: \'GET Request\', request: \'https://postman-echo.com/get?auth=basic\' },\n         *     { name: \'PUT Request\', request: \'https://postman-echo.com/put?auth=basic\' }\n         * ]);\n         *\n         * // Add basic auth to the Collection, to be applied on all requests.\n         * myCollection.auth = new RequestAuth({\n         *     type: \'basic\',\n         *     username: \'postman\',\n         *     password: \'password\'\n         * });\n         */\n        auth: RequestAuth;\n        /**\n         * Set of configurations used to alter the usual behavior of sending the request.\n         * @property disableBodyPruning - Disable body pruning for request methods like GET, HEAD etc.\n         */\n        protocolProfileBehavior: {\n            disableBodyPruning: boolean;\n        };\n        /**\n         * Finds the first item with the given name or id in the current ItemGroup.\n         * @param idOrName - -\n         */\n        oneDeep(idOrName: string): void;\n        /**\n         * Sets authentication method for all the items within this group\n         */\n        authorizeRequestsUsing: any;\n        /**\n         * Check whether an object is an instance of ItemGroup.\n         * @param obj - -\n         */\n        static isItemGroup(obj: any): boolean;\n    }\n\n    export namespace Item {\n        /**\n         * The following defines the object (or JSON) structure that one can pass to the Item while creating a new Item\n         * instance. This is also the object structure returned when `.toJSON()` is called on an Item instance.\n         * @example\n         * {\n         *     "name": "Get Headers from Echo",\n         *     "id": "my-request-1",\n         *     "description": "Makes a GET call to echo service and returns the client headers that were sent",\n         *\n         *     "request": {\n         *         "url": "https://postman-echo.com/headers",\n         *         "method": "GET"\n         *     }\n         * }\n         * @property [request] - A request represents an HTTP request. If a string, the string is assumed to\n         * be the request URL and the method is assumed to be \'GET\'.\n         * @property [responses] - Sample responses for this request can be stored along with the\n         * item definition.\n         * @property [events] - Postman allows you to configure scripts to run when specific events\n         * occur. These scripts are stored here, and can be referenced in the collection by their id.\n         */\n        type definition = {\n            request?: Request.definition;\n            responses?: Response.definition[];\n            events?: Event.definition[];\n        };\n    }\n\n    /**\n     * A Postman Collection Item that holds your request definition, responses and other stuff. An Item essentially is\n     * a HTTP request definition along with the sample responses and test scripts clubbed together. One or more of these\n     * items can be grouped together and placed in an ItemGroup and as such forms a Collection of\n     * requests.\n     * @example\n     * Add a new Item to a folder in a collection instance\n     * var Collection = require(\'postman-collection\').Collection,\n     *     Item = require(\'postman-collection\').Item,\n     *     myCollection;\n     *\n     * myCollection = new Collection({\n     *     "item": [{\n     *         "id": "my-folder-1",\n     *         "name": "The solo folder in this collection",\n     *         "item": [] // blank array indicates this is a folder\n     *     }]\n     * }); // create a collection with an empty folder\n     * // add a request to "my-folder-1" that sends a GET request\n     * myCollection.items.one("my-folder-1").items.add(new Item({\n     *     "name": "Send a GET request",\n     *     "id": "my-get-request",\n     *     "request": {\n     *         "url": "https://postman-echo.com/get",\n     *         "method": "GET"\n     *     }\n     * }));\n     * @param [definition] - While creating a new instance of Item, one can provide the initial\n     * configuration of the item with the the request it sends, the expected sample responses, tests, etc\n     */\n    export class Item extends Property {\n        constructor(definition?: Item.definition);\n        /**\n         * The instance of the Request object inside an Item defines the HTTP request that is supposed to be\n         * sent. It further contains the request method, url, request body, etc.\n         */\n        request: Request;\n        /**\n         * An Item also contains a list of sample responses that is expected when the request defined in the item is\n         * executed. The sample responses are useful in elaborating API usage and is also useful for other\n         * integrations that use the sample responses to do something - say a mock service.\n         */\n        responses: PropertyList;\n        /**\n         * Events are a set of of Scripts that are executed when certain activities are triggered on an\n         * Item. For example, on defining an event that listens to the "test" event, would cause the associated\n         * script of the event to be executed when the test runs.\n         * @example\n         * Add a script to be executed on "prerequest" event\n         * var Collection = require(\'postman-collection\').Collection,\n         *     Item = require(\'postman-collection\').Item,\n         *     myCollection;\n         *\n         * myCollection = new Collection({\n         *     "item": [{\n         *         "name": "Send a GET request",\n         *         "id": "my-get-request",\n         *         "request": {\n         *             "url": "https://postman-echo.com/get",\n         *             "method": "GET"\n         *         }\n         *     }]\n         * }); // create a collection with one request\n         *\n         * // add a pre-request script to the event list\n         * myCollection.items.one(\'my-get-request\').events.add({\n         *     "listen": "prerequest",\n         *     "script": {\n         *         "type": "text/javascript",\n         *         "exec": "console.log(new Date())"\n         *     }\n         * });\n         */\n        events: EventList;\n        /**\n         * Set of configurations used to alter the usual behavior of sending the request.\n         */\n        protocolProfileBehavior: any;\n        /**\n         * Fetches applicable AuthType from the current item.\n         */\n        getAuth(): RequestAuth;\n        /**\n         * Returns Events corresponding to a particular event name. If no name is given, returns all events. This\n         * is useful when you want to trigger all associated scripts for an event.\n         * @example\n         * Get all events for an item and evaluate their scripts\n         * var fs = require(\'fs\'), // needed to read JSON file from disk\n         *     Collection = require(\'postman-collection\').Collection,\n         *     myCollection;\n         *\n         * // Load a collection to memory from a JSON file on disk (say, sample-collection.json)\n         * myCollection = new Collection(JSON.stringify(fs.readFileSync(\'sample-collection.json\').toString()));\n         *\n         * // assuming the collection has a request called "my-request-1" in root, we get it\'s test events\n         * myCollection.items.one("my-request-1").getEvents("test").forEach(function (event) {\n         *     event.script && eval(event.script.toSource());\n         * });\n         * @param name - one of the available event types such as `test`, `prerequest`, `postrequest`, etc.\n         */\n        getEvents(name: string): Event[];\n        /**\n         * Sets authentication method for the request within this item\n         * @param type - -\n         * @param [options] - -\n         */\n        authorizeRequestUsing(type: string | RequestAuth.definition, options?: VariableList): void;\n        /**\n         * Check whether an object is an instance of PostmanItem.\n         * @param obj - -\n         */\n        static isItem(obj: any): boolean;\n    }\n\n    export namespace MutationTracker {\n        /**\n         * A JSON representation of a mutation on an object. Here objects mean instances of postman-collection classes.\n         * This captures the instruction and the parameters of the instruction so that it can be replayed on a different object.\n         * Mutations can be any change on an object. For example setting a key or unsetting a key.\n         *\n         * For example, the mutation to set `name` on an object to \'Bruce Wayne\' would look like [\'name\', \'Bruce Wayne\']. Where\n         * the first item is the key path and second item is the value. To add a property `punchLine` to the object it would be\n         * the same as updating the property i.e. [\'punchLine\', \'I\\\'m Batman\']. To remove a property `age` the mutation would\n         * look like [\'age\'].\n         *\n         * This format of representing changes is derived from\n         * http://json-delta.readthedocs.io/en/latest/philosophy.html.\n         *\n         * The `set` and `unset` are primitive instructions and can be derived from the mutation without explicitly stating the\n         * instruction. For more complex mutation the instruction would have to be explicitly stated.\n         */\n        type mutation = any[];\n        /**\n         * A JSON representation of the MutationTracker.\n         * @property stream - contains the stream mutations tracked\n         * @property compacted - contains a compacted version of the mutations\n         * @property [autoCompact = false] - when set to true, all new mutations would be compacted immediately\n         */\n        type definition = {\n            stream: any[];\n            compacted: any;\n            autoCompact?: boolean;\n        };\n    }\n\n    /**\n     * A MutationTracker allows to record mutations on any of object and store them. This stored mutations can be\n     * transported for reporting or to replay on similar objects.\n     * @param definition - serialized mutation tracker\n     */\n    export class MutationTracker extends PropertyBase {\n        constructor(definition: MutationTracker.definition);\n        /**\n         * Track a mutation.\n         * @param instruction - the type of mutation\n         * @param payload - mutation parameters\n         */\n        track(instruction: string, ...payload: any[]): void;\n        /**\n         * Compacts the recorded mutations removing duplicate mutations that apply on the same key path.\n         */\n        compact(): void;\n        /**\n         * Returns the number of mutations tracked so far.\n         */\n        count(): number;\n        /**\n         * Applies all the recorded mutations on a target object.\n         * @param target - Target to apply mutations. Must implement `applyMutation`.\n         */\n        applyOn(target: any): void;\n        /**\n         * Check whether an object is an instance of MutationTracker.\n         * @param obj - -\n         */\n        static isMutationTracker(obj: any): boolean;\n    }\n\n    export namespace PropertyBase {\n        type definition = {\n            description?: string | Description;\n        };\n    }\n\n    /**\n     * Base of all properties in Postman Collection. It defines the root for all standalone properties for postman\n     * collection.\n     * @param definition - -\n     */\n    export class PropertyBase {\n        constructor(definition: PropertyBase.definition);\n        /**\n         * Invokes the given iterator for every parent in the parent chain of the given element.\n         * @param options - A set of options for the parent chain traversal.\n         * @param [options.withRoot = false] - Set to true to include the collection object as well.\n         * @param iterator - The function to call for every parent in the ancestry chain.\n         */\n        forEachParent(options: {\n            withRoot?: boolean;\n        }, iterator: (...params: any[]) => any): void;\n        /**\n         * Tries to find the given property locally, and then proceeds to lookup in each parent,\n         * going up the chain as necessary. Lookup will continue until `customizer` returns a truthy value. If used\n         * without a customizer, the lookup will stop at the first parent that contains the property.\n         * @param property - -\n         * @param [customizer] - -\n         */\n        findInParents(property: string, customizer?: (...params: any[]) => any): any | undefined;\n        /**\n         * Returns the JSON representation of a property, which conforms to the way it is defined in a collection.\n         * You can use this method to get the instantaneous representation of any property, including a Collection.\n         */\n        toJSON(): void;\n        /**\n         * Returns the meta keys associated with the property\n         */\n        meta(): any;\n        /**\n         * Returns the parent of item\n         */\n        parent(): any | undefined;\n        /**\n         * Filter function to check whether a key starts with underscore or not. These usually are the meta properties. It\n         * returns `true` if the criteria is matched.\n         * @param value - -\n         * @param key - -\n         */\n        static propertyIsMeta(value: any, key: string): boolean;\n        /**\n         * Map function that removes the underscore prefix from an object key.\n         * @param value - -\n         * @param key - -\n         */\n        static propertyUnprefixMeta(value: any, key: string): string;\n        /**\n         * Static function which allows calling toJSON() on any object.\n         * @param obj - -\n         */\n        static toJSON(obj: any): any;\n    }\n\n    export namespace PropertyList {\n        /**\n         * An item constructed of PropertyList.Type.\n         */\n        type Type = any;\n    }\n\n    /**\n     * @param type - -\n     * @param parent - -\n     * @param populate - -\n     */\n    export class PropertyList {\n        constructor(type: (...params: any[]) => any, parent: any, populate: any[]);\n        /**\n         * Insert an element at the end of this list. When a reference member specified via second parameter is found, the\n         * member is inserted at an index before the reference member.\n         * @param item - -\n         * @param [before] - -\n         */\n        insert(item: PropertyList.Type, before?: PropertyList.Type | string): void;\n        /**\n         * Insert an element at the end of this list. When a reference member specified via second parameter is found, the\n         * member is inserted at an index after the reference member.\n         * @param item - -\n         * @param [after] - -\n         */\n        insertAfter(item: PropertyList.Type, after?: PropertyList.Type | string): void;\n        /**\n         * Adds or moves an item to the end of this list.\n         * @param item - -\n         */\n        append(item: PropertyList.Type): void;\n        /**\n         * Adds or moves an item to the beginning of this list.\n         * @param item - -\n         */\n        prepend(item: PropertyList.Type): void;\n        /**\n         * Add an item or item definition to this list.\n         * @param item - -\n         */\n        add(item: any | PropertyList.Type): void;\n        /**\n         * Add an item or update an existing item\n         * @param item - -\n         */\n        upsert(item: PropertyList.Type): boolean;\n        /**\n         * Removes all elements from the PropertyList for which the predicate returns truthy.\n         * @param predicate - -\n         * @param context - Optional context to bind the predicate to.\n         */\n        remove(predicate: ((...params: any[]) => any) | string | PropertyList.Type, context: any): void;\n        /**\n         * Removes all items in the list\n         */\n        clear(): void;\n        /**\n         * Load one or more items\n         * @param items - -\n         */\n        populate(items: any | any[]): void;\n        /**\n         * Clears the list and adds new items.\n         * @param items - -\n         */\n        repopulate(items: any | any[]): void;\n        /**\n         * Add or update values from a source list.\n         * @param source - -\n         * @param [prune = false] - Setting this to `true` will cause the extra items from the list to be deleted\n         */\n        assimilate(source: PropertyList | any[], prune?: boolean): void;\n        /**\n         * Returns a map of all items.\n         */\n        all(): any;\n        /**\n         * Get Item in this list by `ID` reference. If multiple values are allowed, the last value is returned.\n         * @param id - -\n         */\n        one(id: string): PropertyList.Type;\n        /**\n         * Get the value of an item in this list. This is similar to PropertyList.one barring the fact that it\n         * returns the value of the underlying type of the list content instead of the item itself.\n         * @param key - -\n         */\n        get(key: string | ((...params: any[]) => any)): PropertyList.Type | any;\n        /**\n         * Iterate on each item of this list.\n         * @param iterator - -\n         * @param context - -\n         */\n        each(iterator: (...params: any[]) => any, context: any): void;\n        /**\n         * @param rule - -\n         * @param context - -\n         */\n        filter(rule: (...params: any[]) => any, context: any): void;\n        /**\n         * Find an item within the item group\n         * @param rule - -\n         * @param [context] - -\n         */\n        find(rule: (...params: any[]) => any, context?: any): Item | ItemGroup;\n        /**\n         * Iterates over the property list.\n         * @param iterator - Function to call on each item.\n         * @param context - Optional context, defaults to the PropertyList itself.\n         */\n        map(iterator: (...params: any[]) => any, context: any): void;\n        /**\n         * Iterates over the property list and accumulates the result.\n         * @param iterator - Function to call on each item.\n         * @param accumulator - Accumulator initial value\n         * @param context - Optional context, defaults to the PropertyList itself.\n         */\n        reduce(iterator: (...params: any[]) => any, accumulator: any, context: any): void;\n        /**\n         * Returns the length of the PropertyList\n         */\n        count(): number;\n        /**\n         * Get a member of this list by it\'s index\n         * @param index - -\n         */\n        idx(index: number): PropertyList.Type;\n        /**\n         * Find the index of an item in this list\n         * @param item - -\n         */\n        indexOf(item: string | any): number;\n        /**\n         * Check whether an item exists in this list\n         * @param item - -\n         * @param [value] - -\n         */\n        has(item: string | PropertyList.Type, value?: any): boolean;\n        /**\n         * Iterates over all parents of the property list\n         * @param iterator - -\n         * @param [context] - -\n         */\n        eachParent(iterator: (...params: any[]) => any, context?: any): void;\n        /**\n         * Converts a list of Properties into an object where key is `_postman_propertyIndexKey` and value is determined\n         * by the `valueOf` function\n         * @param [excludeDisabled = false] - When set to true, disabled properties are excluded from the resultant\n         * object.\n         * @param [caseSensitive] - When set to true, properties are treated strictly as per their original\n         * case. The default value for this property also depends on the case insensitivity definition of the current\n         * property.\n         * @param [multiValue = false] - When set to true, only the first value of a multi valued property is\n         * returned.\n         * @param [sanitizeKeys = false] - When set to true, properties with falsy keys are removed.\n         */\n        toObject(excludeDisabled?: boolean, caseSensitive?: boolean, multiValue?: boolean, sanitizeKeys?: boolean): any;\n        /**\n         * Adds ability to convert a list to a string provided it\'s underlying format has unparse function defined.\n         */\n        toString(): string;\n        /**\n         * Checks whether an object is a PropertyList\n         * @param obj - -\n         */\n        static isPropertyList(obj: any): boolean;\n    }\n\n    export namespace Property {\n        /**\n         * @property [id] - A unique string that identifies the property.\n         * @property [name] - A distinctive and human-readable name of the property.\n         * @property [disabled] - Denotes whether the property is disabled or not.\n         * @property [info] - The meta information regarding the Property is provided as the `info` object.\n         * @property [info.id] - If set, this is used instead of the definition root\'s id.\n         * @property [info.name] - If set, this is used instead of the definition root\'s name.\n         */\n        type definition = {\n            id?: string;\n            name?: string;\n            disabled?: boolean;\n            info?: {\n                id?: string;\n                name?: string;\n            };\n        };\n    }\n\n    /**\n     * The Property class forms the base of all postman collection SDK elements. This is to be used only for SDK\n     * development or to extend the SDK with additional functionalities. All SDK classes (constructors) that are\n     * supposed to be identifyable (i.e. ones that can have a `name` and `id`) are derived from this class.\n     *\n     * For more information on what is the structure of the `definition` the function parameter, have a look at\n     * Property.definition.\n     *\n     * > This is intended to be a private class except for those who want to extend the SDK itself and add more\n     * > functionalities.\n     * @param [definition] - Every constructor inherited from `Property` is required to call the\n     * super constructor function. This implies that construction parameters of every inherited member is propagated\n     * to be sent up to this point.\n     */\n    export class Property extends PropertyBase {\n        constructor(definition?: Property.definition);\n        /**\n         * The `id` of the property is a unique string that identifies this property and can be used to refer to\n         * this property from relevant other places. It is a good practice to define the id or let the system\n         * auto generate a UUID if one is not defined for properties that require an `id`.\n         */\n        id: string;\n        /**\n         * A property can have a distinctive and human-readable name. This is to be used to display the name of the\n         * property within Postman, Newman or other runtimes that consume collection. In certain cases, the absence\n         * of name might cause the runtime to use the `id` as a fallback.\n         */\n        name: string;\n        /**\n         * This (optional) flag denotes whether this property is disabled or not. Usually, this is helpful when a\n         * property is part of a PropertyList. For example, in a PropertyList of Headers, the ones\n         * that are disabled can be filtered out and not processed.\n         */\n        disabled: boolean;\n        /**\n         * This function allows to describe the property for the purpose of detailed identification or documentation\n         * generation. This function sets or updates the `description` child-property of this property.\n         * @example\n         * Add a description to an instance of Collection\n         *  var Collection = require(\'postman-collection\').Collection,\n         *     mycollection;\n         *\n         * // create a blank collection\n         * myCollection = new Collection();\n         * myCollection.describe(\'Hey! This is a cool collection.\');\n         *\n         * console.log(myCollection.description.toString()); // read the description\n         * @param content - The content of the description can be provided here as a string. Note that it is expected\n         * that if the content is formatted in any other way than simple text, it should be specified in the subsequent\n         * `type` parameter.\n         * @param [type = "text/plain"] - The type of the content.\n         */\n        describe(content: string, type?: string): void;\n        /**\n         * Returns all the substitutions (variables) that are needed (or referenced) in this property (recursively).\n         * @example\n         * // returns [\'host\', \'path1\']\n         * prop.findSubstitutions({request: \'https://{{host}}/{{path1}}-action/\'});\n         */\n        findSubstitutions(): string[];\n        /**\n         * This function accepts a string followed by a number of variable sources as arguments. One or more variable\n         * sources can be provided and it will use the one that has the value in left-to-right order.\n         * @param str - -\n         * @param variables - -\n         */\n        static replaceSubstitutions(str: string, variables: VariableList | any | (VariableList | object)[]): string;\n        /**\n         * This function accepts an object followed by a number of variable sources as arguments. One or more variable\n         * sources can be provided and it will use the one that has the value in left-to-right order.\n         * @param obj - -\n         * @param variables - -\n         */\n        static replaceSubstitutionsIn(obj: any, variables: (VariableList | object)[]): any;\n        /**\n         * This function recursively traverses a variable and detects all instances of variable replacements\n         * within the string of the object\n         * @example\n         * // returns [\'host\', \'path1\']\n         * Property.findSubstitutions({request: \'https://{{host}}/{{path1}}-action/\'});\n         * @param obj - Any JS variable within which we are trying to discover {{variables}}\n         */\n        static findSubstitutions(obj: any): string[];\n    }\n\n    /**\n     * @example\n     * Create a new ProxyConfigList\n     * var ProxyConfigList = require(\'postman-collection\').ProxyConfigList,\n     *     myProxyConfig = new ProxyConfigList({}, [\n     *              {match: \'https://example.com/*\', host: \'proxy.com\', port: 8080, tunnel: true},\n     *              {match: \'http+https://example2.com/*\', host: \'proxy2.com\'},\n     *          ]);\n     * @param parent - -\n     * @param populate - The list of proxy objects\n     */\n    export class ProxyConfigList extends PropertyList {\n        constructor(parent: any, populate: any[]);\n        /**\n         * Matches and gets the proxy config for the particular url.\n         * @param [url] - The url for which the proxy config needs to be fetched\n         * @returns The matched proxyConfig object\n         */\n        resolve(url?: URL): ProxyConfig.definition;\n        /**\n         * Checks whether an object is a ProxyConfigList\n         * @param obj - -\n         */\n        static isProxyConfigList(obj: any): boolean;\n    }\n\n    export namespace ProxyConfig {\n        /**\n         * The following is the object structure accepted as constructor parameter while calling `new ProxyConfig(...)`. It is\n         * also the structure exported when Property.toJSON or Property.toObjectResolved is called on a\n         * Proxy instance.\n         * @example\n         * JSON definition of an example proxy object\n         * {\n         *     "match": "http+https://example.com/*",\n         *     "host": "proxy.com",\n         *     "port": "8080",\n         *     "tunnel": true,\n         *     "disabled": false,\n         *     "authenticate": true,\n         *     "username": "proxy_username",\n         *     "password": "proxy_password"\n         * }\n         * @property [match = \'http+https://*\\/*\'] - The match for which the proxy needs to be configured.\n         * @property [host = \'\'] - The proxy server url.\n         * @property [port = 8080] - The proxy server port number.\n         * @property [tunnel = false] - The tunneling option for the proxy request.\n         * @property [disabled = false] - To override the proxy for the particular url, you need to provide true.\n         * @property [authenticate = false] - To enable authentication for the proxy, you need to provide true.\n         * @property [username] - The proxy authentication username\n         * @property [password] - The proxy authentication password\n         */\n        type definition = {\n            match?: string;\n            host?: string;\n            port?: number;\n            tunnel?: boolean;\n            disabled?: boolean;\n            authenticate?: boolean;\n            username?: string;\n            password?: string;\n        };\n    }\n\n    /**\n     * A ProxyConfig definition that represents the proxy configuration for an url match.\n     * Properties can then use the `.toObjectResolved` function to procure an object representation of the property with\n     * all the variable references replaced by corresponding values.\n     * @example\n     * Create a new ProxyConfig\n     * var ProxyConfig = require(\'postman-collection\').ProxyConfig,\n     *     myProxyConfig = new ProxyConfig({\n     *          host: \'proxy.com\',\n     *          match: \'http+https://example.com/*\',\n     *          port: 8080,\n     *          tunnel: true,\n     *          disabled: false,\n     *          authenticate: true,\n     *          username: \'proxy_username\',\n     *          password: \'proxy_password\'\n     *     });\n     * @param [options] - Specifies object with props matches, server and tunnel.\n     */\n    export class ProxyConfig extends Property {\n        constructor(options?: ProxyConfig.definition);\n        /**\n         * The proxy server host or ip\n         */\n        static host: string;\n        /**\n         * The url mach for which the proxy has been associated with.\n         */\n        static match: string;\n        /**\n         * The proxy server port number\n         */\n        static port: number;\n        /**\n         * This represents whether the tunneling needs to done while proxying this request.\n         */\n        static tunnel: boolean;\n        /**\n         * Proxy bypass list\n         */\n        static bypass: UrlMatchPatternList;\n        /**\n         * Enable proxy authentication\n         */\n        static authenticate: boolean;\n        /**\n         * Proxy auth username\n         */\n        static username: string;\n        /**\n         * Proxy auth password\n         */\n        static password: string;\n        /**\n         * Updates the properties of the proxy object based on the options provided.\n         * @param options - The proxy object structure.\n         */\n        update(options: ProxyConfig.definition): void;\n        /**\n         * Updates the protocols in the match pattern\n         * @param protocols - The array of protocols\n         */\n        updateProtocols(protocols: string[]): void;\n        /**\n         * Tests the url string with the match provided.\n         * Follows the https://developer.chrome.com/extensions/match_patterns pattern for pattern validation and matching\n         * @param [urlStr] - The url string for which the proxy match needs to be done.\n         */\n        test(urlStr?: string): void;\n        /**\n         * Returns the proxy server url.\n         */\n        getProxyUrl(): string;\n        /**\n         * Returns the protocols supported.\n         */\n        getProtocols(): string[];\n        /**\n         * Check whether an object is an instance of PostmanItem.\n         * @param obj - -\n         */\n        static isProxyConfig(obj: any): boolean;\n    }\n\n    export namespace QueryParam {\n        /**\n         * @property key - The name ("key") of the query parameter.\n         * @property value - The value of the parameter.\n         */\n        type definition = {\n            key: string;\n            value: string;\n        };\n    }\n\n    /**\n     * Represents a URL query parameter, which can exist in request URL or POST data.\n     * @param options - Pass the initial definition of the query parameter. In case of\n     * string, the query parameter is parsed using QueryParam.parseSingle.\n     */\n    export class QueryParam extends Property {\n        constructor(options: FormParam.definition | string);\n        /**\n         * Converts the QueryParameter to a single param string.\n         */\n        toString(): string;\n        /**\n         * Updates the key and value of the query parameter\n         * @param param - -\n         * @param param.key - -\n         * @param [param.value] - -\n         */\n        update(param: {\n            key: string;\n            value?: string;\n        }): void;\n        /**\n         * Declare the list index key, so that property lists of query parameters work correctly\n         */\n        static _postman_propertyIndexKey: string;\n        /**\n         * Query params can have multiple values, so set this to true.\n         */\n        static _postman_propertyAllowsMultipleValues: boolean;\n        /**\n         * Parse a query string into an array of objects, where each object contains a key and a value.\n         * @param query - -\n         */\n        static parse(query: string): any[];\n        /**\n         * Parses a single query parameter.\n         * @param param - -\n         * @param idx - -\n         * @param all - array of all params, in case this is being called while parsing multiple params.\n         */\n        static parseSingle(param: string, idx: number, all: string[]): any;\n        /**\n         * Create a query string from array of parameters (or object of key-values).\n         * @param params - -\n         */\n        static unparse(params: any[] | any): string;\n        /**\n         * Takes a query param and converts to string\n         * @param obj - -\n         */\n        static unparseSingle(obj: any): string;\n    }\n\n    export namespace RequestAuth {\n        /**\n         * This defines the definition of the authentication method to be used.\n         * @example\n         * Sample auth definition for Basic Auth\n         * {\n         *   "type": "basic",\n         *   "basic": [\n         *     { "key": "username", "value": "postman" },\n         *     { "key": "password", "value": "secrets" }\n         *   ]\n         * }\n         * @property [type] - The Auth type to use. Check the names in AuthTypes\n         */\n        type definition = {\n            type?: string;\n        };\n    }\n\n    /**\n     * A Postman Auth definition that comprehensively represents different types of auth mechanisms available.\n     * @example\n     * Creating a request with two auth data and one selected\n     * var auth = new RequestAuth({\n     *   type: \'digest\',\n     *\n     *   basic: [\n     *     { key: "username", value: "postman" },\n     *     { key: "password", value: "secrets" }\n     *   ],\n     *   digest: [\n     *     { key: "nonce", value: "aef54cde" },\n     *     { key: "realm", value: "items.x" }\n     *   ]\n     * });\n     *\n     * // change the selected auth\n     * auth.use(\'basic\');\n     * @param options - Pass the initial definition of the Auth.\n     * @param [parent] - optionally pass the parent of this auth. aides variable resolution.\n     */\n    export class RequestAuth extends Property {\n        constructor(options: RequestAuth.definition, parent?: Property | PropertyList);\n        /**\n         * Update the parameters of a specific authentication type. If none is provided then it uses the one marked as to be\n         * used.\n         * @param options - -\n         * @param [type = this.type] - -\n         */\n        update(options: VariableList | any[] | any, type?: string): void;\n        /**\n         * Sets the authentication type to be used by this item.\n         * @param type - -\n         * @param options - note that options set here would replace all existing\n         * options for the particular auth\n         */\n        use(type: string, options: VariableList | any[] | any): void;\n        /**\n         * Returns the parameters of the selected auth type\n         */\n        parameters(): VariableList;\n        /**\n         * Clears the definition of an auth type.\n         * @param type - -\n         */\n        clear(type: string): void;\n        /**\n         * Determines whether an authentication type name is valid or not\n         * @param type - -\n         */\n        static isValidType(type: string): boolean;\n    }\n\n    export namespace RequestBody {\n        type definition = {\n            mode: string;\n            raw: string;\n            file: string;\n            graphql: any;\n            formdata: object[];\n            urlencoded: object[] | string;\n        };\n        /**\n         * MODES\n         */\n        enum MODES {\n            file = "file",\n            formdata = "formdata",\n            graphql = "graphql",\n            raw = "raw",\n            urlencoded = "urlencoded"\n        }\n    }\n\n    /**\n     * RequestBody holds data related to the request body. By default, it provides a nice wrapper for url-encoded,\n     * form-data, and raw types of request bodies.\n     * @param options - -\n     */\n    export class RequestBody extends PropertyBase {\n        constructor(options: any);\n        /**\n         * Set the content of this request data\n         * @param options - -\n         */\n        update(options: any): void;\n        /**\n         * Indicates the type of request data to use.\n         */\n        mode: string;\n        /**\n         * If the request has raw body data associated with it, the data is held in this field.\n         */\n        raw: string;\n        /**\n         * Any URL encoded body params go here.\n         */\n        urlencoded: PropertyList;\n        /**\n         * Form data parameters for this request are held in this field.\n         */\n        formdata: PropertyList;\n        /**\n         * Holds a reference to a file which should be read as the RequestBody. It can be a file path (when used\n         * with Node) or a unique ID (when used with the browser).\n         */\n        file: any;\n        /**\n         * If the request has raw graphql data associated with it, the data is held in this field.\n         */\n        graphql: any;\n        /**\n         * If the request has body Options associated with it, the data is held in this field.\n         */\n        options: any;\n        /**\n         * Indicates whether to include body in request or not.\n         */\n        disabled: boolean;\n        /**\n         * Stringifies and returns the request body.\n         */\n        toString(): any;\n        /**\n         * If the request body is set to a mode, but does not contain data, then we should not be sending it.\n         */\n        isEmpty(): boolean;\n        /**\n         * Convert the request body to JSON compatible plain object\n         */\n        toJSON(): any;\n    }\n\n    export namespace Request {\n        /**\n         * @property url - The URL of the request. This can be a Url.definition or a string.\n         * @property method - The request method, e.g: "GET" or "POST".\n         * @property header - The headers that should be sent as a part of this request.\n         * @property body - The request body definition.\n         * @property auth - The authentication/signing information for this request.\n         * @property proxy - The proxy information for this request.\n         * @property certificate - The certificate information for this request.\n         */\n        type definition = {\n            url: string | Url;\n            method: string;\n            header: Header.definition[];\n            body: RequestBody.definition;\n            auth: RequestAuth.definition;\n            proxy: ProxyConfig.definition;\n            certificate: Certificate.definition;\n        };\n    }\n\n    /**\n     * A Postman HTTP request object.\n     * @param options - -\n     */\n    export class Request extends Property {\n        constructor(options: Request.definition);\n        url: Url;\n        headers: HeaderList;\n        method: string;\n        /**\n         * Updates the different properties of the request.\n         * @param options - -\n         */\n        update(options: Request.definition): void;\n        body: RequestBody | undefined;\n        auth: RequestAuth;\n        proxy: ProxyConfig;\n        certificate: Certificate | undefined;\n        /**\n         * Sets authentication method for the request\n         * @param type - -\n         * @param [options] - -\n         */\n        authorizeUsing(type: string | RequestAuth.definition, options?: VariableList): void;\n        /**\n         * Returns an object where the key is a header name and value is the header value.\n         * @param [options] - -\n         * @param options.ignoreCase - When set to "true", will ensure that all the header keys are lower case.\n         * @param options.enabled - Only get the enabled headers\n         * @param options.multiValue - When set to "true", duplicate header values will be stored in an array\n         * @param options.sanitizeKeys - When set to "true", headers with falsy keys are removed\n         */\n        getHeaders(options?: {\n            ignoreCase: boolean;\n            enabled: boolean;\n            multiValue: boolean;\n            sanitizeKeys: boolean;\n        }): any;\n        /**\n         * Calls the given callback on each Header object contained within the request.\n         * @param callback - -\n         */\n        forEachHeader(callback: (...params: any[]) => any): void;\n        /**\n         * Adds a header to the PropertyList of headers.\n         * @param header - Can be a {Header} object, or a raw header object.\n         */\n        addHeader(header: Header | any): void;\n        /**\n         * Removes a header from the request.\n         * @param toRemove - A header object to remove, or a string containing the header key.\n         * @param options - -\n         * @param options.ignoreCase - If set to true, ignores case while removing the header.\n         */\n        removeHeader(toRemove: string | Header, options: {\n            ignoreCase: boolean;\n        }): void;\n        /**\n         * Updates or inserts the given header.\n         * @param header - -\n         */\n        upsertHeader(header: any): void;\n        /**\n         * Add query parameters to the request.\n         * @param params - -\n         */\n        addQueryParams(params: QueryParam[] | string): void;\n        /**\n         * Removes parameters passed in params.\n         * @param params - -\n         */\n        removeQueryParams(params: string | any[]): void;\n        /**\n         * Get the request size by computing the headers and body or using the\n         * actual content length header once the request is sent.\n         */\n        size(): any;\n        /**\n         * Converts the Request to a plain JavaScript object, which is also how the request is\n         * represented in a collection file.\n         */\n        toJSON(): any;\n        /**\n         * Creates a clone of this request\n         */\n        clone(): Request;\n        /**\n         * Check whether an object is an instance of ItemGroup.\n         * @param obj - -\n         */\n        static isRequest(obj: any): boolean;\n    }\n\n    export namespace Response {\n        /**\n         * @property code - define the response code\n         * @property [reason] - optionally, if the response has a non-standard response code reason, provide it here\n         */\n        type definition = {\n            code: number;\n            reason?: string;\n            header?: Header.definition[];\n            cookie?: Cookie.definition[];\n            body?: string;\n            stream?: Buffer | ArrayBuffer;\n            responseTime: number;\n        };\n        /**\n         * Returns the durations of each request phase in milliseconds\n         * @example\n         * Output\n         * Request.timingPhases(timings);\n         * {\n         *     prepare: Number,         // duration of request preparation\n         *     wait: Number,            // duration of socket initialization\n         *     dns: Number,             // duration of DNS lookup\n         *     tcp: Number,             // duration of TCP connection\n         *     secureHandshake: Number, // duration of secure handshake\n         *     firstByte: Number,       // duration of HTTP server response\n         *     download: Number,        // duration of HTTP download\n         *     process: Number,         // duration of response processing\n         *     total: Number            // duration entire HTTP round-trip\n         * }\n         * @property start - timestamp of the request sent from the client (in Unix Epoch milliseconds)\n         * @property offset - event timestamps in millisecond resolution relative to start\n         * @property offset.request - timestamp of the start of the request\n         * @property offset.socket - timestamp when the socket is assigned to the request\n         * @property offset.lookup - timestamp when the DNS has been resolved\n         * @property offset.connect - timestamp when the server acknowledges the TCP connection\n         * @property offset.secureConnect - timestamp when secure handshaking process is completed\n         * @property offset.response - timestamp when the first bytes are received from the server\n         * @property offset.end - timestamp when the last bytes of the response are received\n         * @property offset.done - timestamp when the response is received at the client\n         * @param timings - -\n         */\n        type timings = {\n            start: number;\n            offset: {\n                request: number;\n                socket: number;\n                lookup: number;\n                connect: number;\n                secureConnect: number;\n                response: number;\n                end: number;\n                done: number;\n            };\n        };\n        /**\n         * @property mimeType - sanitized mime type\n         * @property mimeFormat - format for the identified mime type\n         * @property charset - the normalized character set\n         * @property fileExtension - extension identified from the mime type\n         * @property fileName - file name extracted from disposition header\n         * @property contentType - sanitized content-type extracted from header\n         */\n        type ResponseContentInfo = {\n            mimeType: string;\n            mimeFormat: string;\n            charset: string;\n            fileExtension: string;\n            fileName: string;\n            contentType: string;\n        };\n    }\n\n    /**\n     * Response holds data related to the request body. By default, it provides a nice wrapper for url-encoded,\n     * form-data, and raw types of request bodies.\n     * @param options - -\n     */\n    export class Response extends Property {\n        constructor(options: Response.definition);\n        originalRequest: Request;\n        status: string;\n        code: number;\n        headers: HeaderList;\n        body: string;\n        cookies: CookieList;\n        /**\n         * Time taken for the request to complete.\n         */\n        responseTime: number;\n        /**\n         * Convert this response into a JSON serializable object. The _details meta property is omitted.\n         */\n        toJSON(): any;\n        /**\n         * Get the http response reason phrase based on the current response code.\n         */\n        reason(): string | undefined;\n        /**\n         * Get the response body as a string/text.\n         */\n        text(): string | undefined;\n        /**\n         * Get the response body as a JavaScript object. Note that it throws an error if the response is not a valid JSON\n         * @example\n         * // assuming that the response is stored in a collection instance `myCollection`\n         * var response = myCollection.items.one(\'some request\').responses.idx(0),\n         *     jsonBody;\n         * try {\n         *     jsonBody = response.json();\n         * }\n         * catch (e) {\n         *     console.log("There was an error parsing JSON ", e);\n         * }\n         * // log the root-level keys in the response JSON.\n         * console.log(\'All keys in json response: \' + Object.keys(json));\n         * @param [reviver] - -\n         * @param [strict = false] - Specify whether JSON parsing will be strict. This will fail on comments and BOM\n         */\n        json(reviver?: (...params: any[]) => any, strict?: boolean): any;\n        /**\n         * Get the JSON from response body that returns JSONP response.\n         * @param [reviver] - -\n         * @param [strict = false] - Specify whether JSON parsing will be strict. This will fail on comments and BOM\n         */\n        jsonp(reviver?: (...params: any[]) => any, strict?: boolean): void;\n        /**\n         * Extracts mime type, format, charset, extension and filename of the response content\n         * A fallback of default filename is given, if filename is not present in content-disposition header\n         * @returns - contentInfo for the response\n         */\n        contentInfo(): Response.ResponseContentInfo;\n        /**\n         * Converts the response to a dataURI that can be used for storage or serialisation. The data URI is formed using\n         * the following syntax `data:;baseg4, `.\n         */\n        dataURI(): string;\n        /**\n         * Get the response size by computing the same from content length header or using the actual response body.\n         */\n        size(): number;\n        /**\n         * Check whether an object is an instance of ItemGroup.\n         * @param obj - -\n         */\n        static isResponse(obj: any): boolean;\n        /**\n         * Converts the response object from the request module to the postman responseBody format\n         * @param response - The response object, as received from the request module\n         * @param cookies - -\n         * @returns The transformed responseBody\n         */\n        static createFromNode(response: any, cookies: any): any;\n    }\n\n    /**\n     * Postman scripts that are executed upon events on a collection  / request such as test and pre request.\n     * @param options - -\n     */\n    export class Script extends Property {\n        constructor(options: any);\n        /**\n         * Converts the script lines array to a single source string.\n         */\n        toSource(): string;\n        /**\n         * Updates the properties of a Script.\n         * @param [options] - -\n         * @param [options.type] - Script type\n         * @param [options.src] - Script source url\n         * @param [options.exec] - Script to execute\n         */\n        update(options?: {\n            type?: string;\n            src?: string;\n            exec?: string[] | string;\n        }): void;\n        type: string;\n        src: Url;\n        exec: string[];\n        /**\n         * Check whether an object is an instance of ItemGroup.\n         * @param obj - -\n         */\n        static isScript(obj: any): boolean;\n    }\n\n    /**\n     * Defines a URL.\n     * @param options - -\n     */\n    export class Url extends PropertyBase {\n        constructor(options: any | string);\n        /**\n         * Set a URL.\n         * @param url - -\n         */\n        update(url: string | any): void;\n        auth: any;\n        protocol: string;\n        port: string;\n        path: string[];\n        hash: string;\n        host: string[];\n        query: PropertyList;\n        variables: VariableList;\n        /**\n         * Add query parameters to the URL.\n         * @param params - Key value pairs to add to the URL.\n         */\n        addQueryParams(params: any | string): void;\n        /**\n         * Removes query parameters from the URL.\n         * @param params - Params should be an array of strings, or an array of\n         * actual query parameters, or a string containing the parameter key.\n         */\n        removeQueryParams(params: QueryParam[] | string[] | string): void;\n        /**\n         * Unparses a {PostmanUrl} into a string.\n         * @param [forceProtocol] - Forces the URL to have a protocol\n         */\n        toString(forceProtocol?: boolean): string;\n        /**\n         * Returns the request path, with a leading \'/\'.\n         * @param [unresolved = false] - -\n         */\n        getPath(unresolved?: boolean): string;\n        /**\n         * Returns the stringified query string for this URL.\n         */\n        getQueryString(): string;\n        /**\n         * Returns the complete path, including the query string.\n         * @example\n         * /something/postman?hi=notbye\n         */\n        getPathWithQuery(): any | string;\n        /**\n         * Returns the host part of the URL\n         */\n        getHost(): string;\n        /**\n         * Returns the host *and* port (if any), separated by a ":"\n         * @param [forcePort = false] - forces the port to be added even for the protocol default ones (89, 443)\n         */\n        getRemote(forcePort?: boolean): string;\n        /**\n         * Parses a string to a PostmanUrl, decomposing the URL into it\'s constituent parts,\n         * such as path, host, port, etc.\n         * @param url - -\n         */\n        static parse(url: string): any;\n        /**\n         * Checks whether an object is a Url\n         * @param obj - -\n         */\n        static isUrl(obj: any): boolean;\n    }\n\n    /**\n     * @param parent - -\n     * @param populate - -\n     */\n    export class VariableList extends PropertyList {\n        constructor(parent: Property, populate: any | any[]);\n        /**\n         * Replaces the variable tokens inside a string with its actual values.\n         * @param str - -\n         * @param [overrides] - additional objects to lookup for variable values\n         */\n        replace(str: string, overrides?: any): string;\n        /**\n         * Recursively replace strings in an object with instances of variables. Note that it clones the original object. If\n         * the `mutate` param is set to true, then it replaces the same object instead of creating a new one.\n         * @param obj - -\n         * @param [overrides] - additional objects to lookup for variable values\n         * @param [mutate = false] - -\n         */\n        substitute(obj: any[] | any, overrides?: object[], mutate?: boolean): any[] | any;\n        /**\n         * Using this function, one can sync the values of this variable list from a reference object.\n         * @param obj - -\n         * @param [track] - -\n         * @param [prune = true] - -\n         */\n        syncFromObject(obj: any, track?: boolean, prune?: boolean): any;\n        /**\n         * Transfer all variables from this list to an object\n         * @param [obj] - -\n         */\n        syncToObject(obj?: any): any;\n        /**\n         * Checks whether an object is a VariableList\n         * @param obj - -\n         */\n        static isVariableList(obj: any): boolean;\n    }\n\n    export namespace VariableScope {\n        /**\n         * Environment and Globals of postman is exported and imported in a specified data structure. This data structure can be\n         * passed on to the constructor parameter of VariableScope or VariableList to instantiate an instance of\n         * the same with pre-populated values from arguments.\n         * @example\n         * JSON definition of a VariableScope (environment, globals, etc)\n         * {\n         *   "name": "globals",\n         *   "values": [{\n         *     "key": "var-1",\n         *     "value": "value-1"\n         *   }, {\n         *     "key": "var-2",\n         *     "value": "value-2"\n         *   }]\n         * }\n         * @property [id] - ID of the scope\n         * @property [name] - A name of the scope\n         * @property [values] - A list of variables defined in an array in form of `{name:String,\n         * value:String}`\n         */\n        type definition = {\n            id?: string;\n            name?: string;\n            values?: Variable.definition[];\n        };\n    }\n\n    /**\n     * VariableScope is a representation of a list of variables in Postman, such as the environment variables or the\n     * globals. Using this object, it is easy to perform operations on this list of variables such as get a variable or\n     * set a variable.\n     * @example\n     * Load a environment from file, modify and save back\n     * var fs = require(\'fs\'), // assuming NodeJS\n     *     env,\n     *     sum;\n     *\n     * // load env from file assuming it has initial data\n     * env = new VariableScope(JSON.parse(fs.readFileSync(\'./my-postman-environment.postman_environment\').toString()));\n     *\n     * // get two variables and add them\n     * sum = env.get(\'one-var\') + env.get(\'another-var\');\n     *\n     * // save it back in environment and write to file\n     * env.set(\'sum\', sum, \'number\');\n     * fs.writeFileSync(\'./sum-of-vars.postman_environment\', JSON.stringify(env.toJSON()));\n     * @param definition - The constructor accepts an initial set of values for initialising\n     * the scope\n     * @param [layers] - Additional parent scopes to search for and resolve variables\n     */\n    export class VariableScope extends Property {\n        constructor(definition: VariableScope.definition, layers?: VariableList[]);\n        /**\n         * Converts a list of Variables into an object where key is `_postman_propertyIndexKey` and value is determined\n         * by the `valueOf` function\n         * @param excludeDisabled - -\n         * @param caseSensitive - -\n         */\n        toObject(excludeDisabled: boolean, caseSensitive: boolean): any;\n        /**\n         * Determines whether one particular variable is defined in this scope of variables.\n         * @param key - The name of the variable to check\n         * @returns - Returns true if an enabled variable with given key is present in current or parent scopes,\n         *                      false otherwise\n         */\n        has(key: string): boolean;\n        /**\n         * Fetches a variable from the current scope or from parent scopes if present.\n         * @param key - The name of the variable to get.\n         * @returns The value of the specified variable across scopes.\n         */\n        get(key: string): any;\n        /**\n         * Creates a new variable, or updates an existing one.\n         * @param key - The name of the variable to set.\n         * @param value - The value of the variable to be set.\n         * @param [type] - Optionally, the value of the variable can be set to a type\n         */\n        set(key: string, value: any, type?: Variable.types): void;\n        /**\n         * Removes the variable with the specified name.\n         * @param key - -\n         */\n        unset(key: string): void;\n        /**\n         * Removes *all* variables from the current scope. This is a destructive action.\n         */\n        clear(): void;\n        /**\n         * Replace all variable names with their values in the given template.\n         * @param template - A string or an object to replace variables in\n         * @returns The string or object with variables (if any) substituted with their values\n         */\n        replaceIn(template: string | any): string | any;\n        /**\n         * Enable mutation tracking.\n         * @param [options] - Options for Mutation Tracker. See MutationTracker\n         */\n        enableTracking(options?: MutationTracker.definition): void;\n        /**\n         * Disable mutation tracking.\n         */\n        disableTracking(): void;\n        /**\n         * Convert this variable scope into a JSON serialisable object. Useful to transport or store, environment and\n         * globals as a whole.\n         */\n        toJSON(): any;\n        /**\n         * Check whether an object is an instance of VariableScope.\n         * @param obj - -\n         */\n        static isVariableScope(obj: any): boolean;\n    }\n\n    export namespace Variable {\n        /**\n         * The object representation of a Variable consists the variable value and type. It also optionally includes the `id`\n         * and a friendly `name` of the variable. The `id` and the `name` of a variable is usually managed and used when a\n         * variable is made part of a VariableList instance.\n         * @example\n         * {\n         *     "id": "my-var-1",\n         *     "name": "MyFirstVariable",\n         *     "value": "Hello World",\n         *     "type": "string"\n         * }\n         * @property [value] - The value of the variable that will be stored and will be typecast to the `type`\n         * set in the variable or passed along in this parameter.\n         * @property [type] - The type of this variable from the list of types defined at Variable.types.\n         */\n        type definition = {\n            value?: any;\n            type?: string;\n        };\n        /**\n         * The possible supported types of a variable is defined here. The keys defined here are the possible values of\n         * Variable.type.\n         *\n         * Additional variable types can be supported by adding the type-casting function to this enumeration.\n         */\n        enum types {\n            /**\n             * When a variable\'s `type` is set to "string", it ensures that Variable.get converts the value of the\n             * variable to a string before returning the data.\n             */\n            string = "String",\n            /**\n             * A boolean type of variable can either be set to `true` or `false`. Any other value set is converted to\n             * Boolean when procured from Variable.get.\n             */\n            boolean = "Boolean",\n            /**\n             * A "number" type variable ensures that the value is always represented as a number. A non-number type value\n             * is returned as `NaN`.\n             */\n            number = "Number",\n            /**\n             * A "array" type value stores Array data format\n             */\n            array = "{\\"in\\":\\"\\",\\"out\\":\\"\\"}",\n            /**\n             * A "object" type value stores Object data format\n             */\n            object = "{\\"in\\":\\"\\",\\"out\\":\\"\\"}",\n            /**\n             * Free-form type of a value. This is the default for any variable, unless specified otherwise. It ensures that\n             * the variable can store data in any type and no conversion is done while using Variable.get.\n             */\n            any = "{\\"in\\":\\"\\",\\"out\\":\\"\\"}"\n        }\n    }\n\n    /**\n     * A variable inside a collection is similar to variables in any programming construct. The variable has an\n     * identifier name (provided by its id) and a value. A variable is optionally accompanied by a variable type. One\n     * or more variables can be associated with a collection and can be referred from anywhere else in the collection\n     * using the double-brace {{variable-id}} format. Properties can then use the `.toObjectResolved` function to\n     * procure an object representation of the property with all variable references replaced by corresponding values.\n     * @param [definition] - Specify the initial value and type of the variable.\n     */\n    export class Variable extends Property {\n        constructor(definition?: Variable.definition);\n        type: Variable.types;\n        value: any;\n        /**\n         * The name of the variable. This is used for referencing this variable from other locations and scripts\n         */\n        key: string;\n        /**\n         * Gets the value of the variable.\n         */\n        get(): Variable.types;\n        /**\n         * Sets the value of the variable.\n         * @param value - -\n         */\n        set(value: any): void;\n        /**\n         * An alias of this.get and this.set.\n         * @param [value] - -\n         */\n        valueOf(value?: any): any;\n        /**\n         * Returns the stringified value of the variable.\n         */\n        toString(): string;\n        /**\n         * Typecasts a value to the Variable.types of this Variable. Returns the value of the variable\n         * converted to the type specified in Variable.type.\n         * @param value - -\n         */\n        cast(value: any): any;\n        /**\n         * Sets or gets the type of the value.\n         * @param typeName - -\n         * @param _noCast - -\n         * @returns - returns the current type of the variable from the list of Variable.types\n         */\n        valueType(typeName: string, _noCast: boolean): string;\n        /**\n         * Updates the type and value of a variable from an object or JSON definition of the variable.\n         * @param options - -\n         */\n        update(options: Variable.definition): void;\n        /**\n         * @param obj - -\n         */\n        static isVariable(obj: any): boolean;\n        /**\n         * This (optional) flag denotes whether this property is disabled or not. Usually, this is helpful when a\n         * property is part of a PropertyList. For example, in a PropertyList of Headers, the ones\n         * that are disabled can be filtered out and not processed.\n         */\n        disabled: boolean;\n    }\n\n    export namespace Version {\n        type definition = any | string;\n    }\n\n    /**\n     * Defines a Version.\n     * @param definition - -\n     */\n    export class Version extends PropertyBase {\n        constructor(definition: Version.definition);\n        /**\n         * Set the version value as string or object with separate components of version\n         * @param value - -\n         */\n        set(value: any | string): void;\n        /**\n         * The raw URL string. If Version.set is called with a string parameter, the string is saved here\n         * before parsing various Version components.\n         */\n        raw: string;\n        major: string;\n        minor: string;\n        patch: string;\n        prerelease: string;\n        build: string;\n        string: string;\n    }\n\n    /**\n     * UrlMatchPattern is a list of UrlMatchPatterns.\n     * This allows you to test for any url over a list of match patterns.\n     * @example\n     * An example UrlMatchPatternList\n     * var matchPatternList = new UrlMatchPatternList([\'https://*.google.com/*\']);\n     * @param parent - -\n     * @param list - -\n     */\n    export class UrlMatchPatternList extends PropertyList {\n        constructor(parent: any, list: string[]);\n        /**\n         * Tests the url string with the match pattern list provided to see if it matches any of it.\n         * Follows the https://developer.chrome.com/extensions/match_patterns pattern for pattern validation and matching\n         * @param [urlStr] - The url string for which the proxy match needs to be done.\n         */\n        test(urlStr?: string): boolean;\n    }\n\n    export namespace UrlMatchPattern {\n        /**\n         * @property pattern - The url match pattern string\n         */\n        type definition = {\n            pattern: string;\n        };\n    }\n\n    /**\n     * UrlMatchPattern allows to create rules to define Urls to match for.\n     * It is based on Google\'s Match Pattern - https://developer.chrome.com/extensions/match_patterns\n     * @example\n     * An example UrlMatchPattern\n     * var matchPattern = new UrlMatchPattern(\'https://*.google.com/*\');\n     * @param options - -\n     */\n    export class UrlMatchPattern extends Property {\n        constructor(options: UrlMatchPattern.definition);\n        /**\n         * The url match pattern string\n         */\n        static pattern: string;\n        /**\n         * Assigns the given properties to the UrlMatchPattern.\n         * @param options - -\n         */\n        update(options: any): void;\n        /**\n         * Tests if the given protocol string, is allowed by the pattern.\n         * @param [protocol] - The protocol to be checked if the pattern allows.\n         */\n        testProtocol(protocol?: string): boolean;\n        /**\n         * Returns the protocols supported\n         */\n        getProtocols(): string[];\n        /**\n         * Tests if the given host string, is allowed by the pattern.\n         * @param [host] - The host to be checked if the pattern allows.\n         */\n        testHost(host?: string): boolean;\n        /**\n         * Tests if the current pattern allows the given port.\n         * @param port - The port to be checked if the pattern allows.\n         * @param protocol - Protocol to refer default port.\n         */\n        testPort(port: string, protocol: string): boolean;\n        /**\n         * Tests if the current pattern allows the given path.\n         * @param [path] - The path to be checked if the pattern allows.\n         */\n        testPath(path?: string): boolean;\n        /**\n         * Tests the url string with the match pattern provided.\n         * Follows the https://developer.chrome.com/extensions/match_patterns pattern for pattern validation and matching\n         * @param [urlStr] - The url string for which the proxy match needs to be done.\n         */\n        test(urlStr?: string): boolean;\n        /**\n         * Returns a string representation of the match pattern\n         * @returns pattern\n         */\n        toString(): string;\n        /**\n         * Returns the JSON representation.\n         */\n        toJSON(): any;\n        /**\n         * Multiple protocols in the match pattern should be separated by this string\n         */\n        static readonly PROTOCOL_DELIMITER: string;\n        /**\n         * String representation for matching all urls - \n         */\n        static readonly MATCH_ALL_URLS: string;\n    }\n\n}\n'},"./node_modules/raw-loader/dist/cjs.js!./node_modules/postman-sandbox/types/sandbox/prerequest.d.ts":function(e,n,t){"use strict";t.r(n),n.default='// Type definitions for postman-sandbox 3.5.7\n// Project: https://github.com/postmanlabs/postman-sandbox\n// Definitions by: PostmanLabs\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.4\n/// <reference types="node" />\ndeclare var postman: PostmanLegacy;\n\ndeclare interface PostmanLegacy {\n    /***\n     * Sets the next request to be executed.\n     * @param requestName Name of the next request to be executed.\n     */\n    setNextRequest(requestName: string): void;\n}\n\ndeclare class Postman {\n    constructor(bridge: EventEmitter, execution: Execution, onRequest: (...params: any[]) => any, cookieStore: any);\n    /**\n     * The pm.info object contains information pertaining to the script being executed.\n     * Useful information such as the request name, request Id, and iteration count are\n     * stored inside of this object.\n     */\n    info: Info;\n    globals: import("postman-collection").VariableScope;\n    environment: import("postman-collection").VariableScope;\n    collectionVariables: import("postman-collection").VariableScope;\n    variables: import("postman-collection").VariableScope;\n    /**\n     * The iterationData object contains data from the data file provided during a collection run.\n     */\n    iterationData: import("postman-collection").VariableScope;\n    /**\n     * The request object inside pm is a representation of the request for which this script is being run.\n     * For a pre-request script, this is the request that is about to be sent and when in a test script,\n     * this is the representation of the request that was sent.\n     */\n    request: import("postman-collection").Request;\n    /**\n     * The cookies object contains a list of cookies that are associated with the domain\n     * to which the request was made.\n     */\n    cookies: import("postman-collection").CookieList;\n    visualizer: Visualizer;\n    /**\n     * Allows one to send request from script asynchronously.\n     */\n    sendRequest(req: import("postman-collection").Request | string, callback: (...params: any[]) => any): void;\n    expect: Chai.ExpectStatic;\n}\n\n/**\n * Contains information pertaining to the script execution\n */\ndeclare interface Info {\n    /**\n     * Contains information whether the script being executed is a "prerequest" or a "test" script.\n     */\n    eventName: string;\n    /**\n     * Is the value of the current iteration being run.\n     */\n    iteration: number;\n    /**\n     * Is the total number of iterations that are scheduled to run.\n     */\n    iterationCount: number;\n    /**\n     * The saved name of the individual request being run.\n     */\n    requestName: string;\n    /**\n     * The unique guid that identifies the request being run.\n     */\n    requestId: string;\n}\n\ndeclare interface Visualizer {\n    /**\n     * Set visualizer template and its options\n     * @param template - visualisation layout in form of template\n     * @param [data] - data object to be used in template\n     * @param [options] - options to use while processing the template\n     */\n    set(template: string, data?: any, options?: any): void;\n    /**\n     * Clear all visualizer data\n     */\n    clear(): void;\n}\n\n/**\n * The pm object encloses all information pertaining to the script being executed and\n * allows one to access a copy of the request being sent or the response received.\n * It also allows one to get and set environment and global variables.\n */\ndeclare var pm: Postman;\n\ndeclare interface PostmanCookieJar {\n    /**\n     * Get the cookie value with the given name.\n     */\n    get(url: string, name: string, callback: (...params: any[]) => any): void;\n    /**\n     * Get all the cookies for the given URL.\n     */\n    getAll(url: string, options?: any, callback: (...params: any[]) => any): void;\n    /**\n     * Set or update a cookie.\n     */\n    set(url: string, name: string | any, value?: string | ((...params: any[]) => any), callback?: (...params: any[]) => any): void;\n    /**\n     * Remove single cookie with the given name.\n     */\n    unset(url: string, name: string, callback?: (...params: any[]) => any): void;\n    /**\n     * Remove all the cookies for the given URL.\n     */\n    clear(url: string, callback?: (...params: any[]) => any): void;\n}\n\n\n\ninterface Postman {\n    test: Test;\n}\n\ninterface Test {\n\n    /**\n     * You can use this function to write test specifications inside either the Pre-request Script or Tests sandbox.\n     * Writing tests inside this function allows you to name the test accurately and this function also ensures the\n     * rest of the script is not blocked even if there are errors inside the function.\n     * @param testName\n     * @param specFunction\n     */\n    (testName: string, specFunction: Function): void\n\n    /**\n     * Get the total number tests from a specific location.\n     */\n    index(): number,\n\n    /**\n     * By appending .skip(), you may tell test runner to ignore test case.\n     * @param testName\n     */\n    skip(testName: string): void\n}\n\ndeclare module "postman-collection" {\n\ninterface CookieList {\n    jar() : PostmanCookieJar\n}\n\n}\n'},"./node_modules/raw-loader/dist/cjs.js!./node_modules/postman-sandbox/types/sandbox/test.d.ts":function(e,n,t){"use strict";t.r(n),n.default='// Type definitions for postman-sandbox 3.5.7\n// Project: https://github.com/postmanlabs/postman-sandbox\n// Definitions by: PostmanLabs\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.4\n/// <reference types="node" />\ndeclare var postman: PostmanLegacy;\n\ndeclare interface PostmanLegacy {\n    /***\n     * Sets the next request to be executed.\n     * @param requestName Name of the next request to be executed.\n     */\n    setNextRequest(requestName: string): void;\n}\n\ndeclare class Postman {\n    constructor(bridge: EventEmitter, execution: Execution, onRequest: (...params: any[]) => any, cookieStore: any);\n    /**\n     * The pm.info object contains information pertaining to the script being executed.\n     * Useful information such as the request name, request Id, and iteration count are\n     * stored inside of this object.\n     */\n    info: Info;\n    globals: import("postman-collection").VariableScope;\n    environment: import("postman-collection").VariableScope;\n    collectionVariables: import("postman-collection").VariableScope;\n    variables: import("postman-collection").VariableScope;\n    /**\n     * The iterationData object contains data from the data file provided during a collection run.\n     */\n    iterationData: import("postman-collection").VariableScope;\n    /**\n     * The request object inside pm is a representation of the request for which this script is being run.\n     * For a pre-request script, this is the request that is about to be sent and when in a test script,\n     * this is the representation of the request that was sent.\n     */\n    request: import("postman-collection").Request;\n    /**\n     * Inside the test scripts, the pm.response object contains all information pertaining\n     * to the response that was received.\n     */\n    response: import("postman-collection").Response;\n    /**\n     * The cookies object contains a list of cookies that are associated with the domain\n     * to which the request was made.\n     */\n    cookies: import("postman-collection").CookieList;\n    visualizer: Visualizer;\n    /**\n     * Allows one to send request from script asynchronously.\n     */\n    sendRequest(req: import("postman-collection").Request | string, callback: (...params: any[]) => any): void;\n    expect: Chai.ExpectStatic;\n}\n\n/**\n * Contains information pertaining to the script execution\n */\ndeclare interface Info {\n    /**\n     * Contains information whether the script being executed is a "prerequest" or a "test" script.\n     */\n    eventName: string;\n    /**\n     * Is the value of the current iteration being run.\n     */\n    iteration: number;\n    /**\n     * Is the total number of iterations that are scheduled to run.\n     */\n    iterationCount: number;\n    /**\n     * The saved name of the individual request being run.\n     */\n    requestName: string;\n    /**\n     * The unique guid that identifies the request being run.\n     */\n    requestId: string;\n}\n\ndeclare interface Visualizer {\n    /**\n     * Set visualizer template and its options\n     * @param template - visualisation layout in form of template\n     * @param [data] - data object to be used in template\n     * @param [options] - options to use while processing the template\n     */\n    set(template: string, data?: any, options?: any): void;\n    /**\n     * Clear all visualizer data\n     */\n    clear(): void;\n}\n\n/**\n * The pm object encloses all information pertaining to the script being executed and\n * allows one to access a copy of the request being sent or the response received.\n * It also allows one to get and set environment and global variables.\n */\ndeclare var pm: Postman;\n\ndeclare interface PostmanCookieJar {\n    /**\n     * Get the cookie value with the given name.\n     */\n    get(url: string, name: string, callback: (...params: any[]) => any): void;\n    /**\n     * Get all the cookies for the given URL.\n     */\n    getAll(url: string, options?: any, callback: (...params: any[]) => any): void;\n    /**\n     * Set or update a cookie.\n     */\n    set(url: string, name: string | any, value?: string | ((...params: any[]) => any), callback?: (...params: any[]) => any): void;\n    /**\n     * Remove single cookie with the given name.\n     */\n    unset(url: string, name: string, callback?: (...params: any[]) => any): void;\n    /**\n     * Remove all the cookies for the given URL.\n     */\n    clear(url: string, callback?: (...params: any[]) => any): void;\n}\n\n\n\ninterface Postman {\n    test: Test;\n}\n\ninterface Test {\n\n    /**\n     * You can use this function to write test specifications inside either the Pre-request Script or Tests sandbox.\n     * Writing tests inside this function allows you to name the test accurately and this function also ensures the\n     * rest of the script is not blocked even if there are errors inside the function.\n     * @param testName\n     * @param specFunction\n     */\n    (testName: string, specFunction: Function): void\n\n    /**\n     * Get the total number tests from a specific location.\n     */\n    index(): number,\n\n    /**\n     * By appending .skip(), you may tell test runner to ignore test case.\n     * @param testName\n     */\n    skip(testName: string): void\n}\n\ndeclare module "postman-collection" {\n\ninterface CookieList {\n    jar() : PostmanCookieJar\n}\n\ninterface Response extends Assertable {\n\n}\n\ninterface Assertable {\n    to: {\n        have: AssertableHave\n\n        /**\n         * The properties inside the "pm.response.to.be" object allows you to easily assert a set of pre-defined rules.\n         */\n        be: AssertableBe\n    }\n}\n\ninterface AssertableHave {\n    status(code: number): any\n    status(reason: string): any\n    header(key: string): any\n    header(key: string, optionalValue: string): any\n    body(): any\n    body(optionalStringValue: string): any\n    body(optionalRegExpValue: RegExp): any\n    jsonBody(): any\n    jsonBody(optionalExpectEqual: object): any\n    jsonBody(optionalExpectPath: string): any\n    jsonBody(optionalExpectPath: string, optionalValue: any): any\n    jsonSchema(schema: object): any\n    jsonSchema(schema: object, ajvOptions: object): any\n}\n\ninterface AssertableBe {\n\n    /**\n     * Checks 1XX status code\n     */\n    info: number\n\n    /**\n     * Checks 2XX status code\n     */\n    success: number\n\n    /**\n     * Checks 3XX status code\n     */\n    redirection: number\n\n    /**\n     * Checks 4XX status code\n     */\n    clientError: number\n\n    /**\n     * Checks 5XX\n     */\n    serverError: number\n\n    /**\n     * Checks 4XX or 5XX\n     */\n    error: number\n\n    /**\n     * Status code must be 200\n     */\n    ok: number\n\n    /**\n     * Status code must be 202\n     */\n    accepted: number\n\n    /**\n     * Status code must be 400\n     */\n    badRequest: number\n\n    /**\n     * Status code must be 401\n     */\n    unauthorized: number\n\n    /**\n     * Status code 403\n     */\n    forbidden: number\n\n    /**\n     * Status code of response is checked to be 404\n     */\n    notFound: number\n\n    /**\n     * Checks whether response status code is 429\n     */\n    rateLimited: number\n}\n\n}\n'},"./node_modules/raw-loader/dist/cjs.js!./runtime-repl/_common/_api/typings/javascript/lib.es2015.collection.d.ts":function(e,n,t){"use strict";t.r(n),n.default='/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib="true"/>\r\n\n\ninterface Map<K, V> {\r\n    clear(): void;\r\n    delete(key: K): boolean;\r\n    forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void;\r\n    get(key: K): V | undefined;\r\n    has(key: K): boolean;\r\n    set(key: K, value: V): this;\r\n    readonly size: number;\r\n}\r\n\r\ninterface MapConstructor {\r\n    new(): Map<any, any>;\r\n    new<K, V>(entries?: readonly (readonly [K, V])[] | null): Map<K, V>;\r\n    readonly prototype: Map<any, any>;\r\n}\r\ndeclare var Map: MapConstructor;\r\n\r\ninterface ReadonlyMap<K, V> {\r\n    forEach(callbackfn: (value: V, key: K, map: ReadonlyMap<K, V>) => void, thisArg?: any): void;\r\n    get(key: K): V | undefined;\r\n    has(key: K): boolean;\r\n    readonly size: number;\r\n}\r\n\r\ninterface WeakMap<K extends object, V> {\r\n    delete(key: K): boolean;\r\n    get(key: K): V | undefined;\r\n    has(key: K): boolean;\r\n    set(key: K, value: V): this;\r\n}\r\n\r\ninterface WeakMapConstructor {\r\n    new <K extends object = object, V = any>(entries?: readonly [K, V][] | null): WeakMap<K, V>;\r\n    readonly prototype: WeakMap<object, any>;\r\n}\r\ndeclare var WeakMap: WeakMapConstructor;\r\n\r\ninterface Set<T> {\r\n    add(value: T): this;\r\n    clear(): void;\r\n    delete(value: T): boolean;\r\n    forEach(callbackfn: (value: T, value2: T, set: Set<T>) => void, thisArg?: any): void;\r\n    has(value: T): boolean;\r\n    readonly size: number;\r\n}\r\n\r\ninterface SetConstructor {\r\n    new <T = any>(values?: readonly T[] | null): Set<T>;\r\n    readonly prototype: Set<any>;\r\n}\r\ndeclare var Set: SetConstructor;\r\n\r\ninterface ReadonlySet<T> {\r\n    forEach(callbackfn: (value: T, value2: T, set: ReadonlySet<T>) => void, thisArg?: any): void;\r\n    has(value: T): boolean;\r\n    readonly size: number;\r\n}\r\n\r\ninterface WeakSet<T extends object> {\r\n    add(value: T): this;\r\n    delete(value: T): boolean;\r\n    has(value: T): boolean;\r\n}\r\n\r\ninterface WeakSetConstructor {\r\n    new <T extends object = object>(values?: readonly T[] | null): WeakSet<T>;\r\n    readonly prototype: WeakSet<object>;\r\n}\r\ndeclare var WeakSet: WeakSetConstructor;\r\n'},"./node_modules/raw-loader/dist/cjs.js!./runtime-repl/_common/_api/typings/javascript/lib.es2015.core.d.ts":function(e,n,t){"use strict";t.r(n),n.default='/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib="true"/>\r\n\n\ninterface Array<T> {\r\n    /**\r\n     * Returns the value of the first element in the array where predicate is true, and undefined\r\n     * otherwise.\r\n     * @param predicate find calls predicate once for each element of the array, in ascending\r\n     * order, until it finds one where predicate returns true. If such an element is found, find\r\n     * immediately returns that element value. Otherwise, find returns undefined.\r\n     * @param thisArg If provided, it will be used as the this value for each invocation of\r\n     * predicate. If it is not provided, undefined is used instead.\r\n     */\r\n    find<S extends T>(predicate: (this: void, value: T, index: number, obj: T[]) => value is S, thisArg?: any): S | undefined;\r\n    find(predicate: (value: T, index: number, obj: T[]) => unknown, thisArg?: any): T | undefined;\r\n\r\n    /**\r\n     * Returns the index of the first element in the array where predicate is true, and -1\r\n     * otherwise.\r\n     * @param predicate find calls predicate once for each element of the array, in ascending\r\n     * order, until it finds one where predicate returns true. If such an element is found,\r\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\r\n     * @param thisArg If provided, it will be used as the this value for each invocation of\r\n     * predicate. If it is not provided, undefined is used instead.\r\n     */\r\n    findIndex(predicate: (value: T, index: number, obj: T[]) => unknown, thisArg?: any): number;\r\n\r\n    /**\r\n     * Returns the this object after filling the section identified by start and end with value\r\n     * @param value value to fill array section with\r\n     * @param start index to start filling the array at. If start is negative, it is treated as\r\n     * length+start where length is the length of the array.\r\n     * @param end index to stop filling the array at. If end is negative, it is treated as\r\n     * length+end.\r\n     */\r\n    fill(value: T, start?: number, end?: number): this;\r\n\r\n    /**\r\n     * Returns the this object after copying a section of the array identified by start and end\r\n     * to the same array starting at position target\r\n     * @param target If target is negative, it is treated as length+target where length is the\r\n     * length of the array.\r\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\r\n     * is treated as length+end.\r\n     * @param end If not specified, length of the this object is used as its default value.\r\n     */\r\n    copyWithin(target: number, start: number, end?: number): this;\r\n}\r\n\r\ninterface ArrayConstructor {\r\n    /**\r\n     * Creates an array from an array-like object.\r\n     * @param arrayLike An array-like object to convert to an array.\r\n     */\r\n    from<T>(arrayLike: ArrayLike<T>): T[];\r\n\r\n    /**\r\n     * Creates an array from an iterable object.\r\n     * @param arrayLike An array-like object to convert to an array.\r\n     * @param mapfn A mapping function to call on every element of the array.\r\n     * @param thisArg Value of \'this\' used to invoke the mapfn.\r\n     */\r\n    from<T, U>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any): U[];\r\n\r\n    /**\r\n     * Returns a new array from a set of elements.\r\n     * @param items A set of elements to include in the new array object.\r\n     */\r\n    of<T>(...items: T[]): T[];\r\n}\r\n\r\ninterface DateConstructor {\r\n    new (value: number | string | Date): Date;\r\n}\r\n\r\ninterface Function {\r\n    /**\r\n     * Returns the name of the function. Function names are read-only and can not be changed.\r\n     */\r\n    readonly name: string;\r\n}\r\n\r\ninterface Math {\r\n    /**\r\n     * Returns the number of leading zero bits in the 32-bit binary representation of a number.\r\n     * @param x A numeric expression.\r\n     */\r\n    clz32(x: number): number;\r\n\r\n    /**\r\n     * Returns the result of 32-bit multiplication of two numbers.\r\n     * @param x First number\r\n     * @param y Second number\r\n     */\r\n    imul(x: number, y: number): number;\r\n\r\n    /**\r\n     * Returns the sign of the x, indicating whether x is positive, negative or zero.\r\n     * @param x The numeric expression to test\r\n     */\r\n    sign(x: number): number;\r\n\r\n    /**\r\n     * Returns the base 10 logarithm of a number.\r\n     * @param x A numeric expression.\r\n     */\r\n    log10(x: number): number;\r\n\r\n    /**\r\n     * Returns the base 2 logarithm of a number.\r\n     * @param x A numeric expression.\r\n     */\r\n    log2(x: number): number;\r\n\r\n    /**\r\n     * Returns the natural logarithm of 1 + x.\r\n     * @param x A numeric expression.\r\n     */\r\n    log1p(x: number): number;\r\n\r\n    /**\r\n     * Returns the result of (e^x - 1), which is an implementation-dependent approximation to\r\n     * subtracting 1 from the exponential function of x (e raised to the power of x, where e\r\n     * is the base of the natural logarithms).\r\n     * @param x A numeric expression.\r\n     */\r\n    expm1(x: number): number;\r\n\r\n    /**\r\n     * Returns the hyperbolic cosine of a number.\r\n     * @param x A numeric expression that contains an angle measured in radians.\r\n     */\r\n    cosh(x: number): number;\r\n\r\n    /**\r\n     * Returns the hyperbolic sine of a number.\r\n     * @param x A numeric expression that contains an angle measured in radians.\r\n     */\r\n    sinh(x: number): number;\r\n\r\n    /**\r\n     * Returns the hyperbolic tangent of a number.\r\n     * @param x A numeric expression that contains an angle measured in radians.\r\n     */\r\n    tanh(x: number): number;\r\n\r\n    /**\r\n     * Returns the inverse hyperbolic cosine of a number.\r\n     * @param x A numeric expression that contains an angle measured in radians.\r\n     */\r\n    acosh(x: number): number;\r\n\r\n    /**\r\n     * Returns the inverse hyperbolic sine of a number.\r\n     * @param x A numeric expression that contains an angle measured in radians.\r\n     */\r\n    asinh(x: number): number;\r\n\r\n    /**\r\n     * Returns the inverse hyperbolic tangent of a number.\r\n     * @param x A numeric expression that contains an angle measured in radians.\r\n     */\r\n    atanh(x: number): number;\r\n\r\n    /**\r\n     * Returns the square root of the sum of squares of its arguments.\r\n     * @param values Values to compute the square root for.\r\n     *     If no arguments are passed, the result is +0.\r\n     *     If there is only one argument, the result is the absolute value.\r\n     *     If any argument is +Infinity or -Infinity, the result is +Infinity.\r\n     *     If any argument is NaN, the result is NaN.\r\n     *     If all arguments are either +0 or −0, the result is +0.\r\n     */\r\n    hypot(...values: number[]): number;\r\n\r\n    /**\r\n     * Returns the integral part of the a numeric expression, x, removing any fractional digits.\r\n     * If x is already an integer, the result is x.\r\n     * @param x A numeric expression.\r\n     */\r\n    trunc(x: number): number;\r\n\r\n    /**\r\n     * Returns the nearest single precision float representation of a number.\r\n     * @param x A numeric expression.\r\n     */\r\n    fround(x: number): number;\r\n\r\n    /**\r\n     * Returns an implementation-dependent approximation to the cube root of number.\r\n     * @param x A numeric expression.\r\n     */\r\n    cbrt(x: number): number;\r\n}\r\n\r\ninterface NumberConstructor {\r\n    /**\r\n     * The value of Number.EPSILON is the difference between 1 and the smallest value greater than 1\r\n     * that is representable as a Number value, which is approximately:\r\n     * 2.2204460492503130808472633361816 x 10‍−‍16.\r\n     */\r\n    readonly EPSILON: number;\r\n\r\n    /**\r\n     * Returns true if passed value is finite.\r\n     * Unlike the global isFinite, Number.isFinite doesn\'t forcibly convert the parameter to a\r\n     * number. Only finite values of the type number, result in true.\r\n     * @param number A numeric value.\r\n     */\r\n    isFinite(number: unknown): boolean;\r\n\r\n    /**\r\n     * Returns true if the value passed is an integer, false otherwise.\r\n     * @param number A numeric value.\r\n     */\r\n    isInteger(number: unknown): boolean;\r\n\r\n    /**\r\n     * Returns a Boolean value that indicates whether a value is the reserved value NaN (not a\r\n     * number). Unlike the global isNaN(), Number.isNaN() doesn\'t forcefully convert the parameter\r\n     * to a number. Only values of the type number, that are also NaN, result in true.\r\n     * @param number A numeric value.\r\n     */\r\n    isNaN(number: unknown): boolean;\r\n\r\n    /**\r\n     * Returns true if the value passed is a safe integer.\r\n     * @param number A numeric value.\r\n     */\r\n    isSafeInteger(number: unknown): boolean;\r\n\r\n    /**\r\n     * The value of the largest integer n such that n and n + 1 are both exactly representable as\r\n     * a Number value.\r\n     * The value of Number.MAX_SAFE_INTEGER is 9007199254740991 2^53 − 1.\r\n     */\r\n    readonly MAX_SAFE_INTEGER: number;\r\n\r\n    /**\r\n     * The value of the smallest integer n such that n and n − 1 are both exactly representable as\r\n     * a Number value.\r\n     * The value of Number.MIN_SAFE_INTEGER is −9007199254740991 (−(2^53 − 1)).\r\n     */\r\n    readonly MIN_SAFE_INTEGER: number;\r\n\r\n    /**\r\n     * Converts a string to a floating-point number.\r\n     * @param string A string that contains a floating-point number.\r\n     */\r\n    parseFloat(string: string): number;\r\n\r\n    /**\r\n     * Converts A string to an integer.\r\n     * @param s A string to convert into a number.\r\n     * @param radix A value between 2 and 36 that specifies the base of the number in numString.\r\n     * If this argument is not supplied, strings with a prefix of \'0x\' are considered hexadecimal.\r\n     * All other strings are considered decimal.\r\n     */\r\n    parseInt(string: string, radix?: number): number;\r\n}\r\n\r\ninterface ObjectConstructor {\r\n    /**\r\n     * Copy the values of all of the enumerable own properties from one or more source objects to a\r\n     * target object. Returns the target object.\r\n     * @param target The target object to copy to.\r\n     * @param source The source object from which to copy properties.\r\n     */\r\n    assign<T, U>(target: T, source: U): T & U;\r\n\r\n    /**\r\n     * Copy the values of all of the enumerable own properties from one or more source objects to a\r\n     * target object. Returns the target object.\r\n     * @param target The target object to copy to.\r\n     * @param source1 The first source object from which to copy properties.\r\n     * @param source2 The second source object from which to copy properties.\r\n     */\r\n    assign<T, U, V>(target: T, source1: U, source2: V): T & U & V;\r\n\r\n    /**\r\n     * Copy the values of all of the enumerable own properties from one or more source objects to a\r\n     * target object. Returns the target object.\r\n     * @param target The target object to copy to.\r\n     * @param source1 The first source object from which to copy properties.\r\n     * @param source2 The second source object from which to copy properties.\r\n     * @param source3 The third source object from which to copy properties.\r\n     */\r\n    assign<T, U, V, W>(target: T, source1: U, source2: V, source3: W): T & U & V & W;\r\n\r\n    /**\r\n     * Copy the values of all of the enumerable own properties from one or more source objects to a\r\n     * target object. Returns the target object.\r\n     * @param target The target object to copy to.\r\n     * @param sources One or more source objects from which to copy properties\r\n     */\r\n    assign(target: object, ...sources: any[]): any;\r\n\r\n    /**\r\n     * Returns an array of all symbol properties found directly on object o.\r\n     * @param o Object to retrieve the symbols from.\r\n     */\r\n    getOwnPropertySymbols(o: any): symbol[];\r\n\r\n    /**\r\n     * Returns the names of the enumerable string properties and methods of an object.\r\n     * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\r\n     */\r\n    keys(o: {}): string[];\r\n\r\n    /**\r\n     * Returns true if the values are the same value, false otherwise.\r\n     * @param value1 The first value.\r\n     * @param value2 The second value.\r\n     */\r\n    is(value1: any, value2: any): boolean;\r\n\r\n    /**\r\n     * Sets the prototype of a specified object o to object proto or null. Returns the object o.\r\n     * @param o The object to change its prototype.\r\n     * @param proto The value of the new prototype or null.\r\n     */\r\n    setPrototypeOf(o: any, proto: object | null): any;\r\n}\r\n\r\ninterface ReadonlyArray<T> {\r\n    /**\r\n     * Returns the value of the first element in the array where predicate is true, and undefined\r\n     * otherwise.\r\n     * @param predicate find calls predicate once for each element of the array, in ascending\r\n     * order, until it finds one where predicate returns true. If such an element is found, find\r\n     * immediately returns that element value. Otherwise, find returns undefined.\r\n     * @param thisArg If provided, it will be used as the this value for each invocation of\r\n     * predicate. If it is not provided, undefined is used instead.\r\n     */\r\n    find<S extends T>(predicate: (this: void, value: T, index: number, obj: readonly T[]) => value is S, thisArg?: any): S | undefined;\r\n    find(predicate: (value: T, index: number, obj: readonly T[]) => unknown, thisArg?: any): T | undefined;\r\n\r\n    /**\r\n     * Returns the index of the first element in the array where predicate is true, and -1\r\n     * otherwise.\r\n     * @param predicate find calls predicate once for each element of the array, in ascending\r\n     * order, until it finds one where predicate returns true. If such an element is found,\r\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\r\n     * @param thisArg If provided, it will be used as the this value for each invocation of\r\n     * predicate. If it is not provided, undefined is used instead.\r\n     */\r\n    findIndex(predicate: (value: T, index: number, obj: readonly T[]) => unknown, thisArg?: any): number;\r\n}\r\n\r\ninterface RegExp {\r\n    /**\r\n     * Returns a string indicating the flags of the regular expression in question. This field is read-only.\r\n     * The characters in this string are sequenced and concatenated in the following order:\r\n     *\r\n     *    - "g" for global\r\n     *    - "i" for ignoreCase\r\n     *    - "m" for multiline\r\n     *    - "u" for unicode\r\n     *    - "y" for sticky\r\n     *\r\n     * If no flags are set, the value is the empty string.\r\n     */\r\n    readonly flags: string;\r\n\r\n    /**\r\n     * Returns a Boolean value indicating the state of the sticky flag (y) used with a regular\r\n     * expression. Default is false. Read-only.\r\n     */\r\n    readonly sticky: boolean;\r\n\r\n    /**\r\n     * Returns a Boolean value indicating the state of the Unicode flag (u) used with a regular\r\n     * expression. Default is false. Read-only.\r\n     */\r\n    readonly unicode: boolean;\r\n}\r\n\r\ninterface RegExpConstructor {\r\n    new (pattern: RegExp | string, flags?: string): RegExp;\r\n    (pattern: RegExp | string, flags?: string): RegExp;\r\n}\r\n\r\ninterface String {\r\n    /**\r\n     * Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\r\n     * value of the UTF-16 encoded code point starting at the string element at position pos in\r\n     * the String resulting from converting this object to a String.\r\n     * If there is no element at that position, the result is undefined.\r\n     * If a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.\r\n     */\r\n    codePointAt(pos: number): number | undefined;\r\n\r\n    /**\r\n     * Returns true if searchString appears as a substring of the result of converting this\r\n     * object to a String, at one or more positions that are\r\n     * greater than or equal to position; otherwise, returns false.\r\n     * @param searchString search string\r\n     * @param position If position is undefined, 0 is assumed, so as to search all of the String.\r\n     */\r\n    includes(searchString: string, position?: number): boolean;\r\n\r\n    /**\r\n     * Returns true if the sequence of elements of searchString converted to a String is the\r\n     * same as the corresponding elements of this object (converted to a String) starting at\r\n     * endPosition – length(this). Otherwise returns false.\r\n     */\r\n    endsWith(searchString: string, endPosition?: number): boolean;\r\n\r\n    /**\r\n     * Returns the String value result of normalizing the string into the normalization form\r\n     * named by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\r\n     * @param form Applicable values: "NFC", "NFD", "NFKC", or "NFKD", If not specified default\r\n     * is "NFC"\r\n     */\r\n    normalize(form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;\r\n\r\n    /**\r\n     * Returns the String value result of normalizing the string into the normalization form\r\n     * named by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\r\n     * @param form Applicable values: "NFC", "NFD", "NFKC", or "NFKD", If not specified default\r\n     * is "NFC"\r\n     */\r\n    normalize(form?: string): string;\r\n\r\n    /**\r\n     * Returns a String value that is made from count copies appended together. If count is 0,\r\n     * the empty string is returned.\r\n     * @param count number of copies to append\r\n     */\r\n    repeat(count: number): string;\r\n\r\n    /**\r\n     * Returns true if the sequence of elements of searchString converted to a String is the\r\n     * same as the corresponding elements of this object (converted to a String) starting at\r\n     * position. Otherwise returns false.\r\n     */\r\n    startsWith(searchString: string, position?: number): boolean;\r\n\r\n    /**\r\n     * Returns an <a> HTML anchor element and sets the name attribute to the text value\r\n     * @param name\r\n     */\r\n    anchor(name: string): string;\r\n\r\n    /** Returns a <big> HTML element */\r\n    big(): string;\r\n\r\n    /** Returns a <blink> HTML element */\r\n    blink(): string;\r\n\r\n    /** Returns a <b> HTML element */\r\n    bold(): string;\r\n\r\n    /** Returns a <tt> HTML element */\r\n    fixed(): string;\r\n\r\n    /** Returns a <font> HTML element and sets the color attribute value */\r\n    fontcolor(color: string): string;\r\n\r\n    /** Returns a <font> HTML element and sets the size attribute value */\r\n    fontsize(size: number): string;\r\n\r\n    /** Returns a <font> HTML element and sets the size attribute value */\r\n    fontsize(size: string): string;\r\n\r\n    /** Returns an <i> HTML element */\r\n    italics(): string;\r\n\r\n    /** Returns an <a> HTML element and sets the href attribute value */\r\n    link(url: string): string;\r\n\r\n    /** Returns a <small> HTML element */\r\n    small(): string;\r\n\r\n    /** Returns a <strike> HTML element */\r\n    strike(): string;\r\n\r\n    /** Returns a <sub> HTML element */\r\n    sub(): string;\r\n\r\n    /** Returns a <sup> HTML element */\r\n    sup(): string;\r\n}\r\n\r\ninterface StringConstructor {\r\n    /**\r\n     * Return the String value whose elements are, in order, the elements in the List elements.\r\n     * If length is 0, the empty string is returned.\r\n     */\r\n    fromCodePoint(...codePoints: number[]): string;\r\n\r\n    /**\r\n     * String.raw is intended for use as a tag function of a Tagged Template String. When called\r\n     * as such the first argument will be a well formed template call site object and the rest\r\n     * parameter will contain the substitution values.\r\n     * @param template A well-formed template string call site representation.\r\n     * @param substitutions A set of substitution values.\r\n     */\r\n    raw(template: TemplateStringsArray, ...substitutions: any[]): string;\r\n}\r\n'},"./node_modules/raw-loader/dist/cjs.js!./runtime-repl/_common/_api/typings/javascript/lib.es2015.generator.d.ts":function(e,n,t){"use strict";t.r(n),n.default='/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib="true"/>\r\n\n\n/// <reference lib="es2015.iterable" />\r\n\r\ninterface Generator<T = unknown, TReturn = any, TNext = unknown> extends Iterator<T, TReturn, TNext> {\r\n    // NOTE: \'next\' is defined using a tuple to ensure we report the correct assignability errors in all places.\r\n    next(...args: [] | [TNext]): IteratorResult<T, TReturn>;\r\n    return(value: TReturn): IteratorResult<T, TReturn>;\r\n    throw(e: any): IteratorResult<T, TReturn>;\r\n    [Symbol.iterator](): Generator<T, TReturn, TNext>;\r\n}\r\n\r\ninterface GeneratorFunction {\r\n    /**\r\n     * Creates a new Generator object.\r\n     * @param args A list of arguments the function accepts.\r\n     */\r\n    new (...args: any[]): Generator;\r\n    /**\r\n     * Creates a new Generator object.\r\n     * @param args A list of arguments the function accepts.\r\n     */\r\n    (...args: any[]): Generator;\r\n    /**\r\n     * The length of the arguments.\r\n     */\r\n    readonly length: number;\r\n    /**\r\n     * Returns the name of the function.\r\n     */\r\n    readonly name: string;\r\n    /**\r\n     * A reference to the prototype.\r\n     */\r\n    readonly prototype: Generator;\r\n}\r\n\r\ninterface GeneratorFunctionConstructor {\r\n    /**\r\n     * Creates a new Generator function.\r\n     * @param args A list of arguments the function accepts.\r\n     */\r\n    new (...args: string[]): GeneratorFunction;\r\n    /**\r\n     * Creates a new Generator function.\r\n     * @param args A list of arguments the function accepts.\r\n     */\r\n    (...args: string[]): GeneratorFunction;\r\n    /**\r\n     * The length of the arguments.\r\n     */\r\n    readonly length: number;\r\n    /**\r\n     * Returns the name of the function.\r\n     */\r\n    readonly name: string;\r\n    /**\r\n     * A reference to the prototype.\r\n     */\r\n    readonly prototype: GeneratorFunction;\r\n}\r\n'},"./node_modules/raw-loader/dist/cjs.js!./runtime-repl/_common/_api/typings/javascript/lib.es2015.iterable.d.ts":function(e,n,t){"use strict";t.r(n),n.default="/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\r\n\n\n/// <reference lib=\"es2015.symbol\" />\r\n\r\ninterface SymbolConstructor {\r\n    /**\r\n     * A method that returns the default iterator for an object. Called by the semantics of the\r\n     * for-of statement.\r\n     */\r\n    readonly iterator: symbol;\r\n}\r\n\r\ninterface IteratorYieldResult<TYield> {\r\n    done?: false;\r\n    value: TYield;\r\n}\r\n\r\ninterface IteratorReturnResult<TReturn> {\r\n    done: true;\r\n    value: TReturn;\r\n}\r\n\r\ntype IteratorResult<T, TReturn = any> = IteratorYieldResult<T> | IteratorReturnResult<TReturn>;\r\n\r\ninterface Iterator<T, TReturn = any, TNext = undefined> {\r\n    // NOTE: 'next' is defined using a tuple to ensure we report the correct assignability errors in all places.\r\n    next(...args: [] | [TNext]): IteratorResult<T, TReturn>;\r\n    return?(value?: TReturn): IteratorResult<T, TReturn>;\r\n    throw?(e?: any): IteratorResult<T, TReturn>;\r\n}\r\n\r\ninterface Iterable<T> {\r\n    [Symbol.iterator](): Iterator<T>;\r\n}\r\n\r\ninterface IterableIterator<T> extends Iterator<T> {\r\n    [Symbol.iterator](): IterableIterator<T>;\r\n}\r\n\r\ninterface Array<T> {\r\n    /** Iterator */\r\n    [Symbol.iterator](): IterableIterator<T>;\r\n\r\n    /**\r\n     * Returns an iterable of key, value pairs for every entry in the array\r\n     */\r\n    entries(): IterableIterator<[number, T]>;\r\n\r\n    /**\r\n     * Returns an iterable of keys in the array\r\n     */\r\n    keys(): IterableIterator<number>;\r\n\r\n    /**\r\n     * Returns an iterable of values in the array\r\n     */\r\n    values(): IterableIterator<T>;\r\n}\r\n\r\ninterface ArrayConstructor {\r\n    /**\r\n     * Creates an array from an iterable object.\r\n     * @param iterable An iterable object to convert to an array.\r\n     */\r\n    from<T>(iterable: Iterable<T> | ArrayLike<T>): T[];\r\n\r\n    /**\r\n     * Creates an array from an iterable object.\r\n     * @param iterable An iterable object to convert to an array.\r\n     * @param mapfn A mapping function to call on every element of the array.\r\n     * @param thisArg Value of 'this' used to invoke the mapfn.\r\n     */\r\n    from<T, U>(iterable: Iterable<T> | ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any): U[];\r\n}\r\n\r\ninterface ReadonlyArray<T> {\r\n    /** Iterator of values in the array. */\r\n    [Symbol.iterator](): IterableIterator<T>;\r\n\r\n    /**\r\n     * Returns an iterable of key, value pairs for every entry in the array\r\n     */\r\n    entries(): IterableIterator<[number, T]>;\r\n\r\n    /**\r\n     * Returns an iterable of keys in the array\r\n     */\r\n    keys(): IterableIterator<number>;\r\n\r\n    /**\r\n     * Returns an iterable of values in the array\r\n     */\r\n    values(): IterableIterator<T>;\r\n}\r\n\r\ninterface IArguments {\r\n    /** Iterator */\r\n    [Symbol.iterator](): IterableIterator<any>;\r\n}\r\n\r\ninterface Map<K, V> {\r\n    /** Returns an iterable of entries in the map. */\r\n    [Symbol.iterator](): IterableIterator<[K, V]>;\r\n\r\n    /**\r\n     * Returns an iterable of key, value pairs for every entry in the map.\r\n     */\r\n    entries(): IterableIterator<[K, V]>;\r\n\r\n    /**\r\n     * Returns an iterable of keys in the map\r\n     */\r\n    keys(): IterableIterator<K>;\r\n\r\n    /**\r\n     * Returns an iterable of values in the map\r\n     */\r\n    values(): IterableIterator<V>;\r\n}\r\n\r\ninterface ReadonlyMap<K, V> {\r\n    /** Returns an iterable of entries in the map. */\r\n    [Symbol.iterator](): IterableIterator<[K, V]>;\r\n\r\n    /**\r\n     * Returns an iterable of key, value pairs for every entry in the map.\r\n     */\r\n    entries(): IterableIterator<[K, V]>;\r\n\r\n    /**\r\n     * Returns an iterable of keys in the map\r\n     */\r\n    keys(): IterableIterator<K>;\r\n\r\n    /**\r\n     * Returns an iterable of values in the map\r\n     */\r\n    values(): IterableIterator<V>;\r\n}\r\n\r\ninterface MapConstructor {\r\n    new <K, V>(iterable: Iterable<readonly [K, V]>): Map<K, V>;\r\n}\r\n\r\ninterface WeakMap<K extends object, V> { }\r\n\r\ninterface WeakMapConstructor {\r\n    new <K extends object, V>(iterable: Iterable<[K, V]>): WeakMap<K, V>;\r\n}\r\n\r\ninterface Set<T> {\r\n    /** Iterates over values in the set. */\r\n    [Symbol.iterator](): IterableIterator<T>;\r\n    /**\r\n     * Returns an iterable of [v,v] pairs for every value `v` in the set.\r\n     */\r\n    entries(): IterableIterator<[T, T]>;\r\n    /**\r\n     * Despite its name, returns an iterable of the values in the set,\r\n     */\r\n    keys(): IterableIterator<T>;\r\n\r\n    /**\r\n     * Returns an iterable of values in the set.\r\n     */\r\n    values(): IterableIterator<T>;\r\n}\r\n\r\ninterface ReadonlySet<T> {\r\n    /** Iterates over values in the set. */\r\n    [Symbol.iterator](): IterableIterator<T>;\r\n\r\n    /**\r\n     * Returns an iterable of [v,v] pairs for every value `v` in the set.\r\n     */\r\n    entries(): IterableIterator<[T, T]>;\r\n\r\n    /**\r\n     * Despite its name, returns an iterable of the values in the set,\r\n     */\r\n    keys(): IterableIterator<T>;\r\n\r\n    /**\r\n     * Returns an iterable of values in the set.\r\n     */\r\n    values(): IterableIterator<T>;\r\n}\r\n\r\ninterface SetConstructor {\r\n    new <T>(iterable?: Iterable<T> | null): Set<T>;\r\n}\r\n\r\ninterface WeakSet<T extends object> { }\r\n\r\ninterface WeakSetConstructor {\r\n    new <T extends object = object>(iterable: Iterable<T>): WeakSet<T>;\r\n}\r\n\r\ninterface Promise<T> { }\r\n\r\ninterface PromiseConstructor {\r\n    /**\r\n     * Creates a Promise that is resolved with an array of results when all of the provided Promises\r\n     * resolve, or rejected when any Promise is rejected.\r\n     * @param values An iterable of Promises.\r\n     * @returns A new Promise.\r\n     */\r\n    all<T>(values: Iterable<T | PromiseLike<T>>): Promise<T[]>;\r\n\r\n    /**\r\n     * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\r\n     * or rejected.\r\n     * @param values An iterable of Promises.\r\n     * @returns A new Promise.\r\n     */\r\n    race<T>(values: Iterable<T>): Promise<T extends PromiseLike<infer U> ? U : T>;\r\n\r\n    /**\r\n     * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\r\n     * or rejected.\r\n     * @param values An iterable of Promises.\r\n     * @returns A new Promise.\r\n     */\r\n    race<T>(values: Iterable<T | PromiseLike<T>>): Promise<T>;\r\n}\r\n\r\ndeclare namespace Reflect {\r\n    function enumerate(target: object): IterableIterator<any>;\r\n}\r\n\r\ninterface String {\r\n    /** Iterator */\r\n    [Symbol.iterator](): IterableIterator<string>;\r\n}\r\n\r\ninterface Int8Array {\r\n    [Symbol.iterator](): IterableIterator<number>;\r\n    /**\r\n     * Returns an array of key, value pairs for every entry in the array\r\n     */\r\n    entries(): IterableIterator<[number, number]>;\r\n    /**\r\n     * Returns an list of keys in the array\r\n     */\r\n    keys(): IterableIterator<number>;\r\n    /**\r\n     * Returns an list of values in the array\r\n     */\r\n    values(): IterableIterator<number>;\r\n}\r\n\r\ninterface Int8ArrayConstructor {\r\n    new (elements: Iterable<number>): Int8Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     * @param mapfn A mapping function to call on every element of the array.\r\n     * @param thisArg Value of 'this' used to invoke the mapfn.\r\n     */\r\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Int8Array;\r\n}\r\n\r\ninterface Uint8Array {\r\n    [Symbol.iterator](): IterableIterator<number>;\r\n    /**\r\n     * Returns an array of key, value pairs for every entry in the array\r\n     */\r\n    entries(): IterableIterator<[number, number]>;\r\n    /**\r\n     * Returns an list of keys in the array\r\n     */\r\n    keys(): IterableIterator<number>;\r\n    /**\r\n     * Returns an list of values in the array\r\n     */\r\n    values(): IterableIterator<number>;\r\n}\r\n\r\ninterface Uint8ArrayConstructor {\r\n    new (elements: Iterable<number>): Uint8Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     * @param mapfn A mapping function to call on every element of the array.\r\n     * @param thisArg Value of 'this' used to invoke the mapfn.\r\n     */\r\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint8Array;\r\n}\r\n\r\ninterface Uint8ClampedArray {\r\n    [Symbol.iterator](): IterableIterator<number>;\r\n    /**\r\n     * Returns an array of key, value pairs for every entry in the array\r\n     */\r\n    entries(): IterableIterator<[number, number]>;\r\n\r\n    /**\r\n     * Returns an list of keys in the array\r\n     */\r\n    keys(): IterableIterator<number>;\r\n\r\n    /**\r\n     * Returns an list of values in the array\r\n     */\r\n    values(): IterableIterator<number>;\r\n}\r\n\r\ninterface Uint8ClampedArrayConstructor {\r\n    new (elements: Iterable<number>): Uint8ClampedArray;\r\n\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     * @param mapfn A mapping function to call on every element of the array.\r\n     * @param thisArg Value of 'this' used to invoke the mapfn.\r\n     */\r\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint8ClampedArray;\r\n}\r\n\r\ninterface Int16Array {\r\n    [Symbol.iterator](): IterableIterator<number>;\r\n    /**\r\n     * Returns an array of key, value pairs for every entry in the array\r\n     */\r\n    entries(): IterableIterator<[number, number]>;\r\n\r\n    /**\r\n     * Returns an list of keys in the array\r\n     */\r\n    keys(): IterableIterator<number>;\r\n\r\n    /**\r\n     * Returns an list of values in the array\r\n     */\r\n    values(): IterableIterator<number>;\r\n}\r\n\r\ninterface Int16ArrayConstructor {\r\n    new (elements: Iterable<number>): Int16Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     * @param mapfn A mapping function to call on every element of the array.\r\n     * @param thisArg Value of 'this' used to invoke the mapfn.\r\n     */\r\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Int16Array;\r\n}\r\n\r\ninterface Uint16Array {\r\n    [Symbol.iterator](): IterableIterator<number>;\r\n    /**\r\n     * Returns an array of key, value pairs for every entry in the array\r\n     */\r\n    entries(): IterableIterator<[number, number]>;\r\n    /**\r\n     * Returns an list of keys in the array\r\n     */\r\n    keys(): IterableIterator<number>;\r\n    /**\r\n     * Returns an list of values in the array\r\n     */\r\n    values(): IterableIterator<number>;\r\n}\r\n\r\ninterface Uint16ArrayConstructor {\r\n    new (elements: Iterable<number>): Uint16Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     * @param mapfn A mapping function to call on every element of the array.\r\n     * @param thisArg Value of 'this' used to invoke the mapfn.\r\n     */\r\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint16Array;\r\n}\r\n\r\ninterface Int32Array {\r\n    [Symbol.iterator](): IterableIterator<number>;\r\n    /**\r\n     * Returns an array of key, value pairs for every entry in the array\r\n     */\r\n    entries(): IterableIterator<[number, number]>;\r\n    /**\r\n     * Returns an list of keys in the array\r\n     */\r\n    keys(): IterableIterator<number>;\r\n    /**\r\n     * Returns an list of values in the array\r\n     */\r\n    values(): IterableIterator<number>;\r\n}\r\n\r\ninterface Int32ArrayConstructor {\r\n    new (elements: Iterable<number>): Int32Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     * @param mapfn A mapping function to call on every element of the array.\r\n     * @param thisArg Value of 'this' used to invoke the mapfn.\r\n     */\r\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Int32Array;\r\n}\r\n\r\ninterface Uint32Array {\r\n    [Symbol.iterator](): IterableIterator<number>;\r\n    /**\r\n     * Returns an array of key, value pairs for every entry in the array\r\n     */\r\n    entries(): IterableIterator<[number, number]>;\r\n    /**\r\n     * Returns an list of keys in the array\r\n     */\r\n    keys(): IterableIterator<number>;\r\n    /**\r\n     * Returns an list of values in the array\r\n     */\r\n    values(): IterableIterator<number>;\r\n}\r\n\r\ninterface Uint32ArrayConstructor {\r\n    new (elements: Iterable<number>): Uint32Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     * @param mapfn A mapping function to call on every element of the array.\r\n     * @param thisArg Value of 'this' used to invoke the mapfn.\r\n     */\r\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint32Array;\r\n}\r\n\r\ninterface Float32Array {\r\n    [Symbol.iterator](): IterableIterator<number>;\r\n    /**\r\n     * Returns an array of key, value pairs for every entry in the array\r\n     */\r\n    entries(): IterableIterator<[number, number]>;\r\n    /**\r\n     * Returns an list of keys in the array\r\n     */\r\n    keys(): IterableIterator<number>;\r\n    /**\r\n     * Returns an list of values in the array\r\n     */\r\n    values(): IterableIterator<number>;\r\n}\r\n\r\ninterface Float32ArrayConstructor {\r\n    new (elements: Iterable<number>): Float32Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     * @param mapfn A mapping function to call on every element of the array.\r\n     * @param thisArg Value of 'this' used to invoke the mapfn.\r\n     */\r\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Float32Array;\r\n}\r\n\r\ninterface Float64Array {\r\n    [Symbol.iterator](): IterableIterator<number>;\r\n    /**\r\n     * Returns an array of key, value pairs for every entry in the array\r\n     */\r\n    entries(): IterableIterator<[number, number]>;\r\n    /**\r\n     * Returns an list of keys in the array\r\n     */\r\n    keys(): IterableIterator<number>;\r\n    /**\r\n     * Returns an list of values in the array\r\n     */\r\n    values(): IterableIterator<number>;\r\n}\r\n\r\ninterface Float64ArrayConstructor {\r\n    new (elements: Iterable<number>): Float64Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     * @param mapfn A mapping function to call on every element of the array.\r\n     * @param thisArg Value of 'this' used to invoke the mapfn.\r\n     */\r\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Float64Array;\r\n}\r\n"},"./node_modules/raw-loader/dist/cjs.js!./runtime-repl/_common/_api/typings/javascript/lib.es2015.promise.d.ts":function(e,n,t){"use strict";t.r(n),n.default='/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib="true"/>\r\n\n\ninterface PromiseConstructor {\r\n    /**\r\n     * A reference to the prototype.\r\n     */\r\n    readonly prototype: Promise<any>;\r\n\r\n    /**\r\n     * Creates a new Promise.\r\n     * @param executor A callback used to initialize the promise. This callback is passed two arguments:\r\n     * a resolve callback used to resolve the promise with a value or the result of another promise,\r\n     * and a reject callback used to reject the promise with a provided reason or error.\r\n     */\r\n    new <T>(executor: (resolve: (value?: T | PromiseLike<T>) => void, reject: (reason?: any) => void) => void): Promise<T>;\r\n\r\n    /**\r\n     * Creates a Promise that is resolved with an array of results when all of the provided Promises\r\n     * resolve, or rejected when any Promise is rejected.\r\n     * @param values An array of Promises.\r\n     * @returns A new Promise.\r\n     */\r\n    all<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(values: readonly [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike<T4>, T5 | PromiseLike<T5>, T6 | PromiseLike<T6>, T7 | PromiseLike<T7>, T8 | PromiseLike<T8>, T9 | PromiseLike<T9>, T10 | PromiseLike<T10>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]>;\r\n\r\n    /**\r\n     * Creates a Promise that is resolved with an array of results when all of the provided Promises\r\n     * resolve, or rejected when any Promise is rejected.\r\n     * @param values An array of Promises.\r\n     * @returns A new Promise.\r\n     */\r\n    all<T1, T2, T3, T4, T5, T6, T7, T8, T9>(values: readonly [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike<T4>, T5 | PromiseLike<T5>, T6 | PromiseLike<T6>, T7 | PromiseLike<T7>, T8 | PromiseLike<T8>, T9 | PromiseLike<T9>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8, T9]>;\r\n\r\n    /**\r\n     * Creates a Promise that is resolved with an array of results when all of the provided Promises\r\n     * resolve, or rejected when any Promise is rejected.\r\n     * @param values An array of Promises.\r\n     * @returns A new Promise.\r\n     */\r\n    all<T1, T2, T3, T4, T5, T6, T7, T8>(values: readonly [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike<T4>, T5 | PromiseLike<T5>, T6 | PromiseLike<T6>, T7 | PromiseLike<T7>, T8 | PromiseLike<T8>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8]>;\r\n\r\n    /**\r\n     * Creates a Promise that is resolved with an array of results when all of the provided Promises\r\n     * resolve, or rejected when any Promise is rejected.\r\n     * @param values An array of Promises.\r\n     * @returns A new Promise.\r\n     */\r\n    all<T1, T2, T3, T4, T5, T6, T7>(values: readonly [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike<T4>, T5 | PromiseLike<T5>, T6 | PromiseLike<T6>, T7 | PromiseLike<T7>]): Promise<[T1, T2, T3, T4, T5, T6, T7]>;\r\n\r\n    /**\r\n     * Creates a Promise that is resolved with an array of results when all of the provided Promises\r\n     * resolve, or rejected when any Promise is rejected.\r\n     * @param values An array of Promises.\r\n     * @returns A new Promise.\r\n     */\r\n    all<T1, T2, T3, T4, T5, T6>(values: readonly [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike<T4>, T5 | PromiseLike<T5>, T6 | PromiseLike<T6>]): Promise<[T1, T2, T3, T4, T5, T6]>;\r\n\r\n    /**\r\n     * Creates a Promise that is resolved with an array of results when all of the provided Promises\r\n     * resolve, or rejected when any Promise is rejected.\r\n     * @param values An array of Promises.\r\n     * @returns A new Promise.\r\n     */\r\n    all<T1, T2, T3, T4, T5>(values: readonly [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike<T4>, T5 | PromiseLike<T5>]): Promise<[T1, T2, T3, T4, T5]>;\r\n\r\n    /**\r\n     * Creates a Promise that is resolved with an array of results when all of the provided Promises\r\n     * resolve, or rejected when any Promise is rejected.\r\n     * @param values An array of Promises.\r\n     * @returns A new Promise.\r\n     */\r\n    all<T1, T2, T3, T4>(values: readonly [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike<T4>]): Promise<[T1, T2, T3, T4]>;\r\n\r\n    /**\r\n     * Creates a Promise that is resolved with an array of results when all of the provided Promises\r\n     * resolve, or rejected when any Promise is rejected.\r\n     * @param values An array of Promises.\r\n     * @returns A new Promise.\r\n     */\r\n    all<T1, T2, T3>(values: readonly [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>]): Promise<[T1, T2, T3]>;\r\n\r\n    /**\r\n     * Creates a Promise that is resolved with an array of results when all of the provided Promises\r\n     * resolve, or rejected when any Promise is rejected.\r\n     * @param values An array of Promises.\r\n     * @returns A new Promise.\r\n     */\r\n    all<T1, T2>(values: readonly [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>]): Promise<[T1, T2]>;\r\n\r\n    /**\r\n     * Creates a Promise that is resolved with an array of results when all of the provided Promises\r\n     * resolve, or rejected when any Promise is rejected.\r\n     * @param values An array of Promises.\r\n     * @returns A new Promise.\r\n     */\r\n    all<T>(values: readonly (T | PromiseLike<T>)[]): Promise<T[]>;\r\n\r\n    // see: lib.es2015.iterable.d.ts\r\n    // all<T>(values: Iterable<T | PromiseLike<T>>): Promise<T[]>;\r\n\r\n    /**\r\n     * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\r\n     * or rejected.\r\n     * @param values An array of Promises.\r\n     * @returns A new Promise.\r\n     */\r\n    race<T>(values: readonly T[]): Promise<T extends PromiseLike<infer U> ? U : T>;\r\n\r\n    // see: lib.es2015.iterable.d.ts\r\n    // race<T>(values: Iterable<T>): Promise<T extends PromiseLike<infer U> ? U : T>;\r\n\r\n    /**\r\n     * Creates a new rejected promise for the provided reason.\r\n     * @param reason The reason the promise was rejected.\r\n     * @returns A new rejected Promise.\r\n     */\r\n    reject<T = never>(reason?: any): Promise<T>;\r\n\r\n    /**\r\n     * Creates a new resolved promise for the provided value.\r\n     * @param value A promise.\r\n     * @returns A promise whose internal state matches the provided promise.\r\n     */\r\n    resolve<T>(value: T | PromiseLike<T>): Promise<T>;\r\n\r\n    /**\r\n     * Creates a new resolved promise .\r\n     * @returns A resolved promise.\r\n     */\r\n    resolve(): Promise<void>;\r\n}\r\n\r\ndeclare var Promise: PromiseConstructor;\r\n'},"./node_modules/raw-loader/dist/cjs.js!./runtime-repl/_common/_api/typings/javascript/lib.es2015.proxy.d.ts":function(e,n,t){"use strict";t.r(n),n.default='/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib="true"/>\r\n\n\ninterface ProxyHandler<T extends object> {\r\n    getPrototypeOf? (target: T): object | null;\r\n    setPrototypeOf? (target: T, v: any): boolean;\r\n    isExtensible? (target: T): boolean;\r\n    preventExtensions? (target: T): boolean;\r\n    getOwnPropertyDescriptor? (target: T, p: PropertyKey): PropertyDescriptor | undefined;\r\n    has? (target: T, p: PropertyKey): boolean;\r\n    get? (target: T, p: PropertyKey, receiver: any): any;\r\n    set? (target: T, p: PropertyKey, value: any, receiver: any): boolean;\r\n    deleteProperty? (target: T, p: PropertyKey): boolean;\r\n    defineProperty? (target: T, p: PropertyKey, attributes: PropertyDescriptor): boolean;\r\n    enumerate? (target: T): PropertyKey[];\r\n    ownKeys? (target: T): PropertyKey[];\r\n    apply? (target: T, thisArg: any, argArray?: any): any;\r\n    construct? (target: T, argArray: any, newTarget?: any): object;\r\n}\r\n\r\ninterface ProxyConstructor {\r\n    revocable<T extends object>(target: T, handler: ProxyHandler<T>): { proxy: T; revoke: () => void; };\r\n    new <T extends object>(target: T, handler: ProxyHandler<T>): T;\r\n}\r\ndeclare var Proxy: ProxyConstructor;\r\n'},"./node_modules/raw-loader/dist/cjs.js!./runtime-repl/_common/_api/typings/javascript/lib.es2015.reflect.d.ts":function(e,n,t){"use strict";t.r(n),n.default='/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib="true"/>\r\n\n\ndeclare namespace Reflect {\r\n    function apply(target: Function, thisArgument: any, argumentsList: ArrayLike<any>): any;\r\n    function construct(target: Function, argumentsList: ArrayLike<any>, newTarget?: any): any;\r\n    function defineProperty(target: object, propertyKey: PropertyKey, attributes: PropertyDescriptor): boolean;\r\n    function deleteProperty(target: object, propertyKey: PropertyKey): boolean;\r\n    function get(target: object, propertyKey: PropertyKey, receiver?: any): any;\r\n    function getOwnPropertyDescriptor(target: object, propertyKey: PropertyKey): PropertyDescriptor | undefined;\r\n    function getPrototypeOf(target: object): object;\r\n    function has(target: object, propertyKey: PropertyKey): boolean;\r\n    function isExtensible(target: object): boolean;\r\n    function ownKeys(target: object): PropertyKey[];\r\n    function preventExtensions(target: object): boolean;\r\n    function set(target: object, propertyKey: PropertyKey, value: any, receiver?: any): boolean;\r\n    function setPrototypeOf(target: object, proto: any): boolean;\r\n}\r\n'},"./node_modules/raw-loader/dist/cjs.js!./runtime-repl/_common/_api/typings/javascript/lib.es2015.symbol.d.ts":function(e,n,t){"use strict";t.r(n),n.default='/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib="true"/>\r\n\n\ninterface SymbolConstructor {\r\n    /**\r\n     * A reference to the prototype.\r\n     */\r\n    readonly prototype: Symbol;\r\n\r\n    /**\r\n     * Returns a new unique Symbol value.\r\n     * @param  description Description of the new Symbol object.\r\n     */\r\n    (description?: string | number): symbol;\r\n\r\n    /**\r\n     * Returns a Symbol object from the global symbol registry matching the given key if found.\r\n     * Otherwise, returns a new symbol with this key.\r\n     * @param key key to search for.\r\n     */\r\n    for(key: string): symbol;\r\n\r\n    /**\r\n     * Returns a key from the global symbol registry matching the given Symbol if found.\r\n     * Otherwise, returns a undefined.\r\n     * @param sym Symbol to find the key for.\r\n     */\r\n    keyFor(sym: symbol): string | undefined;\r\n}\r\n\r\ndeclare var Symbol: SymbolConstructor;'},"./node_modules/raw-loader/dist/cjs.js!./runtime-repl/_common/_api/typings/javascript/lib.es2015.symbol.wellknown.d.ts":function(e,n,t){"use strict";t.r(n),n.default='/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib="true"/>\r\n\n\n/// <reference lib="es2015.symbol" />\r\n\r\ninterface SymbolConstructor {\r\n    /**\r\n     * A method that determines if a constructor object recognizes an object as one of the\r\n     * constructor’s instances. Called by the semantics of the instanceof operator.\r\n     */\r\n    readonly hasInstance: symbol;\r\n\r\n    /**\r\n     * A Boolean value that if true indicates that an object should flatten to its array elements\r\n     * by Array.prototype.concat.\r\n     */\r\n    readonly isConcatSpreadable: symbol;\r\n\r\n    /**\r\n     * A regular expression method that matches the regular expression against a string. Called\r\n     * by the String.prototype.match method.\r\n     */\r\n    readonly match: symbol;\r\n\r\n    /**\r\n     * A regular expression method that replaces matched substrings of a string. Called by the\r\n     * String.prototype.replace method.\r\n     */\r\n    readonly replace: symbol;\r\n\r\n    /**\r\n     * A regular expression method that returns the index within a string that matches the\r\n     * regular expression. Called by the String.prototype.search method.\r\n     */\r\n    readonly search: symbol;\r\n\r\n    /**\r\n     * A function valued property that is the constructor function that is used to create\r\n     * derived objects.\r\n     */\r\n    readonly species: symbol;\r\n\r\n    /**\r\n     * A regular expression method that splits a string at the indices that match the regular\r\n     * expression. Called by the String.prototype.split method.\r\n     */\r\n    readonly split: symbol;\r\n\r\n    /**\r\n     * A method that converts an object to a corresponding primitive value.\r\n     * Called by the ToPrimitive abstract operation.\r\n     */\r\n    readonly toPrimitive: symbol;\r\n\r\n    /**\r\n     * A String value that is used in the creation of the default string description of an object.\r\n     * Called by the built-in method Object.prototype.toString.\r\n     */\r\n    readonly toStringTag: symbol;\r\n\r\n    /**\r\n     * An Object whose own property names are property names that are excluded from the \'with\'\r\n     * environment bindings of the associated objects.\r\n     */\r\n    readonly unscopables: symbol;\r\n}\r\n\r\ninterface Symbol {\r\n    readonly [Symbol.toStringTag]: string;\r\n}\r\n\r\ninterface Array<T> {\r\n    /**\r\n     * Returns an object whose properties have the value \'true\'\r\n     * when they will be absent when used in a \'with\' statement.\r\n     */\r\n    [Symbol.unscopables](): {\r\n        copyWithin: boolean;\r\n        entries: boolean;\r\n        fill: boolean;\r\n        find: boolean;\r\n        findIndex: boolean;\r\n        keys: boolean;\r\n        values: boolean;\r\n    };\r\n}\r\n\r\ninterface Date {\r\n    /**\r\n     * Converts a Date object to a string.\r\n     */\r\n    [Symbol.toPrimitive](hint: "default"): string;\r\n    /**\r\n     * Converts a Date object to a string.\r\n     */\r\n    [Symbol.toPrimitive](hint: "string"): string;\r\n    /**\r\n     * Converts a Date object to a number.\r\n     */\r\n    [Symbol.toPrimitive](hint: "number"): number;\r\n    /**\r\n     * Converts a Date object to a string or number.\r\n     *\r\n     * @param hint The strings "number", "string", or "default" to specify what primitive to return.\r\n     *\r\n     * @throws {TypeError} If \'hint\' was given something other than "number", "string", or "default".\r\n     * @returns A number if \'hint\' was "number", a string if \'hint\' was "string" or "default".\r\n     */\r\n    [Symbol.toPrimitive](hint: string): string | number;\r\n}\r\n\r\ninterface Map<K, V> {\r\n    readonly [Symbol.toStringTag]: string;\r\n}\r\n\r\ninterface WeakMap<K extends object, V> {\r\n    readonly [Symbol.toStringTag]: string;\r\n}\r\n\r\ninterface Set<T> {\r\n    readonly [Symbol.toStringTag]: string;\r\n}\r\n\r\ninterface WeakSet<T extends object> {\r\n    readonly [Symbol.toStringTag]: string;\r\n}\r\n\r\ninterface JSON {\r\n    readonly [Symbol.toStringTag]: string;\r\n}\r\n\r\ninterface Function {\r\n    /**\r\n     * Determines whether the given value inherits from this function if this function was used\r\n     * as a constructor function.\r\n     *\r\n     * A constructor function can control which objects are recognized as its instances by\r\n     * \'instanceof\' by overriding this method.\r\n     */\r\n    [Symbol.hasInstance](value: any): boolean;\r\n}\r\n\r\ninterface GeneratorFunction {\r\n    readonly [Symbol.toStringTag]: string;\r\n}\r\n\r\ninterface Math {\r\n    readonly [Symbol.toStringTag]: string;\r\n}\r\n\r\ninterface Promise<T> {\r\n    readonly [Symbol.toStringTag]: string;\r\n}\r\n\r\ninterface PromiseConstructor {\r\n    readonly [Symbol.species]: PromiseConstructor;\r\n}\r\n\r\ninterface RegExp {\r\n    /**\r\n     * Matches a string with this regular expression, and returns an array containing the results of\r\n     * that search.\r\n     * @param string A string to search within.\r\n     */\r\n    [Symbol.match](string: string): RegExpMatchArray | null;\r\n\r\n    /**\r\n     * Replaces text in a string, using this regular expression.\r\n     * @param string A String object or string literal whose contents matching against\r\n     *               this regular expression will be replaced\r\n     * @param replaceValue A String object or string literal containing the text to replace for every\r\n     *                     successful match of this regular expression.\r\n     */\r\n    [Symbol.replace](string: string, replaceValue: string): string;\r\n\r\n    /**\r\n     * Replaces text in a string, using this regular expression.\r\n     * @param string A String object or string literal whose contents matching against\r\n     *               this regular expression will be replaced\r\n     * @param replacer A function that returns the replacement text.\r\n     */\r\n    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;\r\n\r\n    /**\r\n     * Finds the position beginning first substring match in a regular expression search\r\n     * using this regular expression.\r\n     *\r\n     * @param string The string to search within.\r\n     */\r\n    [Symbol.search](string: string): number;\r\n\r\n    /**\r\n     * Returns an array of substrings that were delimited by strings in the original input that\r\n     * match against this regular expression.\r\n     *\r\n     * If the regular expression contains capturing parentheses, then each time this\r\n     * regular expression matches, the results (including any undefined results) of the\r\n     * capturing parentheses are spliced.\r\n     *\r\n     * @param string string value to split\r\n     * @param limit if not undefined, the output array is truncated so that it contains no more\r\n     * than \'limit\' elements.\r\n     */\r\n    [Symbol.split](string: string, limit?: number): string[];\r\n}\r\n\r\ninterface RegExpConstructor {\r\n    readonly [Symbol.species]: RegExpConstructor;\r\n}\r\n\r\ninterface String {\r\n    /**\r\n     * Matches a string or an object that supports being matched against, and returns an array\r\n     * containing the results of that search, or null if no matches are found.\r\n     * @param matcher An object that supports being matched against.\r\n     */\r\n    match(matcher: { [Symbol.match](string: string): RegExpMatchArray | null; }): RegExpMatchArray | null;\r\n\r\n    /**\r\n     * Replaces text in a string, using an object that supports replacement within a string.\r\n     * @param searchValue A object can search for and replace matches within a string.\r\n     * @param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\r\n     */\r\n    replace(searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string;\r\n\r\n    /**\r\n     * Replaces text in a string, using an object that supports replacement within a string.\r\n     * @param searchValue A object can search for and replace matches within a string.\r\n     * @param replacer A function that returns the replacement text.\r\n     */\r\n    replace(searchValue: { [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string; }, replacer: (substring: string, ...args: any[]) => string): string;\r\n\r\n    /**\r\n     * Finds the first substring match in a regular expression search.\r\n     * @param searcher An object which supports searching within a string.\r\n     */\r\n    search(searcher: { [Symbol.search](string: string): number; }): number;\r\n\r\n    /**\r\n     * Split a string into substrings using the specified separator and return them as an array.\r\n     * @param splitter An object that can split a string.\r\n     * @param limit A value used to limit the number of elements returned in the array.\r\n     */\r\n    split(splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[];\r\n}\r\n\r\ninterface ArrayBuffer {\r\n    readonly [Symbol.toStringTag]: string;\r\n}\r\n\r\ninterface DataView {\r\n    readonly [Symbol.toStringTag]: string;\r\n}\r\n\r\ninterface Int8Array {\r\n    readonly [Symbol.toStringTag]: "Int8Array";\r\n}\r\n\r\ninterface Uint8Array {\r\n    readonly [Symbol.toStringTag]: "Uint8Array";\r\n}\r\n\r\ninterface Uint8ClampedArray {\r\n    readonly [Symbol.toStringTag]: "Uint8ClampedArray";\r\n}\r\n\r\ninterface Int16Array {\r\n    readonly [Symbol.toStringTag]: "Int16Array";\r\n}\r\n\r\ninterface Uint16Array {\r\n    readonly [Symbol.toStringTag]: "Uint16Array";\r\n}\r\n\r\ninterface Int32Array {\r\n    readonly [Symbol.toStringTag]: "Int32Array";\r\n}\r\n\r\ninterface Uint32Array {\r\n    readonly [Symbol.toStringTag]: "Uint32Array";\r\n}\r\n\r\ninterface Float32Array {\r\n    readonly [Symbol.toStringTag]: "Float32Array";\r\n}\r\n\r\ninterface Float64Array {\r\n    readonly [Symbol.toStringTag]: "Float64Array";\r\n}\r\n\r\ninterface ArrayConstructor {\r\n    readonly [Symbol.species]: ArrayConstructor;\r\n}\r\ninterface MapConstructor {\r\n    readonly [Symbol.species]: MapConstructor;\r\n}\r\ninterface SetConstructor {\r\n    readonly [Symbol.species]: SetConstructor;\r\n}\r\ninterface ArrayBufferConstructor {\r\n    readonly [Symbol.species]: ArrayBufferConstructor;\r\n}\r\n'},"./node_modules/raw-loader/dist/cjs.js!./runtime-repl/_common/_api/typings/javascript/lib.es5.d.ts":function(e,n,t){"use strict";t.r(n),n.default="/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\r\n\n\n/////////////////////////////\r\n/// ECMAScript APIs\r\n/////////////////////////////\r\n\r\ndeclare var NaN: number;\r\ndeclare var Infinity: number;\r\n\r\n/**\r\n * Evaluates JavaScript code and executes it.\r\n * @param x A String value that contains valid JavaScript code.\r\n */\r\ndeclare function eval(x: string): any;\r\n\r\n/**\r\n * Converts a string to an integer.\r\n * @param s A string to convert into a number.\r\n * @param radix A value between 2 and 36 that specifies the base of the number in numString.\r\n * If this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal.\r\n * All other strings are considered decimal.\r\n */\r\ndeclare function parseInt(s: string, radix?: number): number;\r\n\r\n/**\r\n * Converts a string to a floating-point number.\r\n * @param string A string that contains a floating-point number.\r\n */\r\ndeclare function parseFloat(string: string): number;\r\n\r\n/**\r\n * Returns a Boolean value that indicates whether a value is the reserved value NaN (not a number).\r\n * @param number A numeric value.\r\n */\r\ndeclare function isNaN(number: number): boolean;\r\n\r\n/**\r\n * Determines whether a supplied number is finite.\r\n * @param number Any numeric value.\r\n */\r\ndeclare function isFinite(number: number): boolean;\r\n\r\n/**\r\n * Gets the unencoded version of an encoded Uniform Resource Identifier (URI).\r\n * @param encodedURI A value representing an encoded URI.\r\n */\r\ndeclare function decodeURI(encodedURI: string): string;\r\n\r\n/**\r\n * Gets the unencoded version of an encoded component of a Uniform Resource Identifier (URI).\r\n * @param encodedURIComponent A value representing an encoded URI component.\r\n */\r\ndeclare function decodeURIComponent(encodedURIComponent: string): string;\r\n\r\n/**\r\n * Encodes a text string as a valid Uniform Resource Identifier (URI)\r\n * @param uri A value representing an encoded URI.\r\n */\r\ndeclare function encodeURI(uri: string): string;\r\n\r\n/**\r\n * Encodes a text string as a valid component of a Uniform Resource Identifier (URI).\r\n * @param uriComponent A value representing an encoded URI component.\r\n */\r\ndeclare function encodeURIComponent(uriComponent: string | number | boolean): string;\r\n\r\n/**\r\n * Computes a new string in which certain characters have been replaced by a hexadecimal escape sequence.\r\n * @param string A string value\r\n */\r\ndeclare function escape(string: string): string;\r\n\r\n/**\r\n * Computes a new string in which hexadecimal escape sequences are replaced with the character that it represents.\r\n * @param string A string value\r\n */\r\ndeclare function unescape(string: string): string;\r\n\r\ninterface Symbol {\r\n    /** Returns a string representation of an object. */\r\n    toString(): string;\r\n\r\n    /** Returns the primitive value of the specified object. */\r\n    valueOf(): symbol;\r\n}\r\n\r\ndeclare type PropertyKey = string | number | symbol;\r\n\r\ninterface PropertyDescriptor {\r\n    configurable?: boolean;\r\n    enumerable?: boolean;\r\n    value?: any;\r\n    writable?: boolean;\r\n    get?(): any;\r\n    set?(v: any): void;\r\n}\r\n\r\ninterface PropertyDescriptorMap {\r\n    [s: string]: PropertyDescriptor;\r\n}\r\n\r\ninterface Object {\r\n    /** The initial value of Object.prototype.constructor is the standard built-in Object constructor. */\r\n    constructor: Function;\r\n\r\n    /** Returns a string representation of an object. */\r\n    toString(): string;\r\n\r\n    /** Returns a date converted to a string using the current locale. */\r\n    toLocaleString(): string;\r\n\r\n    /** Returns the primitive value of the specified object. */\r\n    valueOf(): Object;\r\n\r\n    /**\r\n     * Determines whether an object has a property with the specified name.\r\n     * @param v A property name.\r\n     */\r\n    hasOwnProperty(v: PropertyKey): boolean;\r\n\r\n    /**\r\n     * Determines whether an object exists in another object's prototype chain.\r\n     * @param v Another object whose prototype chain is to be checked.\r\n     */\r\n    isPrototypeOf(v: Object): boolean;\r\n\r\n    /**\r\n     * Determines whether a specified property is enumerable.\r\n     * @param v A property name.\r\n     */\r\n    propertyIsEnumerable(v: PropertyKey): boolean;\r\n}\r\n\r\ninterface ObjectConstructor {\r\n    new(value?: any): Object;\r\n    (): any;\r\n    (value: any): any;\r\n\r\n    /** A reference to the prototype for a class of objects. */\r\n    readonly prototype: Object;\r\n\r\n    /**\r\n     * Returns the prototype of an object.\r\n     * @param o The object that references the prototype.\r\n     */\r\n    getPrototypeOf(o: any): any;\r\n\r\n    /**\r\n     * Gets the own property descriptor of the specified object.\r\n     * An own property descriptor is one that is defined directly on the object and is not inherited from the object's prototype.\r\n     * @param o Object that contains the property.\r\n     * @param p Name of the property.\r\n     */\r\n    getOwnPropertyDescriptor(o: any, p: PropertyKey): PropertyDescriptor | undefined;\r\n\r\n    /**\r\n     * Returns the names of the own properties of an object. The own properties of an object are those that are defined directly\r\n     * on that object, and are not inherited from the object's prototype. The properties of an object include both fields (objects) and functions.\r\n     * @param o Object that contains the own properties.\r\n     */\r\n    getOwnPropertyNames(o: any): string[];\r\n\r\n    /**\r\n     * Creates an object that has the specified prototype or that has null prototype.\r\n     * @param o Object to use as a prototype. May be null.\r\n     */\r\n    create(o: object | null): any;\r\n\r\n    /**\r\n     * Creates an object that has the specified prototype, and that optionally contains specified properties.\r\n     * @param o Object to use as a prototype. May be null\r\n     * @param properties JavaScript object that contains one or more property descriptors.\r\n     */\r\n    create(o: object | null, properties: PropertyDescriptorMap & ThisType<any>): any;\r\n\r\n    /**\r\n     * Adds a property to an object, or modifies attributes of an existing property.\r\n     * @param o Object on which to add or modify the property. This can be a native JavaScript object (that is, a user-defined object or a built in object) or a DOM object.\r\n     * @param p The property name.\r\n     * @param attributes Descriptor for the property. It can be for a data property or an accessor property.\r\n     */\r\n    defineProperty(o: any, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>): any;\r\n\r\n    /**\r\n     * Adds one or more properties to an object, and/or modifies attributes of existing properties.\r\n     * @param o Object on which to add or modify the properties. This can be a native JavaScript object or a DOM object.\r\n     * @param properties JavaScript object that contains one or more descriptor objects. Each descriptor object describes a data property or an accessor property.\r\n     */\r\n    defineProperties(o: any, properties: PropertyDescriptorMap & ThisType<any>): any;\r\n\r\n    /**\r\n     * Prevents the modification of attributes of existing properties, and prevents the addition of new properties.\r\n     * @param o Object on which to lock the attributes.\r\n     */\r\n    seal<T>(o: T): T;\r\n\r\n    /**\r\n     * Prevents the modification of existing property attributes and values, and prevents the addition of new properties.\r\n     * @param o Object on which to lock the attributes.\r\n     */\r\n    freeze<T>(a: T[]): readonly T[];\r\n\r\n    /**\r\n     * Prevents the modification of existing property attributes and values, and prevents the addition of new properties.\r\n     * @param o Object on which to lock the attributes.\r\n     */\r\n    freeze<T extends Function>(f: T): T;\r\n\r\n    /**\r\n     * Prevents the modification of existing property attributes and values, and prevents the addition of new properties.\r\n     * @param o Object on which to lock the attributes.\r\n     */\r\n    freeze<T>(o: T): Readonly<T>;\r\n\r\n    /**\r\n     * Prevents the addition of new properties to an object.\r\n     * @param o Object to make non-extensible.\r\n     */\r\n    preventExtensions<T>(o: T): T;\r\n\r\n    /**\r\n     * Returns true if existing property attributes cannot be modified in an object and new properties cannot be added to the object.\r\n     * @param o Object to test.\r\n     */\r\n    isSealed(o: any): boolean;\r\n\r\n    /**\r\n     * Returns true if existing property attributes and values cannot be modified in an object, and new properties cannot be added to the object.\r\n     * @param o Object to test.\r\n     */\r\n    isFrozen(o: any): boolean;\r\n\r\n    /**\r\n     * Returns a value that indicates whether new properties can be added to an object.\r\n     * @param o Object to test.\r\n     */\r\n    isExtensible(o: any): boolean;\r\n\r\n    /**\r\n     * Returns the names of the enumerable string properties and methods of an object.\r\n     * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\r\n     */\r\n    keys(o: object): string[];\r\n}\r\n\r\n/**\r\n * Provides functionality common to all JavaScript objects.\r\n */\r\ndeclare var Object: ObjectConstructor;\r\n\r\n/**\r\n * Creates a new function.\r\n */\r\ninterface Function {\r\n    /**\r\n     * Calls the function, substituting the specified object for the this value of the function, and the specified array for the arguments of the function.\r\n     * @param thisArg The object to be used as the this object.\r\n     * @param argArray A set of arguments to be passed to the function.\r\n     */\r\n    apply(this: Function, thisArg: any, argArray?: any): any;\r\n\r\n    /**\r\n     * Calls a method of an object, substituting another object for the current object.\r\n     * @param thisArg The object to be used as the current object.\r\n     * @param argArray A list of arguments to be passed to the method.\r\n     */\r\n    call(this: Function, thisArg: any, ...argArray: any[]): any;\r\n\r\n    /**\r\n     * For a given function, creates a bound function that has the same body as the original function.\r\n     * The this object of the bound function is associated with the specified object, and has the specified initial parameters.\r\n     * @param thisArg An object to which the this keyword can refer inside the new function.\r\n     * @param argArray A list of arguments to be passed to the new function.\r\n     */\r\n    bind(this: Function, thisArg: any, ...argArray: any[]): any;\r\n\r\n    /** Returns a string representation of a function. */\r\n    toString(): string;\r\n\r\n    prototype: any;\r\n    readonly length: number;\r\n\r\n    // Non-standard extensions\r\n    arguments: any;\r\n    caller: Function;\r\n}\r\n\r\ninterface FunctionConstructor {\r\n    /**\r\n     * Creates a new function.\r\n     * @param args A list of arguments the function accepts.\r\n     */\r\n    new(...args: string[]): Function;\r\n    (...args: string[]): Function;\r\n    readonly prototype: Function;\r\n}\r\n\r\ndeclare var Function: FunctionConstructor;\r\n\r\n/**\r\n * Extracts the type of the 'this' parameter of a function type, or 'unknown' if the function type has no 'this' parameter.\r\n */\r\ntype ThisParameterType<T> = T extends (this: infer U, ...args: any[]) => any ? U : unknown;\r\n\r\n/**\r\n * Removes the 'this' parameter from a function type.\r\n */\r\ntype OmitThisParameter<T> = unknown extends ThisParameterType<T> ? T : T extends (...args: infer A) => infer R ? (...args: A) => R : T;\r\n\r\ninterface CallableFunction extends Function {\r\n    /**\r\n     * Calls the function with the specified object as the this value and the elements of specified array as the arguments.\r\n     * @param thisArg The object to be used as the this object.\r\n     * @param args An array of argument values to be passed to the function.\r\n     */\r\n    apply<T, R>(this: (this: T) => R, thisArg: T): R;\r\n    apply<T, A extends any[], R>(this: (this: T, ...args: A) => R, thisArg: T, args: A): R;\r\n\r\n    /**\r\n     * Calls the function with the specified object as the this value and the specified rest arguments as the arguments.\r\n     * @param thisArg The object to be used as the this object.\r\n     * @param args Argument values to be passed to the function.\r\n     */\r\n    call<T, A extends any[], R>(this: (this: T, ...args: A) => R, thisArg: T, ...args: A): R;\r\n\r\n    /**\r\n     * For a given function, creates a bound function that has the same body as the original function.\r\n     * The this object of the bound function is associated with the specified object, and has the specified initial parameters.\r\n     * @param thisArg The object to be used as the this object.\r\n     * @param args Arguments to bind to the parameters of the function.\r\n     */\r\n    bind<T>(this: T, thisArg: ThisParameterType<T>): OmitThisParameter<T>;\r\n    bind<T, A0, A extends any[], R>(this: (this: T, arg0: A0, ...args: A) => R, thisArg: T, arg0: A0): (...args: A) => R;\r\n    bind<T, A0, A1, A extends any[], R>(this: (this: T, arg0: A0, arg1: A1, ...args: A) => R, thisArg: T, arg0: A0, arg1: A1): (...args: A) => R;\r\n    bind<T, A0, A1, A2, A extends any[], R>(this: (this: T, arg0: A0, arg1: A1, arg2: A2, ...args: A) => R, thisArg: T, arg0: A0, arg1: A1, arg2: A2): (...args: A) => R;\r\n    bind<T, A0, A1, A2, A3, A extends any[], R>(this: (this: T, arg0: A0, arg1: A1, arg2: A2, arg3: A3, ...args: A) => R, thisArg: T, arg0: A0, arg1: A1, arg2: A2, arg3: A3): (...args: A) => R;\r\n    bind<T, AX, R>(this: (this: T, ...args: AX[]) => R, thisArg: T, ...args: AX[]): (...args: AX[]) => R;\r\n}\r\n\r\ninterface NewableFunction extends Function {\r\n    /**\r\n     * Calls the function with the specified object as the this value and the elements of specified array as the arguments.\r\n     * @param thisArg The object to be used as the this object.\r\n     * @param args An array of argument values to be passed to the function.\r\n     */\r\n    apply<T>(this: new () => T, thisArg: T): void;\r\n    apply<T, A extends any[]>(this: new (...args: A) => T, thisArg: T, args: A): void;\r\n\r\n    /**\r\n     * Calls the function with the specified object as the this value and the specified rest arguments as the arguments.\r\n     * @param thisArg The object to be used as the this object.\r\n     * @param args Argument values to be passed to the function.\r\n     */\r\n    call<T, A extends any[]>(this: new (...args: A) => T, thisArg: T, ...args: A): void;\r\n\r\n    /**\r\n     * For a given function, creates a bound function that has the same body as the original function.\r\n     * The this object of the bound function is associated with the specified object, and has the specified initial parameters.\r\n     * @param thisArg The object to be used as the this object.\r\n     * @param args Arguments to bind to the parameters of the function.\r\n     */\r\n    bind<T>(this: T, thisArg: any): T;\r\n    bind<A0, A extends any[], R>(this: new (arg0: A0, ...args: A) => R, thisArg: any, arg0: A0): new (...args: A) => R;\r\n    bind<A0, A1, A extends any[], R>(this: new (arg0: A0, arg1: A1, ...args: A) => R, thisArg: any, arg0: A0, arg1: A1): new (...args: A) => R;\r\n    bind<A0, A1, A2, A extends any[], R>(this: new (arg0: A0, arg1: A1, arg2: A2, ...args: A) => R, thisArg: any, arg0: A0, arg1: A1, arg2: A2): new (...args: A) => R;\r\n    bind<A0, A1, A2, A3, A extends any[], R>(this: new (arg0: A0, arg1: A1, arg2: A2, arg3: A3, ...args: A) => R, thisArg: any, arg0: A0, arg1: A1, arg2: A2, arg3: A3): new (...args: A) => R;\r\n    bind<AX, R>(this: new (...args: AX[]) => R, thisArg: any, ...args: AX[]): new (...args: AX[]) => R;\r\n}\r\n\r\ninterface IArguments {\r\n    [index: number]: any;\r\n    length: number;\r\n    callee: Function;\r\n}\r\n\r\ninterface String {\r\n    /** Returns a string representation of a string. */\r\n    toString(): string;\r\n\r\n    /**\r\n     * Returns the character at the specified index.\r\n     * @param pos The zero-based index of the desired character.\r\n     */\r\n    charAt(pos: number): string;\r\n\r\n    /**\r\n     * Returns the Unicode value of the character at the specified location.\r\n     * @param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.\r\n     */\r\n    charCodeAt(index: number): number;\r\n\r\n    /**\r\n     * Returns a string that contains the concatenation of two or more strings.\r\n     * @param strings The strings to append to the end of the string.\r\n     */\r\n    concat(...strings: string[]): string;\r\n\r\n    /**\r\n     * Returns the position of the first occurrence of a substring.\r\n     * @param searchString The substring to search for in the string\r\n     * @param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.\r\n     */\r\n    indexOf(searchString: string, position?: number): number;\r\n\r\n    /**\r\n     * Returns the last occurrence of a substring in the string.\r\n     * @param searchString The substring to search for.\r\n     * @param position The index at which to begin searching. If omitted, the search begins at the end of the string.\r\n     */\r\n    lastIndexOf(searchString: string, position?: number): number;\r\n\r\n    /**\r\n     * Determines whether two strings are equivalent in the current locale.\r\n     * @param that String to compare to target string\r\n     */\r\n    localeCompare(that: string): number;\r\n\r\n    /**\r\n     * Matches a string with a regular expression, and returns an array containing the results of that search.\r\n     * @param regexp A variable name or string literal containing the regular expression pattern and flags.\r\n     */\r\n    match(regexp: string | RegExp): RegExpMatchArray | null;\r\n\r\n    /**\r\n     * Replaces text in a string, using a regular expression or search string.\r\n     * @param searchValue A string to search for.\r\n     * @param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\r\n     */\r\n    replace(searchValue: string | RegExp, replaceValue: string): string;\r\n\r\n    /**\r\n     * Replaces text in a string, using a regular expression or search string.\r\n     * @param searchValue A string to search for.\r\n     * @param replacer A function that returns the replacement text.\r\n     */\r\n    replace(searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;\r\n\r\n    /**\r\n     * Finds the first substring match in a regular expression search.\r\n     * @param regexp The regular expression pattern and applicable flags.\r\n     */\r\n    search(regexp: string | RegExp): number;\r\n\r\n    /**\r\n     * Returns a section of a string.\r\n     * @param start The index to the beginning of the specified portion of stringObj.\r\n     * @param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\r\n     * If this value is not specified, the substring continues to the end of stringObj.\r\n     */\r\n    slice(start?: number, end?: number): string;\r\n\r\n    /**\r\n     * Split a string into substrings using the specified separator and return them as an array.\r\n     * @param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\r\n     * @param limit A value used to limit the number of elements returned in the array.\r\n     */\r\n    split(separator: string | RegExp, limit?: number): string[];\r\n\r\n    /**\r\n     * Returns the substring at the specified location within a String object.\r\n     * @param start The zero-based index number indicating the beginning of the substring.\r\n     * @param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\r\n     * If end is omitted, the characters from start through the end of the original string are returned.\r\n     */\r\n    substring(start: number, end?: number): string;\r\n\r\n    /** Converts all the alphabetic characters in a string to lowercase. */\r\n    toLowerCase(): string;\r\n\r\n    /** Converts all alphabetic characters to lowercase, taking into account the host environment's current locale. */\r\n    toLocaleLowerCase(locales?: string | string[]): string;\r\n\r\n    /** Converts all the alphabetic characters in a string to uppercase. */\r\n    toUpperCase(): string;\r\n\r\n    /** Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale. */\r\n    toLocaleUpperCase(locales?: string | string[]): string;\r\n\r\n    /** Removes the leading and trailing white space and line terminator characters from a string. */\r\n    trim(): string;\r\n\r\n    /** Returns the length of a String object. */\r\n    readonly length: number;\r\n\r\n    // IE extensions\r\n    /**\r\n     * Gets a substring beginning at the specified location and having the specified length.\r\n     * @param from The starting position of the desired substring. The index of the first character in the string is zero.\r\n     * @param length The number of characters to include in the returned substring.\r\n     */\r\n    substr(from: number, length?: number): string;\r\n\r\n    /** Returns the primitive value of the specified object. */\r\n    valueOf(): string;\r\n\r\n    readonly [index: number]: string;\r\n}\r\n\r\ninterface StringConstructor {\r\n    new(value?: any): String;\r\n    (value?: any): string;\r\n    readonly prototype: String;\r\n    fromCharCode(...codes: number[]): string;\r\n}\r\n\r\n/**\r\n * Allows manipulation and formatting of text strings and determination and location of substrings within strings.\r\n */\r\ndeclare var String: StringConstructor;\r\n\r\ninterface Boolean {\r\n    /** Returns the primitive value of the specified object. */\r\n    valueOf(): boolean;\r\n}\r\n\r\ninterface BooleanConstructor {\r\n    new(value?: any): Boolean;\r\n    <T>(value?: T): boolean;\r\n    readonly prototype: Boolean;\r\n}\r\n\r\ndeclare var Boolean: BooleanConstructor;\r\n\r\ninterface Number {\r\n    /**\r\n     * Returns a string representation of an object.\r\n     * @param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers.\r\n     */\r\n    toString(radix?: number): string;\r\n\r\n    /**\r\n     * Returns a string representing a number in fixed-point notation.\r\n     * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.\r\n     */\r\n    toFixed(fractionDigits?: number): string;\r\n\r\n    /**\r\n     * Returns a string containing a number represented in exponential notation.\r\n     * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.\r\n     */\r\n    toExponential(fractionDigits?: number): string;\r\n\r\n    /**\r\n     * Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.\r\n     * @param precision Number of significant digits. Must be in the range 1 - 21, inclusive.\r\n     */\r\n    toPrecision(precision?: number): string;\r\n\r\n    /** Returns the primitive value of the specified object. */\r\n    valueOf(): number;\r\n}\r\n\r\ninterface NumberConstructor {\r\n    new(value?: any): Number;\r\n    (value?: any): number;\r\n    readonly prototype: Number;\r\n\r\n    /** The largest number that can be represented in JavaScript. Equal to approximately 1.79E+308. */\r\n    readonly MAX_VALUE: number;\r\n\r\n    /** The closest number to zero that can be represented in JavaScript. Equal to approximately 5.00E-324. */\r\n    readonly MIN_VALUE: number;\r\n\r\n    /**\r\n     * A value that is not a number.\r\n     * In equality comparisons, NaN does not equal any value, including itself. To test whether a value is equivalent to NaN, use the isNaN function.\r\n     */\r\n    readonly NaN: number;\r\n\r\n    /**\r\n     * A value that is less than the largest negative number that can be represented in JavaScript.\r\n     * JavaScript displays NEGATIVE_INFINITY values as -infinity.\r\n     */\r\n    readonly NEGATIVE_INFINITY: number;\r\n\r\n    /**\r\n     * A value greater than the largest number that can be represented in JavaScript.\r\n     * JavaScript displays POSITIVE_INFINITY values as infinity.\r\n     */\r\n    readonly POSITIVE_INFINITY: number;\r\n}\r\n\r\n/** An object that represents a number of any kind. All JavaScript numbers are 64-bit floating-point numbers. */\r\ndeclare var Number: NumberConstructor;\r\n\r\ninterface TemplateStringsArray extends ReadonlyArray<string> {\r\n    readonly raw: readonly string[];\r\n}\r\n\r\n/**\r\n * The type of `import.meta`.\r\n *\r\n * If you need to declare that a given property exists on `import.meta`,\r\n * this type may be augmented via interface merging.\r\n */\r\ninterface ImportMeta {\r\n}\r\n\r\ninterface Math {\r\n    /** The mathematical constant e. This is Euler's number, the base of natural logarithms. */\r\n    readonly E: number;\r\n    /** The natural logarithm of 10. */\r\n    readonly LN10: number;\r\n    /** The natural logarithm of 2. */\r\n    readonly LN2: number;\r\n    /** The base-2 logarithm of e. */\r\n    readonly LOG2E: number;\r\n    /** The base-10 logarithm of e. */\r\n    readonly LOG10E: number;\r\n    /** Pi. This is the ratio of the circumference of a circle to its diameter. */\r\n    readonly PI: number;\r\n    /** The square root of 0.5, or, equivalently, one divided by the square root of 2. */\r\n    readonly SQRT1_2: number;\r\n    /** The square root of 2. */\r\n    readonly SQRT2: number;\r\n    /**\r\n     * Returns the absolute value of a number (the value without regard to whether it is positive or negative).\r\n     * For example, the absolute value of -5 is the same as the absolute value of 5.\r\n     * @param x A numeric expression for which the absolute value is needed.\r\n     */\r\n    abs(x: number): number;\r\n    /**\r\n     * Returns the arc cosine (or inverse cosine) of a number.\r\n     * @param x A numeric expression.\r\n     */\r\n    acos(x: number): number;\r\n    /**\r\n     * Returns the arcsine of a number.\r\n     * @param x A numeric expression.\r\n     */\r\n    asin(x: number): number;\r\n    /**\r\n     * Returns the arctangent of a number.\r\n     * @param x A numeric expression for which the arctangent is needed.\r\n     */\r\n    atan(x: number): number;\r\n    /**\r\n     * Returns the angle (in radians) from the X axis to a point.\r\n     * @param y A numeric expression representing the cartesian y-coordinate.\r\n     * @param x A numeric expression representing the cartesian x-coordinate.\r\n     */\r\n    atan2(y: number, x: number): number;\r\n    /**\r\n     * Returns the smallest integer greater than or equal to its numeric argument.\r\n     * @param x A numeric expression.\r\n     */\r\n    ceil(x: number): number;\r\n    /**\r\n     * Returns the cosine of a number.\r\n     * @param x A numeric expression that contains an angle measured in radians.\r\n     */\r\n    cos(x: number): number;\r\n    /**\r\n     * Returns e (the base of natural logarithms) raised to a power.\r\n     * @param x A numeric expression representing the power of e.\r\n     */\r\n    exp(x: number): number;\r\n    /**\r\n     * Returns the greatest integer less than or equal to its numeric argument.\r\n     * @param x A numeric expression.\r\n     */\r\n    floor(x: number): number;\r\n    /**\r\n     * Returns the natural logarithm (base e) of a number.\r\n     * @param x A numeric expression.\r\n     */\r\n    log(x: number): number;\r\n    /**\r\n     * Returns the larger of a set of supplied numeric expressions.\r\n     * @param values Numeric expressions to be evaluated.\r\n     */\r\n    max(...values: number[]): number;\r\n    /**\r\n     * Returns the smaller of a set of supplied numeric expressions.\r\n     * @param values Numeric expressions to be evaluated.\r\n     */\r\n    min(...values: number[]): number;\r\n    /**\r\n     * Returns the value of a base expression taken to a specified power.\r\n     * @param x The base value of the expression.\r\n     * @param y The exponent value of the expression.\r\n     */\r\n    pow(x: number, y: number): number;\r\n    /** Returns a pseudorandom number between 0 and 1. */\r\n    random(): number;\r\n    /**\r\n     * Returns a supplied numeric expression rounded to the nearest integer.\r\n     * @param x The value to be rounded to the nearest integer.\r\n     */\r\n    round(x: number): number;\r\n    /**\r\n     * Returns the sine of a number.\r\n     * @param x A numeric expression that contains an angle measured in radians.\r\n     */\r\n    sin(x: number): number;\r\n    /**\r\n     * Returns the square root of a number.\r\n     * @param x A numeric expression.\r\n     */\r\n    sqrt(x: number): number;\r\n    /**\r\n     * Returns the tangent of a number.\r\n     * @param x A numeric expression that contains an angle measured in radians.\r\n     */\r\n    tan(x: number): number;\r\n}\r\n/** An intrinsic object that provides basic mathematics functionality and constants. */\r\ndeclare var Math: Math;\r\n\r\n/** Enables basic storage and retrieval of dates and times. */\r\ninterface Date {\r\n    /** Returns a string representation of a date. The format of the string depends on the locale. */\r\n    toString(): string;\r\n    /** Returns a date as a string value. */\r\n    toDateString(): string;\r\n    /** Returns a time as a string value. */\r\n    toTimeString(): string;\r\n    /** Returns a value as a string value appropriate to the host environment's current locale. */\r\n    toLocaleString(): string;\r\n    /** Returns a date as a string value appropriate to the host environment's current locale. */\r\n    toLocaleDateString(): string;\r\n    /** Returns a time as a string value appropriate to the host environment's current locale. */\r\n    toLocaleTimeString(): string;\r\n    /** Returns the stored time value in milliseconds since midnight, January 1, 1970 UTC. */\r\n    valueOf(): number;\r\n    /** Gets the time value in milliseconds. */\r\n    getTime(): number;\r\n    /** Gets the year, using local time. */\r\n    getFullYear(): number;\r\n    /** Gets the year using Universal Coordinated Time (UTC). */\r\n    getUTCFullYear(): number;\r\n    /** Gets the month, using local time. */\r\n    getMonth(): number;\r\n    /** Gets the month of a Date object using Universal Coordinated Time (UTC). */\r\n    getUTCMonth(): number;\r\n    /** Gets the day-of-the-month, using local time. */\r\n    getDate(): number;\r\n    /** Gets the day-of-the-month, using Universal Coordinated Time (UTC). */\r\n    getUTCDate(): number;\r\n    /** Gets the day of the week, using local time. */\r\n    getDay(): number;\r\n    /** Gets the day of the week using Universal Coordinated Time (UTC). */\r\n    getUTCDay(): number;\r\n    /** Gets the hours in a date, using local time. */\r\n    getHours(): number;\r\n    /** Gets the hours value in a Date object using Universal Coordinated Time (UTC). */\r\n    getUTCHours(): number;\r\n    /** Gets the minutes of a Date object, using local time. */\r\n    getMinutes(): number;\r\n    /** Gets the minutes of a Date object using Universal Coordinated Time (UTC). */\r\n    getUTCMinutes(): number;\r\n    /** Gets the seconds of a Date object, using local time. */\r\n    getSeconds(): number;\r\n    /** Gets the seconds of a Date object using Universal Coordinated Time (UTC). */\r\n    getUTCSeconds(): number;\r\n    /** Gets the milliseconds of a Date, using local time. */\r\n    getMilliseconds(): number;\r\n    /** Gets the milliseconds of a Date object using Universal Coordinated Time (UTC). */\r\n    getUTCMilliseconds(): number;\r\n    /** Gets the difference in minutes between the time on the local computer and Universal Coordinated Time (UTC). */\r\n    getTimezoneOffset(): number;\r\n    /**\r\n     * Sets the date and time value in the Date object.\r\n     * @param time A numeric value representing the number of elapsed milliseconds since midnight, January 1, 1970 GMT.\r\n     */\r\n    setTime(time: number): number;\r\n    /**\r\n     * Sets the milliseconds value in the Date object using local time.\r\n     * @param ms A numeric value equal to the millisecond value.\r\n     */\r\n    setMilliseconds(ms: number): number;\r\n    /**\r\n     * Sets the milliseconds value in the Date object using Universal Coordinated Time (UTC).\r\n     * @param ms A numeric value equal to the millisecond value.\r\n     */\r\n    setUTCMilliseconds(ms: number): number;\r\n\r\n    /**\r\n     * Sets the seconds value in the Date object using local time.\r\n     * @param sec A numeric value equal to the seconds value.\r\n     * @param ms A numeric value equal to the milliseconds value.\r\n     */\r\n    setSeconds(sec: number, ms?: number): number;\r\n    /**\r\n     * Sets the seconds value in the Date object using Universal Coordinated Time (UTC).\r\n     * @param sec A numeric value equal to the seconds value.\r\n     * @param ms A numeric value equal to the milliseconds value.\r\n     */\r\n    setUTCSeconds(sec: number, ms?: number): number;\r\n    /**\r\n     * Sets the minutes value in the Date object using local time.\r\n     * @param min A numeric value equal to the minutes value.\r\n     * @param sec A numeric value equal to the seconds value.\r\n     * @param ms A numeric value equal to the milliseconds value.\r\n     */\r\n    setMinutes(min: number, sec?: number, ms?: number): number;\r\n    /**\r\n     * Sets the minutes value in the Date object using Universal Coordinated Time (UTC).\r\n     * @param min A numeric value equal to the minutes value.\r\n     * @param sec A numeric value equal to the seconds value.\r\n     * @param ms A numeric value equal to the milliseconds value.\r\n     */\r\n    setUTCMinutes(min: number, sec?: number, ms?: number): number;\r\n    /**\r\n     * Sets the hour value in the Date object using local time.\r\n     * @param hours A numeric value equal to the hours value.\r\n     * @param min A numeric value equal to the minutes value.\r\n     * @param sec A numeric value equal to the seconds value.\r\n     * @param ms A numeric value equal to the milliseconds value.\r\n     */\r\n    setHours(hours: number, min?: number, sec?: number, ms?: number): number;\r\n    /**\r\n     * Sets the hours value in the Date object using Universal Coordinated Time (UTC).\r\n     * @param hours A numeric value equal to the hours value.\r\n     * @param min A numeric value equal to the minutes value.\r\n     * @param sec A numeric value equal to the seconds value.\r\n     * @param ms A numeric value equal to the milliseconds value.\r\n     */\r\n    setUTCHours(hours: number, min?: number, sec?: number, ms?: number): number;\r\n    /**\r\n     * Sets the numeric day-of-the-month value of the Date object using local time.\r\n     * @param date A numeric value equal to the day of the month.\r\n     */\r\n    setDate(date: number): number;\r\n    /**\r\n     * Sets the numeric day of the month in the Date object using Universal Coordinated Time (UTC).\r\n     * @param date A numeric value equal to the day of the month.\r\n     */\r\n    setUTCDate(date: number): number;\r\n    /**\r\n     * Sets the month value in the Date object using local time.\r\n     * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.\r\n     * @param date A numeric value representing the day of the month. If this value is not supplied, the value from a call to the getDate method is used.\r\n     */\r\n    setMonth(month: number, date?: number): number;\r\n    /**\r\n     * Sets the month value in the Date object using Universal Coordinated Time (UTC).\r\n     * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.\r\n     * @param date A numeric value representing the day of the month. If it is not supplied, the value from a call to the getUTCDate method is used.\r\n     */\r\n    setUTCMonth(month: number, date?: number): number;\r\n    /**\r\n     * Sets the year of the Date object using local time.\r\n     * @param year A numeric value for the year.\r\n     * @param month A zero-based numeric value for the month (0 for January, 11 for December). Must be specified if numDate is specified.\r\n     * @param date A numeric value equal for the day of the month.\r\n     */\r\n    setFullYear(year: number, month?: number, date?: number): number;\r\n    /**\r\n     * Sets the year value in the Date object using Universal Coordinated Time (UTC).\r\n     * @param year A numeric value equal to the year.\r\n     * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively. Must be supplied if numDate is supplied.\r\n     * @param date A numeric value equal to the day of the month.\r\n     */\r\n    setUTCFullYear(year: number, month?: number, date?: number): number;\r\n    /** Returns a date converted to a string using Universal Coordinated Time (UTC). */\r\n    toUTCString(): string;\r\n    /** Returns a date as a string value in ISO format. */\r\n    toISOString(): string;\r\n    /** Used by the JSON.stringify method to enable the transformation of an object's data for JavaScript Object Notation (JSON) serialization. */\r\n    toJSON(key?: any): string;\r\n}\r\n\r\ninterface DateConstructor {\r\n    new(): Date;\r\n    new(value: number | string): Date;\r\n    new(year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): Date;\r\n    (): string;\r\n    readonly prototype: Date;\r\n    /**\r\n     * Parses a string containing a date, and returns the number of milliseconds between that date and midnight, January 1, 1970.\r\n     * @param s A date string\r\n     */\r\n    parse(s: string): number;\r\n    /**\r\n     * Returns the number of milliseconds between midnight, January 1, 1970 Universal Coordinated Time (UTC) (or GMT) and the specified date.\r\n     * @param year The full year designation is required for cross-century date accuracy. If year is between 0 and 99 is used, then year is assumed to be 1900 + year.\r\n     * @param month The month as a number between 0 and 11 (January to December).\r\n     * @param date The date as a number between 1 and 31.\r\n     * @param hours Must be supplied if minutes is supplied. A number from 0 to 23 (midnight to 11pm) that specifies the hour.\r\n     * @param minutes Must be supplied if seconds is supplied. A number from 0 to 59 that specifies the minutes.\r\n     * @param seconds Must be supplied if milliseconds is supplied. A number from 0 to 59 that specifies the seconds.\r\n     * @param ms A number from 0 to 999 that specifies the milliseconds.\r\n     */\r\n    UTC(year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): number;\r\n    now(): number;\r\n}\r\n\r\ndeclare var Date: DateConstructor;\r\n\r\ninterface RegExpMatchArray extends Array<string> {\r\n    index?: number;\r\n    input?: string;\r\n}\r\n\r\ninterface RegExpExecArray extends Array<string> {\r\n    index: number;\r\n    input: string;\r\n}\r\n\r\ninterface RegExp {\r\n    /**\r\n     * Executes a search on a string using a regular expression pattern, and returns an array containing the results of that search.\r\n     * @param string The String object or string literal on which to perform the search.\r\n     */\r\n    exec(string: string): RegExpExecArray | null;\r\n\r\n    /**\r\n     * Returns a Boolean value that indicates whether or not a pattern exists in a searched string.\r\n     * @param string String on which to perform the search.\r\n     */\r\n    test(string: string): boolean;\r\n\r\n    /** Returns a copy of the text of the regular expression pattern. Read-only. The regExp argument is a Regular expression object. It can be a variable name or a literal. */\r\n    readonly source: string;\r\n\r\n    /** Returns a Boolean value indicating the state of the global flag (g) used with a regular expression. Default is false. Read-only. */\r\n    readonly global: boolean;\r\n\r\n    /** Returns a Boolean value indicating the state of the ignoreCase flag (i) used with a regular expression. Default is false. Read-only. */\r\n    readonly ignoreCase: boolean;\r\n\r\n    /** Returns a Boolean value indicating the state of the multiline flag (m) used with a regular expression. Default is false. Read-only. */\r\n    readonly multiline: boolean;\r\n\r\n    lastIndex: number;\r\n\r\n    // Non-standard extensions\r\n    compile(): this;\r\n}\r\n\r\ninterface RegExpConstructor {\r\n    new(pattern: RegExp | string): RegExp;\r\n    new(pattern: string, flags?: string): RegExp;\r\n    (pattern: RegExp | string): RegExp;\r\n    (pattern: string, flags?: string): RegExp;\r\n    readonly prototype: RegExp;\r\n\r\n    // Non-standard extensions\r\n    $1: string;\r\n    $2: string;\r\n    $3: string;\r\n    $4: string;\r\n    $5: string;\r\n    $6: string;\r\n    $7: string;\r\n    $8: string;\r\n    $9: string;\r\n    lastMatch: string;\r\n}\r\n\r\ndeclare var RegExp: RegExpConstructor;\r\n\r\ninterface Error {\r\n    name: string;\r\n    message: string;\r\n    stack?: string;\r\n}\r\n\r\ninterface ErrorConstructor {\r\n    new(message?: string): Error;\r\n    (message?: string): Error;\r\n    readonly prototype: Error;\r\n}\r\n\r\ndeclare var Error: ErrorConstructor;\r\n\r\ninterface EvalError extends Error {\r\n}\r\n\r\ninterface EvalErrorConstructor extends ErrorConstructor {\r\n    new(message?: string): EvalError;\r\n    (message?: string): EvalError;\r\n    readonly prototype: EvalError;\r\n}\r\n\r\ndeclare var EvalError: EvalErrorConstructor;\r\n\r\ninterface RangeError extends Error {\r\n}\r\n\r\ninterface RangeErrorConstructor extends ErrorConstructor {\r\n    new(message?: string): RangeError;\r\n    (message?: string): RangeError;\r\n    readonly prototype: RangeError;\r\n}\r\n\r\ndeclare var RangeError: RangeErrorConstructor;\r\n\r\ninterface ReferenceError extends Error {\r\n}\r\n\r\ninterface ReferenceErrorConstructor extends ErrorConstructor {\r\n    new(message?: string): ReferenceError;\r\n    (message?: string): ReferenceError;\r\n    readonly prototype: ReferenceError;\r\n}\r\n\r\ndeclare var ReferenceError: ReferenceErrorConstructor;\r\n\r\ninterface SyntaxError extends Error {\r\n}\r\n\r\ninterface SyntaxErrorConstructor extends ErrorConstructor {\r\n    new(message?: string): SyntaxError;\r\n    (message?: string): SyntaxError;\r\n    readonly prototype: SyntaxError;\r\n}\r\n\r\ndeclare var SyntaxError: SyntaxErrorConstructor;\r\n\r\ninterface TypeError extends Error {\r\n}\r\n\r\ninterface TypeErrorConstructor extends ErrorConstructor {\r\n    new(message?: string): TypeError;\r\n    (message?: string): TypeError;\r\n    readonly prototype: TypeError;\r\n}\r\n\r\ndeclare var TypeError: TypeErrorConstructor;\r\n\r\ninterface URIError extends Error {\r\n}\r\n\r\ninterface URIErrorConstructor extends ErrorConstructor {\r\n    new(message?: string): URIError;\r\n    (message?: string): URIError;\r\n    readonly prototype: URIError;\r\n}\r\n\r\ndeclare var URIError: URIErrorConstructor;\r\n\r\ninterface JSON {\r\n    /**\r\n     * Converts a JavaScript Object Notation (JSON) string into an object.\r\n     * @param text A valid JSON string.\r\n     * @param reviver A function that transforms the results. This function is called for each member of the object.\r\n     * If a member contains nested objects, the nested objects are transformed before the parent object is.\r\n     */\r\n    parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;\r\n    /**\r\n     * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\r\n     * @param value A JavaScript value, usually an object or array, to be converted.\r\n     * @param replacer A function that transforms the results.\r\n     * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.\r\n     */\r\n    stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;\r\n    /**\r\n     * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\r\n     * @param value A JavaScript value, usually an object or array, to be converted.\r\n     * @param replacer An array of strings and numbers that acts as a approved list for selecting the object properties that will be stringified.\r\n     * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.\r\n     */\r\n    stringify(value: any, replacer?: (number | string)[] | null, space?: string | number): string;\r\n}\r\n\r\n/**\r\n * An intrinsic object that provides functions to convert JavaScript values to and from the JavaScript Object Notation (JSON) format.\r\n */\r\ndeclare var JSON: JSON;\r\n\r\n\r\n/////////////////////////////\r\n/// ECMAScript Array API (specially handled by compiler)\r\n/////////////////////////////\r\n\r\ninterface ReadonlyArray<T> {\r\n    /**\r\n     * Gets the length of the array. This is a number one higher than the highest element defined in an array.\r\n     */\r\n    readonly length: number;\r\n    /**\r\n     * Returns a string representation of an array.\r\n     */\r\n    toString(): string;\r\n    /**\r\n     * Returns a string representation of an array. The elements are converted to string using their toLocalString methods.\r\n     */\r\n    toLocaleString(): string;\r\n    /**\r\n     * Combines two or more arrays.\r\n     * @param items Additional items to add to the end of array1.\r\n     */\r\n    concat(...items: ConcatArray<T>[]): T[];\r\n    /**\r\n     * Combines two or more arrays.\r\n     * @param items Additional items to add to the end of array1.\r\n     */\r\n    concat(...items: (T | ConcatArray<T>)[]): T[];\r\n    /**\r\n     * Adds all the elements of an array separated by the specified separator string.\r\n     * @param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.\r\n     */\r\n    join(separator?: string): string;\r\n    /**\r\n     * Returns a section of an array.\r\n     * @param start The beginning of the specified portion of the array.\r\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.\r\n     */\r\n    slice(start?: number, end?: number): T[];\r\n    /**\r\n     * Returns the index of the first occurrence of a value in an array.\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\r\n     */\r\n    indexOf(searchElement: T, fromIndex?: number): number;\r\n    /**\r\n     * Returns the index of the last occurrence of a specified value in an array.\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.\r\n     */\r\n    lastIndexOf(searchElement: T, fromIndex?: number): number;\r\n    /**\r\n     * Determines whether all the members of an array satisfy the specified test.\r\n     * @param callbackfn A function that accepts up to three arguments. The every method calls\r\n     * the callbackfn function for each element in the array until the callbackfn returns a value\r\n     * which is coercible to the Boolean value false, or until the end of the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    every(callbackfn: (value: T, index: number, array: readonly T[]) => unknown, thisArg?: any): boolean;\r\n    /**\r\n     * Determines whether the specified callback function returns true for any element of an array.\r\n     * @param callbackfn A function that accepts up to three arguments. The some method calls\r\n     * the callbackfn function for each element in the array until the callbackfn returns a value\r\n     * which is coercible to the Boolean value true, or until the end of the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    some(callbackfn: (value: T, index: number, array: readonly T[]) => unknown, thisArg?: any): boolean;\r\n    /**\r\n     * Performs the specified action for each element in an array.\r\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\r\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    forEach(callbackfn: (value: T, index: number, array: readonly T[]) => void, thisArg?: any): void;\r\n    /**\r\n     * Calls a defined callback function on each element of an array, and returns an array that contains the results.\r\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    map<U>(callbackfn: (value: T, index: number, array: readonly T[]) => U, thisArg?: any): U[];\r\n    /**\r\n     * Returns the elements of an array that meet the condition specified in a callback function.\r\n     * @param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    filter<S extends T>(callbackfn: (value: T, index: number, array: readonly T[]) => value is S, thisArg?: any): S[];\r\n    /**\r\n     * Returns the elements of an array that meet the condition specified in a callback function.\r\n     * @param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    filter(callbackfn: (value: T, index: number, array: readonly T[]) => unknown, thisArg?: any): T[];\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\r\n     */\r\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: readonly T[]) => T): T;\r\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: readonly T[]) => T, initialValue: T): T;\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\r\n     */\r\n    reduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: readonly T[]) => U, initialValue: U): U;\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\r\n     */\r\n    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: readonly T[]) => T): T;\r\n    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: readonly T[]) => T, initialValue: T): T;\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\r\n     */\r\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: readonly T[]) => U, initialValue: U): U;\r\n\r\n    readonly [n: number]: T;\r\n}\r\n\r\ninterface ConcatArray<T> {\r\n    readonly length: number;\r\n    readonly [n: number]: T;\r\n    join(separator?: string): string;\r\n    slice(start?: number, end?: number): T[];\r\n}\r\n\r\ninterface Array<T> {\r\n    /**\r\n     * Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.\r\n     */\r\n    length: number;\r\n    /**\r\n     * Returns a string representation of an array.\r\n     */\r\n    toString(): string;\r\n    /**\r\n     * Returns a string representation of an array. The elements are converted to string using their toLocalString methods.\r\n     */\r\n    toLocaleString(): string;\r\n    /**\r\n     * Removes the last element from an array and returns it.\r\n     */\r\n    pop(): T | undefined;\r\n    /**\r\n     * Appends new elements to an array, and returns the new length of the array.\r\n     * @param items New elements of the Array.\r\n     */\r\n    push(...items: T[]): number;\r\n    /**\r\n     * Combines two or more arrays.\r\n     * @param items Additional items to add to the end of array1.\r\n     */\r\n    concat(...items: ConcatArray<T>[]): T[];\r\n    /**\r\n     * Combines two or more arrays.\r\n     * @param items Additional items to add to the end of array1.\r\n     */\r\n    concat(...items: (T | ConcatArray<T>)[]): T[];\r\n    /**\r\n     * Adds all the elements of an array separated by the specified separator string.\r\n     * @param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.\r\n     */\r\n    join(separator?: string): string;\r\n    /**\r\n     * Reverses the elements in an Array.\r\n     */\r\n    reverse(): T[];\r\n    /**\r\n     * Removes the first element from an array and returns it.\r\n     */\r\n    shift(): T | undefined;\r\n    /**\r\n     * Returns a section of an array.\r\n     * @param start The beginning of the specified portion of the array.\r\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.\r\n     */\r\n    slice(start?: number, end?: number): T[];\r\n    /**\r\n     * Sorts an array.\r\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\r\n     * a negative value if first argument is less than second argument, zero if they're equal and a positive\r\n     * value otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\r\n     * ```ts\r\n     * [11,2,22,1].sort((a, b) => a - b)\r\n     * ```\r\n     */\r\n    sort(compareFn?: (a: T, b: T) => number): this;\r\n    /**\r\n     * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\r\n     * @param start The zero-based location in the array from which to start removing elements.\r\n     * @param deleteCount The number of elements to remove.\r\n     */\r\n    splice(start: number, deleteCount?: number): T[];\r\n    /**\r\n     * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\r\n     * @param start The zero-based location in the array from which to start removing elements.\r\n     * @param deleteCount The number of elements to remove.\r\n     * @param items Elements to insert into the array in place of the deleted elements.\r\n     */\r\n    splice(start: number, deleteCount: number, ...items: T[]): T[];\r\n    /**\r\n     * Inserts new elements at the start of an array.\r\n     * @param items  Elements to insert at the start of the Array.\r\n     */\r\n    unshift(...items: T[]): number;\r\n    /**\r\n     * Returns the index of the first occurrence of a value in an array.\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\r\n     */\r\n    indexOf(searchElement: T, fromIndex?: number): number;\r\n    /**\r\n     * Returns the index of the last occurrence of a specified value in an array.\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.\r\n     */\r\n    lastIndexOf(searchElement: T, fromIndex?: number): number;\r\n    /**\r\n     * Determines whether all the members of an array satisfy the specified test.\r\n     * @param callbackfn A function that accepts up to three arguments. The every method calls\r\n     * the callbackfn function for each element in the array until the callbackfn returns a value\r\n     * which is coercible to the Boolean value false, or until the end of the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    every(callbackfn: (value: T, index: number, array: T[]) => unknown, thisArg?: any): boolean;\r\n    /**\r\n     * Determines whether the specified callback function returns true for any element of an array.\r\n     * @param callbackfn A function that accepts up to three arguments. The some method calls\r\n     * the callbackfn function for each element in the array until the callbackfn returns a value\r\n     * which is coercible to the Boolean value true, or until the end of the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    some(callbackfn: (value: T, index: number, array: T[]) => unknown, thisArg?: any): boolean;\r\n    /**\r\n     * Performs the specified action for each element in an array.\r\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\r\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    forEach(callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any): void;\r\n    /**\r\n     * Calls a defined callback function on each element of an array, and returns an array that contains the results.\r\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    map<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[];\r\n    /**\r\n     * Returns the elements of an array that meet the condition specified in a callback function.\r\n     * @param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    filter<S extends T>(callbackfn: (value: T, index: number, array: T[]) => value is S, thisArg?: any): S[];\r\n    /**\r\n     * Returns the elements of an array that meet the condition specified in a callback function.\r\n     * @param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    filter(callbackfn: (value: T, index: number, array: T[]) => unknown, thisArg?: any): T[];\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\r\n     */\r\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T): T;\r\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T;\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\r\n     */\r\n    reduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\r\n     */\r\n    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T): T;\r\n    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T;\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\r\n     */\r\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;\r\n\r\n    [n: number]: T;\r\n}\r\n\r\ninterface ArrayConstructor {\r\n    new(arrayLength?: number): any[];\r\n    new <T>(arrayLength: number): T[];\r\n    new <T>(...items: T[]): T[];\r\n    (arrayLength?: number): any[];\r\n    <T>(arrayLength: number): T[];\r\n    <T>(...items: T[]): T[];\r\n    isArray(arg: any): arg is any[];\r\n    readonly prototype: any[];\r\n}\r\n\r\ndeclare var Array: ArrayConstructor;\r\n\r\ninterface TypedPropertyDescriptor<T> {\r\n    enumerable?: boolean;\r\n    configurable?: boolean;\r\n    writable?: boolean;\r\n    value?: T;\r\n    get?: () => T;\r\n    set?: (value: T) => void;\r\n}\r\n\r\ndeclare type ClassDecorator = <TFunction extends Function>(target: TFunction) => TFunction | void;\r\ndeclare type PropertyDecorator = (target: Object, propertyKey: string | symbol) => void;\r\ndeclare type MethodDecorator = <T>(target: Object, propertyKey: string | symbol, descriptor: TypedPropertyDescriptor<T>) => TypedPropertyDescriptor<T> | void;\r\ndeclare type ParameterDecorator = (target: Object, propertyKey: string | symbol, parameterIndex: number) => void;\r\n\r\ndeclare type PromiseConstructorLike = new <T>(executor: (resolve: (value?: T | PromiseLike<T>) => void, reject: (reason?: any) => void) => void) => PromiseLike<T>;\r\n\r\ninterface PromiseLike<T> {\r\n    /**\r\n     * Attaches callbacks for the resolution and/or rejection of the Promise.\r\n     * @param onfulfilled The callback to execute when the Promise is resolved.\r\n     * @param onrejected The callback to execute when the Promise is rejected.\r\n     * @returns A Promise for the completion of which ever callback is executed.\r\n     */\r\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): PromiseLike<TResult1 | TResult2>;\r\n}\r\n\r\n/**\r\n * Represents the completion of an asynchronous operation\r\n */\r\ninterface Promise<T> {\r\n    /**\r\n     * Attaches callbacks for the resolution and/or rejection of the Promise.\r\n     * @param onfulfilled The callback to execute when the Promise is resolved.\r\n     * @param onrejected The callback to execute when the Promise is rejected.\r\n     * @returns A Promise for the completion of which ever callback is executed.\r\n     */\r\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;\r\n\r\n    /**\r\n     * Attaches a callback for only the rejection of the Promise.\r\n     * @param onrejected The callback to execute when the Promise is rejected.\r\n     * @returns A Promise for the completion of the callback.\r\n     */\r\n    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;\r\n}\r\n\r\ninterface ArrayLike<T> {\r\n    readonly length: number;\r\n    readonly [n: number]: T;\r\n}\r\n\r\n/**\r\n * Make all properties in T optional\r\n */\r\ntype Partial<T> = {\r\n    [P in keyof T]?: T[P];\r\n};\r\n\r\n/**\r\n * Make all properties in T required\r\n */\r\ntype Required<T> = {\r\n    [P in keyof T]-?: T[P];\r\n};\r\n\r\n/**\r\n * Make all properties in T readonly\r\n */\r\ntype Readonly<T> = {\r\n    readonly [P in keyof T]: T[P];\r\n};\r\n\r\n/**\r\n * From T, pick a set of properties whose keys are in the union K\r\n */\r\ntype Pick<T, K extends keyof T> = {\r\n    [P in K]: T[P];\r\n};\r\n\r\n/**\r\n * Construct a type with a set of properties K of type T\r\n */\r\ntype Record<K extends keyof any, T> = {\r\n    [P in K]: T;\r\n};\r\n\r\n/**\r\n * Exclude from T those types that are assignable to U\r\n */\r\ntype Exclude<T, U> = T extends U ? never : T;\r\n\r\n/**\r\n * Extract from T those types that are assignable to U\r\n */\r\ntype Extract<T, U> = T extends U ? T : never;\r\n\r\n/**\r\n * Construct a type with the properties of T except for those in type K.\r\n */\r\ntype Omit<T, K extends keyof any> = Pick<T, Exclude<keyof T, K>>;\r\n\r\n/**\r\n * Exclude null and undefined from T\r\n */\r\ntype NonNullable<T> = T extends null | undefined ? never : T;\r\n\r\n/**\r\n * Obtain the parameters of a function type in a tuple\r\n */\r\ntype Parameters<T extends (...args: any) => any> = T extends (...args: infer P) => any ? P : never;\r\n\r\n/**\r\n * Obtain the parameters of a constructor function type in a tuple\r\n */\r\ntype ConstructorParameters<T extends new (...args: any) => any> = T extends new (...args: infer P) => any ? P : never;\r\n\r\n/**\r\n * Obtain the return type of a function type\r\n */\r\ntype ReturnType<T extends (...args: any) => any> = T extends (...args: any) => infer R ? R : any;\r\n\r\n/**\r\n * Obtain the return type of a constructor function type\r\n */\r\ntype InstanceType<T extends new (...args: any) => any> = T extends new (...args: any) => infer R ? R : any;\r\n\r\n/**\r\n * Marker for contextual 'this' type\r\n */\r\ninterface ThisType<T> { }\r\n\r\n/**\r\n * Represents a raw buffer of binary data, which is used to store data for the\r\n * different typed arrays. ArrayBuffers cannot be read from or written to directly,\r\n * but can be passed to a typed array or DataView Object to interpret the raw\r\n * buffer as needed.\r\n */\r\ninterface ArrayBuffer {\r\n    /**\r\n     * Read-only. The length of the ArrayBuffer (in bytes).\r\n     */\r\n    readonly byteLength: number;\r\n\r\n    /**\r\n     * Returns a section of an ArrayBuffer.\r\n     */\r\n    slice(begin: number, end?: number): ArrayBuffer;\r\n}\r\n\r\n/**\r\n * Allowed ArrayBuffer types for the buffer of an ArrayBufferView and related Typed Arrays.\r\n */\r\ninterface ArrayBufferTypes {\r\n    ArrayBuffer: ArrayBuffer;\r\n}\r\ntype ArrayBufferLike = ArrayBufferTypes[keyof ArrayBufferTypes];\r\n\r\ninterface ArrayBufferConstructor {\r\n    readonly prototype: ArrayBuffer;\r\n    new(byteLength: number): ArrayBuffer;\r\n    isView(arg: any): arg is ArrayBufferView;\r\n}\r\ndeclare var ArrayBuffer: ArrayBufferConstructor;\r\n\r\ninterface ArrayBufferView {\r\n    /**\r\n     * The ArrayBuffer instance referenced by the array.\r\n     */\r\n    buffer: ArrayBufferLike;\r\n\r\n    /**\r\n     * The length in bytes of the array.\r\n     */\r\n    byteLength: number;\r\n\r\n    /**\r\n     * The offset in bytes of the array.\r\n     */\r\n    byteOffset: number;\r\n}\r\n\r\ninterface DataView {\r\n    readonly buffer: ArrayBuffer;\r\n    readonly byteLength: number;\r\n    readonly byteOffset: number;\r\n    /**\r\n     * Gets the Float32 value at the specified byte offset from the start of the view. There is\r\n     * no alignment constraint; multi-byte values may be fetched from any offset.\r\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\r\n     */\r\n    getFloat32(byteOffset: number, littleEndian?: boolean): number;\r\n\r\n    /**\r\n     * Gets the Float64 value at the specified byte offset from the start of the view. There is\r\n     * no alignment constraint; multi-byte values may be fetched from any offset.\r\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\r\n     */\r\n    getFloat64(byteOffset: number, littleEndian?: boolean): number;\r\n\r\n    /**\r\n     * Gets the Int8 value at the specified byte offset from the start of the view. There is\r\n     * no alignment constraint; multi-byte values may be fetched from any offset.\r\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\r\n     */\r\n    getInt8(byteOffset: number): number;\r\n\r\n    /**\r\n     * Gets the Int16 value at the specified byte offset from the start of the view. There is\r\n     * no alignment constraint; multi-byte values may be fetched from any offset.\r\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\r\n     */\r\n    getInt16(byteOffset: number, littleEndian?: boolean): number;\r\n    /**\r\n     * Gets the Int32 value at the specified byte offset from the start of the view. There is\r\n     * no alignment constraint; multi-byte values may be fetched from any offset.\r\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\r\n     */\r\n    getInt32(byteOffset: number, littleEndian?: boolean): number;\r\n\r\n    /**\r\n     * Gets the Uint8 value at the specified byte offset from the start of the view. There is\r\n     * no alignment constraint; multi-byte values may be fetched from any offset.\r\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\r\n     */\r\n    getUint8(byteOffset: number): number;\r\n\r\n    /**\r\n     * Gets the Uint16 value at the specified byte offset from the start of the view. There is\r\n     * no alignment constraint; multi-byte values may be fetched from any offset.\r\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\r\n     */\r\n    getUint16(byteOffset: number, littleEndian?: boolean): number;\r\n\r\n    /**\r\n     * Gets the Uint32 value at the specified byte offset from the start of the view. There is\r\n     * no alignment constraint; multi-byte values may be fetched from any offset.\r\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\r\n     */\r\n    getUint32(byteOffset: number, littleEndian?: boolean): number;\r\n\r\n    /**\r\n     * Stores an Float32 value at the specified byte offset from the start of the view.\r\n     * @param byteOffset The place in the buffer at which the value should be set.\r\n     * @param value The value to set.\r\n     * @param littleEndian If false or undefined, a big-endian value should be written,\r\n     * otherwise a little-endian value should be written.\r\n     */\r\n    setFloat32(byteOffset: number, value: number, littleEndian?: boolean): void;\r\n\r\n    /**\r\n     * Stores an Float64 value at the specified byte offset from the start of the view.\r\n     * @param byteOffset The place in the buffer at which the value should be set.\r\n     * @param value The value to set.\r\n     * @param littleEndian If false or undefined, a big-endian value should be written,\r\n     * otherwise a little-endian value should be written.\r\n     */\r\n    setFloat64(byteOffset: number, value: number, littleEndian?: boolean): void;\r\n\r\n    /**\r\n     * Stores an Int8 value at the specified byte offset from the start of the view.\r\n     * @param byteOffset The place in the buffer at which the value should be set.\r\n     * @param value The value to set.\r\n     */\r\n    setInt8(byteOffset: number, value: number): void;\r\n\r\n    /**\r\n     * Stores an Int16 value at the specified byte offset from the start of the view.\r\n     * @param byteOffset The place in the buffer at which the value should be set.\r\n     * @param value The value to set.\r\n     * @param littleEndian If false or undefined, a big-endian value should be written,\r\n     * otherwise a little-endian value should be written.\r\n     */\r\n    setInt16(byteOffset: number, value: number, littleEndian?: boolean): void;\r\n\r\n    /**\r\n     * Stores an Int32 value at the specified byte offset from the start of the view.\r\n     * @param byteOffset The place in the buffer at which the value should be set.\r\n     * @param value The value to set.\r\n     * @param littleEndian If false or undefined, a big-endian value should be written,\r\n     * otherwise a little-endian value should be written.\r\n     */\r\n    setInt32(byteOffset: number, value: number, littleEndian?: boolean): void;\r\n\r\n    /**\r\n     * Stores an Uint8 value at the specified byte offset from the start of the view.\r\n     * @param byteOffset The place in the buffer at which the value should be set.\r\n     * @param value The value to set.\r\n     */\r\n    setUint8(byteOffset: number, value: number): void;\r\n\r\n    /**\r\n     * Stores an Uint16 value at the specified byte offset from the start of the view.\r\n     * @param byteOffset The place in the buffer at which the value should be set.\r\n     * @param value The value to set.\r\n     * @param littleEndian If false or undefined, a big-endian value should be written,\r\n     * otherwise a little-endian value should be written.\r\n     */\r\n    setUint16(byteOffset: number, value: number, littleEndian?: boolean): void;\r\n\r\n    /**\r\n     * Stores an Uint32 value at the specified byte offset from the start of the view.\r\n     * @param byteOffset The place in the buffer at which the value should be set.\r\n     * @param value The value to set.\r\n     * @param littleEndian If false or undefined, a big-endian value should be written,\r\n     * otherwise a little-endian value should be written.\r\n     */\r\n    setUint32(byteOffset: number, value: number, littleEndian?: boolean): void;\r\n}\r\n\r\ninterface DataViewConstructor {\r\n    new(buffer: ArrayBufferLike, byteOffset?: number, byteLength?: number): DataView;\r\n}\r\ndeclare var DataView: DataViewConstructor;\r\n\r\n/**\r\n * A typed array of 8-bit integer values. The contents are initialized to 0. If the requested\r\n * number of bytes could not be allocated an exception is raised.\r\n */\r\ninterface Int8Array {\r\n    /**\r\n     * The size in bytes of each element in the array.\r\n     */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n     * The ArrayBuffer instance referenced by the array.\r\n     */\r\n    readonly buffer: ArrayBufferLike;\r\n\r\n    /**\r\n     * The length in bytes of the array.\r\n     */\r\n    readonly byteLength: number;\r\n\r\n    /**\r\n     * The offset in bytes of the array.\r\n     */\r\n    readonly byteOffset: number;\r\n\r\n    /**\r\n     * Returns the this object after copying a section of the array identified by start and end\r\n     * to the same array starting at position target\r\n     * @param target If target is negative, it is treated as length+target where length is the\r\n     * length of the array.\r\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\r\n     * is treated as length+end.\r\n     * @param end If not specified, length of the this object is used as its default value.\r\n     */\r\n    copyWithin(target: number, start: number, end?: number): this;\r\n\r\n    /**\r\n     * Determines whether all the members of an array satisfy the specified test.\r\n     * @param callbackfn A function that accepts up to three arguments. The every method calls\r\n     * the callbackfn function for each element in the array until the callbackfn returns a value\r\n     * which is coercible to the Boolean value false, or until the end of the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    every(callbackfn: (value: number, index: number, array: Int8Array) => unknown, thisArg?: any): boolean;\r\n\r\n    /**\r\n     * Returns the this object after filling the section identified by start and end with value\r\n     * @param value value to fill array section with\r\n     * @param start index to start filling the array at. If start is negative, it is treated as\r\n     * length+start where length is the length of the array.\r\n     * @param end index to stop filling the array at. If end is negative, it is treated as\r\n     * length+end.\r\n     */\r\n    fill(value: number, start?: number, end?: number): this;\r\n\r\n    /**\r\n     * Returns the elements of an array that meet the condition specified in a callback function.\r\n     * @param callbackfn A function that accepts up to three arguments. The filter method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    filter(callbackfn: (value: number, index: number, array: Int8Array) => any, thisArg?: any): Int8Array;\r\n\r\n    /**\r\n     * Returns the value of the first element in the array where predicate is true, and undefined\r\n     * otherwise.\r\n     * @param predicate find calls predicate once for each element of the array, in ascending\r\n     * order, until it finds one where predicate returns true. If such an element is found, find\r\n     * immediately returns that element value. Otherwise, find returns undefined.\r\n     * @param thisArg If provided, it will be used as the this value for each invocation of\r\n     * predicate. If it is not provided, undefined is used instead.\r\n     */\r\n    find(predicate: (value: number, index: number, obj: Int8Array) => boolean, thisArg?: any): number | undefined;\r\n\r\n    /**\r\n     * Returns the index of the first element in the array where predicate is true, and -1\r\n     * otherwise.\r\n     * @param predicate find calls predicate once for each element of the array, in ascending\r\n     * order, until it finds one where predicate returns true. If such an element is found,\r\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\r\n     * @param thisArg If provided, it will be used as the this value for each invocation of\r\n     * predicate. If it is not provided, undefined is used instead.\r\n     */\r\n    findIndex(predicate: (value: number, index: number, obj: Int8Array) => boolean, thisArg?: any): number;\r\n\r\n    /**\r\n     * Performs the specified action for each element in an array.\r\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    forEach(callbackfn: (value: number, index: number, array: Int8Array) => void, thisArg?: any): void;\r\n\r\n    /**\r\n     * Returns the index of the first occurrence of a value in an array.\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n     *  search starts at index 0.\r\n     */\r\n    indexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n     * Adds all the elements of an array separated by the specified separator string.\r\n     * @param separator A string used to separate one element of an array from the next in the\r\n     * resulting String. If omitted, the array elements are separated with a comma.\r\n     */\r\n    join(separator?: string): string;\r\n\r\n    /**\r\n     * Returns the index of the last occurrence of a value in an array.\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n     * search starts at index 0.\r\n     */\r\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n     * The length of the array.\r\n     */\r\n    readonly length: number;\r\n\r\n    /**\r\n     * Calls a defined callback function on each element of an array, and returns an array that\r\n     * contains the results.\r\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    map(callbackfn: (value: number, index: number, array: Int8Array) => number, thisArg?: any): Int8Array;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array. The return value of\r\n     * the callback function is the accumulated result, and is provided as an argument in the next\r\n     * call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int8Array) => number): number;\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int8Array) => number, initialValue: number): number;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array. The return value of\r\n     * the callback function is the accumulated result, and is provided as an argument in the next\r\n     * call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int8Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array, in descending order.\r\n     * The return value of the callback function is the accumulated result, and is provided as an\r\n     * argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an\r\n     * argument instead of an array value.\r\n     */\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int8Array) => number): number;\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int8Array) => number, initialValue: number): number;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array, in descending order.\r\n     * The return value of the callback function is the accumulated result, and is provided as an\r\n     * argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int8Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Reverses the elements in an Array.\r\n     */\r\n    reverse(): Int8Array;\r\n\r\n    /**\r\n     * Sets a value or an array of values.\r\n     * @param array A typed or untyped array of values to set.\r\n     * @param offset The index in the current array at which the values are to be written.\r\n     */\r\n    set(array: ArrayLike<number>, offset?: number): void;\r\n\r\n    /**\r\n     * Returns a section of an array.\r\n     * @param start The beginning of the specified portion of the array.\r\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.\r\n     */\r\n    slice(start?: number, end?: number): Int8Array;\r\n\r\n    /**\r\n     * Determines whether the specified callback function returns true for any element of an array.\r\n     * @param callbackfn A function that accepts up to three arguments. The some method calls\r\n     * the callbackfn function for each element in the array until the callbackfn returns a value\r\n     * which is coercible to the Boolean value true, or until the end of the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    some(callbackfn: (value: number, index: number, array: Int8Array) => unknown, thisArg?: any): boolean;\r\n\r\n    /**\r\n     * Sorts an array.\r\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\r\n     * a negative value if first argument is less than second argument, zero if they're equal and a positive\r\n     * value otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\r\n     * ```ts\r\n     * [11,2,22,1].sort((a, b) => a - b)\r\n     * ```\r\n     */\r\n    sort(compareFn?: (a: number, b: number) => number): this;\r\n\r\n    /**\r\n     * Gets a new Int8Array view of the ArrayBuffer store for this array, referencing the elements\r\n     * at begin, inclusive, up to end, exclusive.\r\n     * @param begin The index of the beginning of the array.\r\n     * @param end The index of the end of the array.\r\n     */\r\n    subarray(begin?: number, end?: number): Int8Array;\r\n\r\n    /**\r\n     * Converts a number to a string by using the current locale.\r\n     */\r\n    toLocaleString(): string;\r\n\r\n    /**\r\n     * Returns a string representation of an array.\r\n     */\r\n    toString(): string;\r\n\r\n    /** Returns the primitive value of the specified object. */\r\n    valueOf(): Int8Array;\r\n\r\n    [index: number]: number;\r\n}\r\ninterface Int8ArrayConstructor {\r\n    readonly prototype: Int8Array;\r\n    new(length: number): Int8Array;\r\n    new(arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): Int8Array;\r\n    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): Int8Array;\r\n\r\n    /**\r\n     * The size in bytes of each element in the array.\r\n     */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n     * Returns a new array from a set of elements.\r\n     * @param items A set of elements to include in the new array object.\r\n     */\r\n    of(...items: number[]): Int8Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     */\r\n    from(arrayLike: ArrayLike<number>): Int8Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     * @param mapfn A mapping function to call on every element of the array.\r\n     * @param thisArg Value of 'this' used to invoke the mapfn.\r\n     */\r\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int8Array;\r\n\r\n\r\n}\r\ndeclare var Int8Array: Int8ArrayConstructor;\r\n\r\n/**\r\n * A typed array of 8-bit unsigned integer values. The contents are initialized to 0. If the\r\n * requested number of bytes could not be allocated an exception is raised.\r\n */\r\ninterface Uint8Array {\r\n    /**\r\n     * The size in bytes of each element in the array.\r\n     */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n     * The ArrayBuffer instance referenced by the array.\r\n     */\r\n    readonly buffer: ArrayBufferLike;\r\n\r\n    /**\r\n     * The length in bytes of the array.\r\n     */\r\n    readonly byteLength: number;\r\n\r\n    /**\r\n     * The offset in bytes of the array.\r\n     */\r\n    readonly byteOffset: number;\r\n\r\n    /**\r\n     * Returns the this object after copying a section of the array identified by start and end\r\n     * to the same array starting at position target\r\n     * @param target If target is negative, it is treated as length+target where length is the\r\n     * length of the array.\r\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\r\n     * is treated as length+end.\r\n     * @param end If not specified, length of the this object is used as its default value.\r\n     */\r\n    copyWithin(target: number, start: number, end?: number): this;\r\n\r\n    /**\r\n     * Determines whether all the members of an array satisfy the specified test.\r\n     * @param callbackfn A function that accepts up to three arguments. The every method calls\r\n     * the callbackfn function for each element in the array until the callbackfn returns a value\r\n     * which is coercible to the Boolean value false, or until the end of the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    every(callbackfn: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;\r\n\r\n    /**\r\n     * Returns the this object after filling the section identified by start and end with value\r\n     * @param value value to fill array section with\r\n     * @param start index to start filling the array at. If start is negative, it is treated as\r\n     * length+start where length is the length of the array.\r\n     * @param end index to stop filling the array at. If end is negative, it is treated as\r\n     * length+end.\r\n     */\r\n    fill(value: number, start?: number, end?: number): this;\r\n\r\n    /**\r\n     * Returns the elements of an array that meet the condition specified in a callback function.\r\n     * @param callbackfn A function that accepts up to three arguments. The filter method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    filter(callbackfn: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;\r\n\r\n    /**\r\n     * Returns the value of the first element in the array where predicate is true, and undefined\r\n     * otherwise.\r\n     * @param predicate find calls predicate once for each element of the array, in ascending\r\n     * order, until it finds one where predicate returns true. If such an element is found, find\r\n     * immediately returns that element value. Otherwise, find returns undefined.\r\n     * @param thisArg If provided, it will be used as the this value for each invocation of\r\n     * predicate. If it is not provided, undefined is used instead.\r\n     */\r\n    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;\r\n\r\n    /**\r\n     * Returns the index of the first element in the array where predicate is true, and -1\r\n     * otherwise.\r\n     * @param predicate find calls predicate once for each element of the array, in ascending\r\n     * order, until it finds one where predicate returns true. If such an element is found,\r\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\r\n     * @param thisArg If provided, it will be used as the this value for each invocation of\r\n     * predicate. If it is not provided, undefined is used instead.\r\n     */\r\n    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;\r\n\r\n    /**\r\n     * Performs the specified action for each element in an array.\r\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;\r\n\r\n    /**\r\n     * Returns the index of the first occurrence of a value in an array.\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n     *  search starts at index 0.\r\n     */\r\n    indexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n     * Adds all the elements of an array separated by the specified separator string.\r\n     * @param separator A string used to separate one element of an array from the next in the\r\n     * resulting String. If omitted, the array elements are separated with a comma.\r\n     */\r\n    join(separator?: string): string;\r\n\r\n    /**\r\n     * Returns the index of the last occurrence of a value in an array.\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n     * search starts at index 0.\r\n     */\r\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n     * The length of the array.\r\n     */\r\n    readonly length: number;\r\n\r\n    /**\r\n     * Calls a defined callback function on each element of an array, and returns an array that\r\n     * contains the results.\r\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array. The return value of\r\n     * the callback function is the accumulated result, and is provided as an argument in the next\r\n     * call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array. The return value of\r\n     * the callback function is the accumulated result, and is provided as an argument in the next\r\n     * call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array, in descending order.\r\n     * The return value of the callback function is the accumulated result, and is provided as an\r\n     * argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an\r\n     * argument instead of an array value.\r\n     */\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array, in descending order.\r\n     * The return value of the callback function is the accumulated result, and is provided as an\r\n     * argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Reverses the elements in an Array.\r\n     */\r\n    reverse(): Uint8Array;\r\n\r\n    /**\r\n     * Sets a value or an array of values.\r\n     * @param array A typed or untyped array of values to set.\r\n     * @param offset The index in the current array at which the values are to be written.\r\n     */\r\n    set(array: ArrayLike<number>, offset?: number): void;\r\n\r\n    /**\r\n     * Returns a section of an array.\r\n     * @param start The beginning of the specified portion of the array.\r\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.\r\n     */\r\n    slice(start?: number, end?: number): Uint8Array;\r\n\r\n    /**\r\n     * Determines whether the specified callback function returns true for any element of an array.\r\n     * @param callbackfn A function that accepts up to three arguments. The some method calls\r\n     * the callbackfn function for each element in the array until the callbackfn returns a value\r\n     * which is coercible to the Boolean value true, or until the end of the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    some(callbackfn: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;\r\n\r\n    /**\r\n     * Sorts an array.\r\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\r\n     * a negative value if first argument is less than second argument, zero if they're equal and a positive\r\n     * value otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\r\n     * ```ts\r\n     * [11,2,22,1].sort((a, b) => a - b)\r\n     * ```\r\n     */\r\n    sort(compareFn?: (a: number, b: number) => number): this;\r\n\r\n    /**\r\n     * Gets a new Uint8Array view of the ArrayBuffer store for this array, referencing the elements\r\n     * at begin, inclusive, up to end, exclusive.\r\n     * @param begin The index of the beginning of the array.\r\n     * @param end The index of the end of the array.\r\n     */\r\n    subarray(begin?: number, end?: number): Uint8Array;\r\n\r\n    /**\r\n     * Converts a number to a string by using the current locale.\r\n     */\r\n    toLocaleString(): string;\r\n\r\n    /**\r\n     * Returns a string representation of an array.\r\n     */\r\n    toString(): string;\r\n\r\n    /** Returns the primitive value of the specified object. */\r\n    valueOf(): Uint8Array;\r\n\r\n    [index: number]: number;\r\n}\r\n\r\ninterface Uint8ArrayConstructor {\r\n    readonly prototype: Uint8Array;\r\n    new(length: number): Uint8Array;\r\n    new(arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): Uint8Array;\r\n    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): Uint8Array;\r\n\r\n    /**\r\n     * The size in bytes of each element in the array.\r\n     */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n     * Returns a new array from a set of elements.\r\n     * @param items A set of elements to include in the new array object.\r\n     */\r\n    of(...items: number[]): Uint8Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     */\r\n    from(arrayLike: ArrayLike<number>): Uint8Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     * @param mapfn A mapping function to call on every element of the array.\r\n     * @param thisArg Value of 'this' used to invoke the mapfn.\r\n     */\r\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array;\r\n\r\n}\r\ndeclare var Uint8Array: Uint8ArrayConstructor;\r\n\r\n/**\r\n * A typed array of 8-bit unsigned integer (clamped) values. The contents are initialized to 0.\r\n * If the requested number of bytes could not be allocated an exception is raised.\r\n */\r\ninterface Uint8ClampedArray {\r\n    /**\r\n     * The size in bytes of each element in the array.\r\n     */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n     * The ArrayBuffer instance referenced by the array.\r\n     */\r\n    readonly buffer: ArrayBufferLike;\r\n\r\n    /**\r\n     * The length in bytes of the array.\r\n     */\r\n    readonly byteLength: number;\r\n\r\n    /**\r\n     * The offset in bytes of the array.\r\n     */\r\n    readonly byteOffset: number;\r\n\r\n    /**\r\n     * Returns the this object after copying a section of the array identified by start and end\r\n     * to the same array starting at position target\r\n     * @param target If target is negative, it is treated as length+target where length is the\r\n     * length of the array.\r\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\r\n     * is treated as length+end.\r\n     * @param end If not specified, length of the this object is used as its default value.\r\n     */\r\n    copyWithin(target: number, start: number, end?: number): this;\r\n\r\n    /**\r\n     * Determines whether all the members of an array satisfy the specified test.\r\n     * @param callbackfn A function that accepts up to three arguments. The every method calls\r\n     * the callbackfn function for each element in the array until the callbackfn returns a value\r\n     * which is coercible to the Boolean value false, or until the end of the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    every(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => unknown, thisArg?: any): boolean;\r\n\r\n    /**\r\n     * Returns the this object after filling the section identified by start and end with value\r\n     * @param value value to fill array section with\r\n     * @param start index to start filling the array at. If start is negative, it is treated as\r\n     * length+start where length is the length of the array.\r\n     * @param end index to stop filling the array at. If end is negative, it is treated as\r\n     * length+end.\r\n     */\r\n    fill(value: number, start?: number, end?: number): this;\r\n\r\n    /**\r\n     * Returns the elements of an array that meet the condition specified in a callback function.\r\n     * @param callbackfn A function that accepts up to three arguments. The filter method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    filter(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => any, thisArg?: any): Uint8ClampedArray;\r\n\r\n    /**\r\n     * Returns the value of the first element in the array where predicate is true, and undefined\r\n     * otherwise.\r\n     * @param predicate find calls predicate once for each element of the array, in ascending\r\n     * order, until it finds one where predicate returns true. If such an element is found, find\r\n     * immediately returns that element value. Otherwise, find returns undefined.\r\n     * @param thisArg If provided, it will be used as the this value for each invocation of\r\n     * predicate. If it is not provided, undefined is used instead.\r\n     */\r\n    find(predicate: (value: number, index: number, obj: Uint8ClampedArray) => boolean, thisArg?: any): number | undefined;\r\n\r\n    /**\r\n     * Returns the index of the first element in the array where predicate is true, and -1\r\n     * otherwise.\r\n     * @param predicate find calls predicate once for each element of the array, in ascending\r\n     * order, until it finds one where predicate returns true. If such an element is found,\r\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\r\n     * @param thisArg If provided, it will be used as the this value for each invocation of\r\n     * predicate. If it is not provided, undefined is used instead.\r\n     */\r\n    findIndex(predicate: (value: number, index: number, obj: Uint8ClampedArray) => boolean, thisArg?: any): number;\r\n\r\n    /**\r\n     * Performs the specified action for each element in an array.\r\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    forEach(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => void, thisArg?: any): void;\r\n\r\n    /**\r\n     * Returns the index of the first occurrence of a value in an array.\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n     *  search starts at index 0.\r\n     */\r\n    indexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n     * Adds all the elements of an array separated by the specified separator string.\r\n     * @param separator A string used to separate one element of an array from the next in the\r\n     * resulting String. If omitted, the array elements are separated with a comma.\r\n     */\r\n    join(separator?: string): string;\r\n\r\n    /**\r\n     * Returns the index of the last occurrence of a value in an array.\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n     * search starts at index 0.\r\n     */\r\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n     * The length of the array.\r\n     */\r\n    readonly length: number;\r\n\r\n    /**\r\n     * Calls a defined callback function on each element of an array, and returns an array that\r\n     * contains the results.\r\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    map(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => number, thisArg?: any): Uint8ClampedArray;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array. The return value of\r\n     * the callback function is the accumulated result, and is provided as an argument in the next\r\n     * call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => number): number;\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => number, initialValue: number): number;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array. The return value of\r\n     * the callback function is the accumulated result, and is provided as an argument in the next\r\n     * call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array, in descending order.\r\n     * The return value of the callback function is the accumulated result, and is provided as an\r\n     * argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an\r\n     * argument instead of an array value.\r\n     */\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => number): number;\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => number, initialValue: number): number;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array, in descending order.\r\n     * The return value of the callback function is the accumulated result, and is provided as an\r\n     * argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Reverses the elements in an Array.\r\n     */\r\n    reverse(): Uint8ClampedArray;\r\n\r\n    /**\r\n     * Sets a value or an array of values.\r\n     * @param array A typed or untyped array of values to set.\r\n     * @param offset The index in the current array at which the values are to be written.\r\n     */\r\n    set(array: ArrayLike<number>, offset?: number): void;\r\n\r\n    /**\r\n     * Returns a section of an array.\r\n     * @param start The beginning of the specified portion of the array.\r\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.\r\n     */\r\n    slice(start?: number, end?: number): Uint8ClampedArray;\r\n\r\n    /**\r\n     * Determines whether the specified callback function returns true for any element of an array.\r\n     * @param callbackfn A function that accepts up to three arguments. The some method calls\r\n     * the callbackfn function for each element in the array until the callbackfn returns a value\r\n     * which is coercible to the Boolean value true, or until the end of the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    some(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => unknown, thisArg?: any): boolean;\r\n\r\n    /**\r\n     * Sorts an array.\r\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\r\n     * a negative value if first argument is less than second argument, zero if they're equal and a positive\r\n     * value otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\r\n     * ```ts\r\n     * [11,2,22,1].sort((a, b) => a - b)\r\n     * ```\r\n     */\r\n    sort(compareFn?: (a: number, b: number) => number): this;\r\n\r\n    /**\r\n     * Gets a new Uint8ClampedArray view of the ArrayBuffer store for this array, referencing the elements\r\n     * at begin, inclusive, up to end, exclusive.\r\n     * @param begin The index of the beginning of the array.\r\n     * @param end The index of the end of the array.\r\n     */\r\n    subarray(begin?: number, end?: number): Uint8ClampedArray;\r\n\r\n    /**\r\n     * Converts a number to a string by using the current locale.\r\n     */\r\n    toLocaleString(): string;\r\n\r\n    /**\r\n     * Returns a string representation of an array.\r\n     */\r\n    toString(): string;\r\n\r\n    /** Returns the primitive value of the specified object. */\r\n    valueOf(): Uint8ClampedArray;\r\n\r\n    [index: number]: number;\r\n}\r\n\r\ninterface Uint8ClampedArrayConstructor {\r\n    readonly prototype: Uint8ClampedArray;\r\n    new(length: number): Uint8ClampedArray;\r\n    new(arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): Uint8ClampedArray;\r\n    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): Uint8ClampedArray;\r\n\r\n    /**\r\n     * The size in bytes of each element in the array.\r\n     */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n     * Returns a new array from a set of elements.\r\n     * @param items A set of elements to include in the new array object.\r\n     */\r\n    of(...items: number[]): Uint8ClampedArray;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     */\r\n    from(arrayLike: ArrayLike<number>): Uint8ClampedArray;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     * @param mapfn A mapping function to call on every element of the array.\r\n     * @param thisArg Value of 'this' used to invoke the mapfn.\r\n     */\r\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray;\r\n}\r\ndeclare var Uint8ClampedArray: Uint8ClampedArrayConstructor;\r\n\r\n/**\r\n * A typed array of 16-bit signed integer values. The contents are initialized to 0. If the\r\n * requested number of bytes could not be allocated an exception is raised.\r\n */\r\ninterface Int16Array {\r\n    /**\r\n     * The size in bytes of each element in the array.\r\n     */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n     * The ArrayBuffer instance referenced by the array.\r\n     */\r\n    readonly buffer: ArrayBufferLike;\r\n\r\n    /**\r\n     * The length in bytes of the array.\r\n     */\r\n    readonly byteLength: number;\r\n\r\n    /**\r\n     * The offset in bytes of the array.\r\n     */\r\n    readonly byteOffset: number;\r\n\r\n    /**\r\n     * Returns the this object after copying a section of the array identified by start and end\r\n     * to the same array starting at position target\r\n     * @param target If target is negative, it is treated as length+target where length is the\r\n     * length of the array.\r\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\r\n     * is treated as length+end.\r\n     * @param end If not specified, length of the this object is used as its default value.\r\n     */\r\n    copyWithin(target: number, start: number, end?: number): this;\r\n\r\n    /**\r\n     * Determines whether all the members of an array satisfy the specified test.\r\n     * @param callbackfn A function that accepts up to three arguments. The every method calls\r\n     * the callbackfn function for each element in the array until the callbackfn returns a value\r\n     * which is coercible to the Boolean value false, or until the end of the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    every(callbackfn: (value: number, index: number, array: Int16Array) => unknown, thisArg?: any): boolean;\r\n\r\n    /**\r\n     * Returns the this object after filling the section identified by start and end with value\r\n     * @param value value to fill array section with\r\n     * @param start index to start filling the array at. If start is negative, it is treated as\r\n     * length+start where length is the length of the array.\r\n     * @param end index to stop filling the array at. If end is negative, it is treated as\r\n     * length+end.\r\n     */\r\n    fill(value: number, start?: number, end?: number): this;\r\n\r\n    /**\r\n     * Returns the elements of an array that meet the condition specified in a callback function.\r\n     * @param callbackfn A function that accepts up to three arguments. The filter method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    filter(callbackfn: (value: number, index: number, array: Int16Array) => any, thisArg?: any): Int16Array;\r\n\r\n    /**\r\n     * Returns the value of the first element in the array where predicate is true, and undefined\r\n     * otherwise.\r\n     * @param predicate find calls predicate once for each element of the array, in ascending\r\n     * order, until it finds one where predicate returns true. If such an element is found, find\r\n     * immediately returns that element value. Otherwise, find returns undefined.\r\n     * @param thisArg If provided, it will be used as the this value for each invocation of\r\n     * predicate. If it is not provided, undefined is used instead.\r\n     */\r\n    find(predicate: (value: number, index: number, obj: Int16Array) => boolean, thisArg?: any): number | undefined;\r\n\r\n    /**\r\n     * Returns the index of the first element in the array where predicate is true, and -1\r\n     * otherwise.\r\n     * @param predicate find calls predicate once for each element of the array, in ascending\r\n     * order, until it finds one where predicate returns true. If such an element is found,\r\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\r\n     * @param thisArg If provided, it will be used as the this value for each invocation of\r\n     * predicate. If it is not provided, undefined is used instead.\r\n     */\r\n    findIndex(predicate: (value: number, index: number, obj: Int16Array) => boolean, thisArg?: any): number;\r\n\r\n    /**\r\n     * Performs the specified action for each element in an array.\r\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    forEach(callbackfn: (value: number, index: number, array: Int16Array) => void, thisArg?: any): void;\r\n    /**\r\n     * Returns the index of the first occurrence of a value in an array.\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n     *  search starts at index 0.\r\n     */\r\n    indexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n     * Adds all the elements of an array separated by the specified separator string.\r\n     * @param separator A string used to separate one element of an array from the next in the\r\n     * resulting String. If omitted, the array elements are separated with a comma.\r\n     */\r\n    join(separator?: string): string;\r\n\r\n    /**\r\n     * Returns the index of the last occurrence of a value in an array.\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n     * search starts at index 0.\r\n     */\r\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n     * The length of the array.\r\n     */\r\n    readonly length: number;\r\n\r\n    /**\r\n     * Calls a defined callback function on each element of an array, and returns an array that\r\n     * contains the results.\r\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    map(callbackfn: (value: number, index: number, array: Int16Array) => number, thisArg?: any): Int16Array;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array. The return value of\r\n     * the callback function is the accumulated result, and is provided as an argument in the next\r\n     * call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int16Array) => number): number;\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int16Array) => number, initialValue: number): number;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array. The return value of\r\n     * the callback function is the accumulated result, and is provided as an argument in the next\r\n     * call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int16Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array, in descending order.\r\n     * The return value of the callback function is the accumulated result, and is provided as an\r\n     * argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an\r\n     * argument instead of an array value.\r\n     */\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int16Array) => number): number;\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int16Array) => number, initialValue: number): number;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array, in descending order.\r\n     * The return value of the callback function is the accumulated result, and is provided as an\r\n     * argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int16Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Reverses the elements in an Array.\r\n     */\r\n    reverse(): Int16Array;\r\n\r\n    /**\r\n     * Sets a value or an array of values.\r\n     * @param array A typed or untyped array of values to set.\r\n     * @param offset The index in the current array at which the values are to be written.\r\n     */\r\n    set(array: ArrayLike<number>, offset?: number): void;\r\n\r\n    /**\r\n     * Returns a section of an array.\r\n     * @param start The beginning of the specified portion of the array.\r\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.\r\n     */\r\n    slice(start?: number, end?: number): Int16Array;\r\n\r\n    /**\r\n     * Determines whether the specified callback function returns true for any element of an array.\r\n     * @param callbackfn A function that accepts up to three arguments. The some method calls\r\n     * the callbackfn function for each element in the array until the callbackfn returns a value\r\n     * which is coercible to the Boolean value true, or until the end of the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    some(callbackfn: (value: number, index: number, array: Int16Array) => unknown, thisArg?: any): boolean;\r\n\r\n    /**\r\n     * Sorts an array.\r\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\r\n     * a negative value if first argument is less than second argument, zero if they're equal and a positive\r\n     * value otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\r\n     * ```ts\r\n     * [11,2,22,1].sort((a, b) => a - b)\r\n     * ```\r\n     */\r\n    sort(compareFn?: (a: number, b: number) => number): this;\r\n\r\n    /**\r\n     * Gets a new Int16Array view of the ArrayBuffer store for this array, referencing the elements\r\n     * at begin, inclusive, up to end, exclusive.\r\n     * @param begin The index of the beginning of the array.\r\n     * @param end The index of the end of the array.\r\n     */\r\n    subarray(begin?: number, end?: number): Int16Array;\r\n\r\n    /**\r\n     * Converts a number to a string by using the current locale.\r\n     */\r\n    toLocaleString(): string;\r\n\r\n    /**\r\n     * Returns a string representation of an array.\r\n     */\r\n    toString(): string;\r\n\r\n    /** Returns the primitive value of the specified object. */\r\n    valueOf(): Int16Array;\r\n\r\n    [index: number]: number;\r\n}\r\n\r\ninterface Int16ArrayConstructor {\r\n    readonly prototype: Int16Array;\r\n    new(length: number): Int16Array;\r\n    new(arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): Int16Array;\r\n    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): Int16Array;\r\n\r\n    /**\r\n     * The size in bytes of each element in the array.\r\n     */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n     * Returns a new array from a set of elements.\r\n     * @param items A set of elements to include in the new array object.\r\n     */\r\n    of(...items: number[]): Int16Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     */\r\n    from(arrayLike: ArrayLike<number>): Int16Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     * @param mapfn A mapping function to call on every element of the array.\r\n     * @param thisArg Value of 'this' used to invoke the mapfn.\r\n     */\r\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int16Array;\r\n\r\n\r\n}\r\ndeclare var Int16Array: Int16ArrayConstructor;\r\n\r\n/**\r\n * A typed array of 16-bit unsigned integer values. The contents are initialized to 0. If the\r\n * requested number of bytes could not be allocated an exception is raised.\r\n */\r\ninterface Uint16Array {\r\n    /**\r\n     * The size in bytes of each element in the array.\r\n     */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n     * The ArrayBuffer instance referenced by the array.\r\n     */\r\n    readonly buffer: ArrayBufferLike;\r\n\r\n    /**\r\n     * The length in bytes of the array.\r\n     */\r\n    readonly byteLength: number;\r\n\r\n    /**\r\n     * The offset in bytes of the array.\r\n     */\r\n    readonly byteOffset: number;\r\n\r\n    /**\r\n     * Returns the this object after copying a section of the array identified by start and end\r\n     * to the same array starting at position target\r\n     * @param target If target is negative, it is treated as length+target where length is the\r\n     * length of the array.\r\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\r\n     * is treated as length+end.\r\n     * @param end If not specified, length of the this object is used as its default value.\r\n     */\r\n    copyWithin(target: number, start: number, end?: number): this;\r\n\r\n    /**\r\n     * Determines whether all the members of an array satisfy the specified test.\r\n     * @param callbackfn A function that accepts up to three arguments. The every method calls\r\n     * the callbackfn function for each element in the array until the callbackfn returns a value\r\n     * which is coercible to the Boolean value false, or until the end of the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    every(callbackfn: (value: number, index: number, array: Uint16Array) => unknown, thisArg?: any): boolean;\r\n\r\n    /**\r\n     * Returns the this object after filling the section identified by start and end with value\r\n     * @param value value to fill array section with\r\n     * @param start index to start filling the array at. If start is negative, it is treated as\r\n     * length+start where length is the length of the array.\r\n     * @param end index to stop filling the array at. If end is negative, it is treated as\r\n     * length+end.\r\n     */\r\n    fill(value: number, start?: number, end?: number): this;\r\n\r\n    /**\r\n     * Returns the elements of an array that meet the condition specified in a callback function.\r\n     * @param callbackfn A function that accepts up to three arguments. The filter method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    filter(callbackfn: (value: number, index: number, array: Uint16Array) => any, thisArg?: any): Uint16Array;\r\n\r\n    /**\r\n     * Returns the value of the first element in the array where predicate is true, and undefined\r\n     * otherwise.\r\n     * @param predicate find calls predicate once for each element of the array, in ascending\r\n     * order, until it finds one where predicate returns true. If such an element is found, find\r\n     * immediately returns that element value. Otherwise, find returns undefined.\r\n     * @param thisArg If provided, it will be used as the this value for each invocation of\r\n     * predicate. If it is not provided, undefined is used instead.\r\n     */\r\n    find(predicate: (value: number, index: number, obj: Uint16Array) => boolean, thisArg?: any): number | undefined;\r\n\r\n    /**\r\n     * Returns the index of the first element in the array where predicate is true, and -1\r\n     * otherwise.\r\n     * @param predicate find calls predicate once for each element of the array, in ascending\r\n     * order, until it finds one where predicate returns true. If such an element is found,\r\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\r\n     * @param thisArg If provided, it will be used as the this value for each invocation of\r\n     * predicate. If it is not provided, undefined is used instead.\r\n     */\r\n    findIndex(predicate: (value: number, index: number, obj: Uint16Array) => boolean, thisArg?: any): number;\r\n\r\n    /**\r\n     * Performs the specified action for each element in an array.\r\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    forEach(callbackfn: (value: number, index: number, array: Uint16Array) => void, thisArg?: any): void;\r\n\r\n    /**\r\n     * Returns the index of the first occurrence of a value in an array.\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n     *  search starts at index 0.\r\n     */\r\n    indexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n     * Adds all the elements of an array separated by the specified separator string.\r\n     * @param separator A string used to separate one element of an array from the next in the\r\n     * resulting String. If omitted, the array elements are separated with a comma.\r\n     */\r\n    join(separator?: string): string;\r\n\r\n    /**\r\n     * Returns the index of the last occurrence of a value in an array.\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n     * search starts at index 0.\r\n     */\r\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n     * The length of the array.\r\n     */\r\n    readonly length: number;\r\n\r\n    /**\r\n     * Calls a defined callback function on each element of an array, and returns an array that\r\n     * contains the results.\r\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    map(callbackfn: (value: number, index: number, array: Uint16Array) => number, thisArg?: any): Uint16Array;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array. The return value of\r\n     * the callback function is the accumulated result, and is provided as an argument in the next\r\n     * call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint16Array) => number): number;\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint16Array) => number, initialValue: number): number;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array. The return value of\r\n     * the callback function is the accumulated result, and is provided as an argument in the next\r\n     * call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint16Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array, in descending order.\r\n     * The return value of the callback function is the accumulated result, and is provided as an\r\n     * argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an\r\n     * argument instead of an array value.\r\n     */\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint16Array) => number): number;\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint16Array) => number, initialValue: number): number;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array, in descending order.\r\n     * The return value of the callback function is the accumulated result, and is provided as an\r\n     * argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint16Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Reverses the elements in an Array.\r\n     */\r\n    reverse(): Uint16Array;\r\n\r\n    /**\r\n     * Sets a value or an array of values.\r\n     * @param array A typed or untyped array of values to set.\r\n     * @param offset The index in the current array at which the values are to be written.\r\n     */\r\n    set(array: ArrayLike<number>, offset?: number): void;\r\n\r\n    /**\r\n     * Returns a section of an array.\r\n     * @param start The beginning of the specified portion of the array.\r\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.\r\n     */\r\n    slice(start?: number, end?: number): Uint16Array;\r\n\r\n    /**\r\n     * Determines whether the specified callback function returns true for any element of an array.\r\n     * @param callbackfn A function that accepts up to three arguments. The some method calls\r\n     * the callbackfn function for each element in the array until the callbackfn returns a value\r\n     * which is coercible to the Boolean value true, or until the end of the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    some(callbackfn: (value: number, index: number, array: Uint16Array) => unknown, thisArg?: any): boolean;\r\n\r\n    /**\r\n     * Sorts an array.\r\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\r\n     * a negative value if first argument is less than second argument, zero if they're equal and a positive\r\n     * value otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\r\n     * ```ts\r\n     * [11,2,22,1].sort((a, b) => a - b)\r\n     * ```\r\n     */\r\n    sort(compareFn?: (a: number, b: number) => number): this;\r\n\r\n    /**\r\n     * Gets a new Uint16Array view of the ArrayBuffer store for this array, referencing the elements\r\n     * at begin, inclusive, up to end, exclusive.\r\n     * @param begin The index of the beginning of the array.\r\n     * @param end The index of the end of the array.\r\n     */\r\n    subarray(begin?: number, end?: number): Uint16Array;\r\n\r\n    /**\r\n     * Converts a number to a string by using the current locale.\r\n     */\r\n    toLocaleString(): string;\r\n\r\n    /**\r\n     * Returns a string representation of an array.\r\n     */\r\n    toString(): string;\r\n\r\n    /** Returns the primitive value of the specified object. */\r\n    valueOf(): Uint16Array;\r\n\r\n    [index: number]: number;\r\n}\r\n\r\ninterface Uint16ArrayConstructor {\r\n    readonly prototype: Uint16Array;\r\n    new(length: number): Uint16Array;\r\n    new(arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): Uint16Array;\r\n    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): Uint16Array;\r\n\r\n    /**\r\n     * The size in bytes of each element in the array.\r\n     */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n     * Returns a new array from a set of elements.\r\n     * @param items A set of elements to include in the new array object.\r\n     */\r\n    of(...items: number[]): Uint16Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     */\r\n    from(arrayLike: ArrayLike<number>): Uint16Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     * @param mapfn A mapping function to call on every element of the array.\r\n     * @param thisArg Value of 'this' used to invoke the mapfn.\r\n     */\r\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint16Array;\r\n\r\n\r\n}\r\ndeclare var Uint16Array: Uint16ArrayConstructor;\r\n/**\r\n * A typed array of 32-bit signed integer values. The contents are initialized to 0. If the\r\n * requested number of bytes could not be allocated an exception is raised.\r\n */\r\ninterface Int32Array {\r\n    /**\r\n     * The size in bytes of each element in the array.\r\n     */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n     * The ArrayBuffer instance referenced by the array.\r\n     */\r\n    readonly buffer: ArrayBufferLike;\r\n\r\n    /**\r\n     * The length in bytes of the array.\r\n     */\r\n    readonly byteLength: number;\r\n\r\n    /**\r\n     * The offset in bytes of the array.\r\n     */\r\n    readonly byteOffset: number;\r\n\r\n    /**\r\n     * Returns the this object after copying a section of the array identified by start and end\r\n     * to the same array starting at position target\r\n     * @param target If target is negative, it is treated as length+target where length is the\r\n     * length of the array.\r\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\r\n     * is treated as length+end.\r\n     * @param end If not specified, length of the this object is used as its default value.\r\n     */\r\n    copyWithin(target: number, start: number, end?: number): this;\r\n\r\n    /**\r\n     * Determines whether all the members of an array satisfy the specified test.\r\n     * @param callbackfn A function that accepts up to three arguments. The every method calls\r\n     * the callbackfn function for each element in the array until the callbackfn returns a value\r\n     * which is coercible to the Boolean value false, or until the end of the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    every(callbackfn: (value: number, index: number, array: Int32Array) => unknown, thisArg?: any): boolean;\r\n\r\n    /**\r\n     * Returns the this object after filling the section identified by start and end with value\r\n     * @param value value to fill array section with\r\n     * @param start index to start filling the array at. If start is negative, it is treated as\r\n     * length+start where length is the length of the array.\r\n     * @param end index to stop filling the array at. If end is negative, it is treated as\r\n     * length+end.\r\n     */\r\n    fill(value: number, start?: number, end?: number): this;\r\n\r\n    /**\r\n     * Returns the elements of an array that meet the condition specified in a callback function.\r\n     * @param callbackfn A function that accepts up to three arguments. The filter method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    filter(callbackfn: (value: number, index: number, array: Int32Array) => any, thisArg?: any): Int32Array;\r\n\r\n    /**\r\n     * Returns the value of the first element in the array where predicate is true, and undefined\r\n     * otherwise.\r\n     * @param predicate find calls predicate once for each element of the array, in ascending\r\n     * order, until it finds one where predicate returns true. If such an element is found, find\r\n     * immediately returns that element value. Otherwise, find returns undefined.\r\n     * @param thisArg If provided, it will be used as the this value for each invocation of\r\n     * predicate. If it is not provided, undefined is used instead.\r\n     */\r\n    find(predicate: (value: number, index: number, obj: Int32Array) => boolean, thisArg?: any): number | undefined;\r\n\r\n    /**\r\n     * Returns the index of the first element in the array where predicate is true, and -1\r\n     * otherwise.\r\n     * @param predicate find calls predicate once for each element of the array, in ascending\r\n     * order, until it finds one where predicate returns true. If such an element is found,\r\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\r\n     * @param thisArg If provided, it will be used as the this value for each invocation of\r\n     * predicate. If it is not provided, undefined is used instead.\r\n     */\r\n    findIndex(predicate: (value: number, index: number, obj: Int32Array) => boolean, thisArg?: any): number;\r\n\r\n    /**\r\n     * Performs the specified action for each element in an array.\r\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    forEach(callbackfn: (value: number, index: number, array: Int32Array) => void, thisArg?: any): void;\r\n\r\n    /**\r\n     * Returns the index of the first occurrence of a value in an array.\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n     *  search starts at index 0.\r\n     */\r\n    indexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n     * Adds all the elements of an array separated by the specified separator string.\r\n     * @param separator A string used to separate one element of an array from the next in the\r\n     * resulting String. If omitted, the array elements are separated with a comma.\r\n     */\r\n    join(separator?: string): string;\r\n\r\n    /**\r\n     * Returns the index of the last occurrence of a value in an array.\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n     * search starts at index 0.\r\n     */\r\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n     * The length of the array.\r\n     */\r\n    readonly length: number;\r\n\r\n    /**\r\n     * Calls a defined callback function on each element of an array, and returns an array that\r\n     * contains the results.\r\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    map(callbackfn: (value: number, index: number, array: Int32Array) => number, thisArg?: any): Int32Array;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array. The return value of\r\n     * the callback function is the accumulated result, and is provided as an argument in the next\r\n     * call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int32Array) => number): number;\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int32Array) => number, initialValue: number): number;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array. The return value of\r\n     * the callback function is the accumulated result, and is provided as an argument in the next\r\n     * call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int32Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array, in descending order.\r\n     * The return value of the callback function is the accumulated result, and is provided as an\r\n     * argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an\r\n     * argument instead of an array value.\r\n     */\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int32Array) => number): number;\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int32Array) => number, initialValue: number): number;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array, in descending order.\r\n     * The return value of the callback function is the accumulated result, and is provided as an\r\n     * argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int32Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Reverses the elements in an Array.\r\n     */\r\n    reverse(): Int32Array;\r\n\r\n    /**\r\n     * Sets a value or an array of values.\r\n     * @param array A typed or untyped array of values to set.\r\n     * @param offset The index in the current array at which the values are to be written.\r\n     */\r\n    set(array: ArrayLike<number>, offset?: number): void;\r\n\r\n    /**\r\n     * Returns a section of an array.\r\n     * @param start The beginning of the specified portion of the array.\r\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.\r\n     */\r\n    slice(start?: number, end?: number): Int32Array;\r\n\r\n    /**\r\n     * Determines whether the specified callback function returns true for any element of an array.\r\n     * @param callbackfn A function that accepts up to three arguments. The some method calls\r\n     * the callbackfn function for each element in the array until the callbackfn returns a value\r\n     * which is coercible to the Boolean value true, or until the end of the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    some(callbackfn: (value: number, index: number, array: Int32Array) => unknown, thisArg?: any): boolean;\r\n\r\n    /**\r\n     * Sorts an array.\r\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\r\n     * a negative value if first argument is less than second argument, zero if they're equal and a positive\r\n     * value otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\r\n     * ```ts\r\n     * [11,2,22,1].sort((a, b) => a - b)\r\n     * ```\r\n     */\r\n    sort(compareFn?: (a: number, b: number) => number): this;\r\n\r\n    /**\r\n     * Gets a new Int32Array view of the ArrayBuffer store for this array, referencing the elements\r\n     * at begin, inclusive, up to end, exclusive.\r\n     * @param begin The index of the beginning of the array.\r\n     * @param end The index of the end of the array.\r\n     */\r\n    subarray(begin?: number, end?: number): Int32Array;\r\n\r\n    /**\r\n     * Converts a number to a string by using the current locale.\r\n     */\r\n    toLocaleString(): string;\r\n\r\n    /**\r\n     * Returns a string representation of an array.\r\n     */\r\n    toString(): string;\r\n\r\n    /** Returns the primitive value of the specified object. */\r\n    valueOf(): Int32Array;\r\n\r\n    [index: number]: number;\r\n}\r\n\r\ninterface Int32ArrayConstructor {\r\n    readonly prototype: Int32Array;\r\n    new(length: number): Int32Array;\r\n    new(arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): Int32Array;\r\n    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): Int32Array;\r\n\r\n    /**\r\n     * The size in bytes of each element in the array.\r\n     */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n     * Returns a new array from a set of elements.\r\n     * @param items A set of elements to include in the new array object.\r\n     */\r\n    of(...items: number[]): Int32Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     */\r\n    from(arrayLike: ArrayLike<number>): Int32Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     * @param mapfn A mapping function to call on every element of the array.\r\n     * @param thisArg Value of 'this' used to invoke the mapfn.\r\n     */\r\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int32Array;\r\n\r\n}\r\ndeclare var Int32Array: Int32ArrayConstructor;\r\n\r\n/**\r\n * A typed array of 32-bit unsigned integer values. The contents are initialized to 0. If the\r\n * requested number of bytes could not be allocated an exception is raised.\r\n */\r\ninterface Uint32Array {\r\n    /**\r\n     * The size in bytes of each element in the array.\r\n     */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n     * The ArrayBuffer instance referenced by the array.\r\n     */\r\n    readonly buffer: ArrayBufferLike;\r\n\r\n    /**\r\n     * The length in bytes of the array.\r\n     */\r\n    readonly byteLength: number;\r\n\r\n    /**\r\n     * The offset in bytes of the array.\r\n     */\r\n    readonly byteOffset: number;\r\n\r\n    /**\r\n     * Returns the this object after copying a section of the array identified by start and end\r\n     * to the same array starting at position target\r\n     * @param target If target is negative, it is treated as length+target where length is the\r\n     * length of the array.\r\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\r\n     * is treated as length+end.\r\n     * @param end If not specified, length of the this object is used as its default value.\r\n     */\r\n    copyWithin(target: number, start: number, end?: number): this;\r\n\r\n    /**\r\n     * Determines whether all the members of an array satisfy the specified test.\r\n     * @param callbackfn A function that accepts up to three arguments. The every method calls\r\n     * the callbackfn function for each element in the array until the callbackfn returns a value\r\n     * which is coercible to the Boolean value false, or until the end of the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    every(callbackfn: (value: number, index: number, array: Uint32Array) => unknown, thisArg?: any): boolean;\r\n\r\n    /**\r\n     * Returns the this object after filling the section identified by start and end with value\r\n     * @param value value to fill array section with\r\n     * @param start index to start filling the array at. If start is negative, it is treated as\r\n     * length+start where length is the length of the array.\r\n     * @param end index to stop filling the array at. If end is negative, it is treated as\r\n     * length+end.\r\n     */\r\n    fill(value: number, start?: number, end?: number): this;\r\n\r\n    /**\r\n     * Returns the elements of an array that meet the condition specified in a callback function.\r\n     * @param callbackfn A function that accepts up to three arguments. The filter method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    filter(callbackfn: (value: number, index: number, array: Uint32Array) => any, thisArg?: any): Uint32Array;\r\n\r\n    /**\r\n     * Returns the value of the first element in the array where predicate is true, and undefined\r\n     * otherwise.\r\n     * @param predicate find calls predicate once for each element of the array, in ascending\r\n     * order, until it finds one where predicate returns true. If such an element is found, find\r\n     * immediately returns that element value. Otherwise, find returns undefined.\r\n     * @param thisArg If provided, it will be used as the this value for each invocation of\r\n     * predicate. If it is not provided, undefined is used instead.\r\n     */\r\n    find(predicate: (value: number, index: number, obj: Uint32Array) => boolean, thisArg?: any): number | undefined;\r\n\r\n    /**\r\n     * Returns the index of the first element in the array where predicate is true, and -1\r\n     * otherwise.\r\n     * @param predicate find calls predicate once for each element of the array, in ascending\r\n     * order, until it finds one where predicate returns true. If such an element is found,\r\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\r\n     * @param thisArg If provided, it will be used as the this value for each invocation of\r\n     * predicate. If it is not provided, undefined is used instead.\r\n     */\r\n    findIndex(predicate: (value: number, index: number, obj: Uint32Array) => boolean, thisArg?: any): number;\r\n\r\n    /**\r\n     * Performs the specified action for each element in an array.\r\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    forEach(callbackfn: (value: number, index: number, array: Uint32Array) => void, thisArg?: any): void;\r\n    /**\r\n     * Returns the index of the first occurrence of a value in an array.\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n     *  search starts at index 0.\r\n     */\r\n    indexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n     * Adds all the elements of an array separated by the specified separator string.\r\n     * @param separator A string used to separate one element of an array from the next in the\r\n     * resulting String. If omitted, the array elements are separated with a comma.\r\n     */\r\n    join(separator?: string): string;\r\n\r\n    /**\r\n     * Returns the index of the last occurrence of a value in an array.\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n     * search starts at index 0.\r\n     */\r\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n     * The length of the array.\r\n     */\r\n    readonly length: number;\r\n\r\n    /**\r\n     * Calls a defined callback function on each element of an array, and returns an array that\r\n     * contains the results.\r\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    map(callbackfn: (value: number, index: number, array: Uint32Array) => number, thisArg?: any): Uint32Array;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array. The return value of\r\n     * the callback function is the accumulated result, and is provided as an argument in the next\r\n     * call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint32Array) => number): number;\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint32Array) => number, initialValue: number): number;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array. The return value of\r\n     * the callback function is the accumulated result, and is provided as an argument in the next\r\n     * call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint32Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array, in descending order.\r\n     * The return value of the callback function is the accumulated result, and is provided as an\r\n     * argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an\r\n     * argument instead of an array value.\r\n     */\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint32Array) => number): number;\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint32Array) => number, initialValue: number): number;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array, in descending order.\r\n     * The return value of the callback function is the accumulated result, and is provided as an\r\n     * argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint32Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Reverses the elements in an Array.\r\n     */\r\n    reverse(): Uint32Array;\r\n\r\n    /**\r\n     * Sets a value or an array of values.\r\n     * @param array A typed or untyped array of values to set.\r\n     * @param offset The index in the current array at which the values are to be written.\r\n     */\r\n    set(array: ArrayLike<number>, offset?: number): void;\r\n\r\n    /**\r\n     * Returns a section of an array.\r\n     * @param start The beginning of the specified portion of the array.\r\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.\r\n     */\r\n    slice(start?: number, end?: number): Uint32Array;\r\n\r\n    /**\r\n     * Determines whether the specified callback function returns true for any element of an array.\r\n     * @param callbackfn A function that accepts up to three arguments. The some method calls\r\n     * the callbackfn function for each element in the array until the callbackfn returns a value\r\n     * which is coercible to the Boolean value true, or until the end of the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    some(callbackfn: (value: number, index: number, array: Uint32Array) => unknown, thisArg?: any): boolean;\r\n\r\n    /**\r\n     * Sorts an array.\r\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\r\n     * a negative value if first argument is less than second argument, zero if they're equal and a positive\r\n     * value otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\r\n     * ```ts\r\n     * [11,2,22,1].sort((a, b) => a - b)\r\n     * ```\r\n     */\r\n    sort(compareFn?: (a: number, b: number) => number): this;\r\n\r\n    /**\r\n     * Gets a new Uint32Array view of the ArrayBuffer store for this array, referencing the elements\r\n     * at begin, inclusive, up to end, exclusive.\r\n     * @param begin The index of the beginning of the array.\r\n     * @param end The index of the end of the array.\r\n     */\r\n    subarray(begin?: number, end?: number): Uint32Array;\r\n\r\n    /**\r\n     * Converts a number to a string by using the current locale.\r\n     */\r\n    toLocaleString(): string;\r\n\r\n    /**\r\n     * Returns a string representation of an array.\r\n     */\r\n    toString(): string;\r\n\r\n    /** Returns the primitive value of the specified object. */\r\n    valueOf(): Uint32Array;\r\n\r\n    [index: number]: number;\r\n}\r\n\r\ninterface Uint32ArrayConstructor {\r\n    readonly prototype: Uint32Array;\r\n    new(length: number): Uint32Array;\r\n    new(arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): Uint32Array;\r\n    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): Uint32Array;\r\n\r\n    /**\r\n     * The size in bytes of each element in the array.\r\n     */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n     * Returns a new array from a set of elements.\r\n     * @param items A set of elements to include in the new array object.\r\n     */\r\n    of(...items: number[]): Uint32Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     */\r\n    from(arrayLike: ArrayLike<number>): Uint32Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     * @param mapfn A mapping function to call on every element of the array.\r\n     * @param thisArg Value of 'this' used to invoke the mapfn.\r\n     */\r\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint32Array;\r\n\r\n}\r\ndeclare var Uint32Array: Uint32ArrayConstructor;\r\n\r\n/**\r\n * A typed array of 32-bit float values. The contents are initialized to 0. If the requested number\r\n * of bytes could not be allocated an exception is raised.\r\n */\r\ninterface Float32Array {\r\n    /**\r\n     * The size in bytes of each element in the array.\r\n     */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n     * The ArrayBuffer instance referenced by the array.\r\n     */\r\n    readonly buffer: ArrayBufferLike;\r\n\r\n    /**\r\n     * The length in bytes of the array.\r\n     */\r\n    readonly byteLength: number;\r\n\r\n    /**\r\n     * The offset in bytes of the array.\r\n     */\r\n    readonly byteOffset: number;\r\n\r\n    /**\r\n     * Returns the this object after copying a section of the array identified by start and end\r\n     * to the same array starting at position target\r\n     * @param target If target is negative, it is treated as length+target where length is the\r\n     * length of the array.\r\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\r\n     * is treated as length+end.\r\n     * @param end If not specified, length of the this object is used as its default value.\r\n     */\r\n    copyWithin(target: number, start: number, end?: number): this;\r\n\r\n    /**\r\n     * Determines whether all the members of an array satisfy the specified test.\r\n     * @param callbackfn A function that accepts up to three arguments. The every method calls\r\n     * the callbackfn function for each element in the array until the callbackfn returns a value\r\n     * which is coercible to the Boolean value false, or until the end of the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    every(callbackfn: (value: number, index: number, array: Float32Array) => unknown, thisArg?: any): boolean;\r\n\r\n    /**\r\n     * Returns the this object after filling the section identified by start and end with value\r\n     * @param value value to fill array section with\r\n     * @param start index to start filling the array at. If start is negative, it is treated as\r\n     * length+start where length is the length of the array.\r\n     * @param end index to stop filling the array at. If end is negative, it is treated as\r\n     * length+end.\r\n     */\r\n    fill(value: number, start?: number, end?: number): this;\r\n\r\n    /**\r\n     * Returns the elements of an array that meet the condition specified in a callback function.\r\n     * @param callbackfn A function that accepts up to three arguments. The filter method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    filter(callbackfn: (value: number, index: number, array: Float32Array) => any, thisArg?: any): Float32Array;\r\n\r\n    /**\r\n     * Returns the value of the first element in the array where predicate is true, and undefined\r\n     * otherwise.\r\n     * @param predicate find calls predicate once for each element of the array, in ascending\r\n     * order, until it finds one where predicate returns true. If such an element is found, find\r\n     * immediately returns that element value. Otherwise, find returns undefined.\r\n     * @param thisArg If provided, it will be used as the this value for each invocation of\r\n     * predicate. If it is not provided, undefined is used instead.\r\n     */\r\n    find(predicate: (value: number, index: number, obj: Float32Array) => boolean, thisArg?: any): number | undefined;\r\n\r\n    /**\r\n     * Returns the index of the first element in the array where predicate is true, and -1\r\n     * otherwise.\r\n     * @param predicate find calls predicate once for each element of the array, in ascending\r\n     * order, until it finds one where predicate returns true. If such an element is found,\r\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\r\n     * @param thisArg If provided, it will be used as the this value for each invocation of\r\n     * predicate. If it is not provided, undefined is used instead.\r\n     */\r\n    findIndex(predicate: (value: number, index: number, obj: Float32Array) => boolean, thisArg?: any): number;\r\n\r\n    /**\r\n     * Performs the specified action for each element in an array.\r\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    forEach(callbackfn: (value: number, index: number, array: Float32Array) => void, thisArg?: any): void;\r\n\r\n    /**\r\n     * Returns the index of the first occurrence of a value in an array.\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n     *  search starts at index 0.\r\n     */\r\n    indexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n     * Adds all the elements of an array separated by the specified separator string.\r\n     * @param separator A string used to separate one element of an array from the next in the\r\n     * resulting String. If omitted, the array elements are separated with a comma.\r\n     */\r\n    join(separator?: string): string;\r\n\r\n    /**\r\n     * Returns the index of the last occurrence of a value in an array.\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n     * search starts at index 0.\r\n     */\r\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n     * The length of the array.\r\n     */\r\n    readonly length: number;\r\n\r\n    /**\r\n     * Calls a defined callback function on each element of an array, and returns an array that\r\n     * contains the results.\r\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    map(callbackfn: (value: number, index: number, array: Float32Array) => number, thisArg?: any): Float32Array;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array. The return value of\r\n     * the callback function is the accumulated result, and is provided as an argument in the next\r\n     * call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float32Array) => number): number;\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float32Array) => number, initialValue: number): number;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array. The return value of\r\n     * the callback function is the accumulated result, and is provided as an argument in the next\r\n     * call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float32Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array, in descending order.\r\n     * The return value of the callback function is the accumulated result, and is provided as an\r\n     * argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an\r\n     * argument instead of an array value.\r\n     */\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float32Array) => number): number;\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float32Array) => number, initialValue: number): number;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array, in descending order.\r\n     * The return value of the callback function is the accumulated result, and is provided as an\r\n     * argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float32Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Reverses the elements in an Array.\r\n     */\r\n    reverse(): Float32Array;\r\n\r\n    /**\r\n     * Sets a value or an array of values.\r\n     * @param array A typed or untyped array of values to set.\r\n     * @param offset The index in the current array at which the values are to be written.\r\n     */\r\n    set(array: ArrayLike<number>, offset?: number): void;\r\n\r\n    /**\r\n     * Returns a section of an array.\r\n     * @param start The beginning of the specified portion of the array.\r\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.\r\n     */\r\n    slice(start?: number, end?: number): Float32Array;\r\n\r\n    /**\r\n     * Determines whether the specified callback function returns true for any element of an array.\r\n     * @param callbackfn A function that accepts up to three arguments. The some method calls\r\n     * the callbackfn function for each element in the array until the callbackfn returns a value\r\n     * which is coercible to the Boolean value true, or until the end of the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    some(callbackfn: (value: number, index: number, array: Float32Array) => unknown, thisArg?: any): boolean;\r\n\r\n    /**\r\n     * Sorts an array.\r\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\r\n     * a negative value if first argument is less than second argument, zero if they're equal and a positive\r\n     * value otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\r\n     * ```ts\r\n     * [11,2,22,1].sort((a, b) => a - b)\r\n     * ```\r\n     */\r\n    sort(compareFn?: (a: number, b: number) => number): this;\r\n\r\n    /**\r\n     * Gets a new Float32Array view of the ArrayBuffer store for this array, referencing the elements\r\n     * at begin, inclusive, up to end, exclusive.\r\n     * @param begin The index of the beginning of the array.\r\n     * @param end The index of the end of the array.\r\n     */\r\n    subarray(begin?: number, end?: number): Float32Array;\r\n\r\n    /**\r\n     * Converts a number to a string by using the current locale.\r\n     */\r\n    toLocaleString(): string;\r\n\r\n    /**\r\n     * Returns a string representation of an array.\r\n     */\r\n    toString(): string;\r\n\r\n    /** Returns the primitive value of the specified object. */\r\n    valueOf(): Float32Array;\r\n\r\n    [index: number]: number;\r\n}\r\n\r\ninterface Float32ArrayConstructor {\r\n    readonly prototype: Float32Array;\r\n    new(length: number): Float32Array;\r\n    new(arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): Float32Array;\r\n    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): Float32Array;\r\n\r\n    /**\r\n     * The size in bytes of each element in the array.\r\n     */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n     * Returns a new array from a set of elements.\r\n     * @param items A set of elements to include in the new array object.\r\n     */\r\n    of(...items: number[]): Float32Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     */\r\n    from(arrayLike: ArrayLike<number>): Float32Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     * @param mapfn A mapping function to call on every element of the array.\r\n     * @param thisArg Value of 'this' used to invoke the mapfn.\r\n     */\r\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float32Array;\r\n\r\n\r\n}\r\ndeclare var Float32Array: Float32ArrayConstructor;\r\n\r\n/**\r\n * A typed array of 64-bit float values. The contents are initialized to 0. If the requested\r\n * number of bytes could not be allocated an exception is raised.\r\n */\r\ninterface Float64Array {\r\n    /**\r\n     * The size in bytes of each element in the array.\r\n     */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n     * The ArrayBuffer instance referenced by the array.\r\n     */\r\n    readonly buffer: ArrayBufferLike;\r\n\r\n    /**\r\n     * The length in bytes of the array.\r\n     */\r\n    readonly byteLength: number;\r\n\r\n    /**\r\n     * The offset in bytes of the array.\r\n     */\r\n    readonly byteOffset: number;\r\n\r\n    /**\r\n     * Returns the this object after copying a section of the array identified by start and end\r\n     * to the same array starting at position target\r\n     * @param target If target is negative, it is treated as length+target where length is the\r\n     * length of the array.\r\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\r\n     * is treated as length+end.\r\n     * @param end If not specified, length of the this object is used as its default value.\r\n     */\r\n    copyWithin(target: number, start: number, end?: number): this;\r\n\r\n    /**\r\n     * Determines whether all the members of an array satisfy the specified test.\r\n     * @param callbackfn A function that accepts up to three arguments. The every method calls\r\n     * the callbackfn function for each element in the array until the callbackfn returns a value\r\n     * which is coercible to the Boolean value false, or until the end of the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    every(callbackfn: (value: number, index: number, array: Float64Array) => unknown, thisArg?: any): boolean;\r\n\r\n    /**\r\n     * Returns the this object after filling the section identified by start and end with value\r\n     * @param value value to fill array section with\r\n     * @param start index to start filling the array at. If start is negative, it is treated as\r\n     * length+start where length is the length of the array.\r\n     * @param end index to stop filling the array at. If end is negative, it is treated as\r\n     * length+end.\r\n     */\r\n    fill(value: number, start?: number, end?: number): this;\r\n\r\n    /**\r\n     * Returns the elements of an array that meet the condition specified in a callback function.\r\n     * @param callbackfn A function that accepts up to three arguments. The filter method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    filter(callbackfn: (value: number, index: number, array: Float64Array) => any, thisArg?: any): Float64Array;\r\n\r\n    /**\r\n     * Returns the value of the first element in the array where predicate is true, and undefined\r\n     * otherwise.\r\n     * @param predicate find calls predicate once for each element of the array, in ascending\r\n     * order, until it finds one where predicate returns true. If such an element is found, find\r\n     * immediately returns that element value. Otherwise, find returns undefined.\r\n     * @param thisArg If provided, it will be used as the this value for each invocation of\r\n     * predicate. If it is not provided, undefined is used instead.\r\n     */\r\n    find(predicate: (value: number, index: number, obj: Float64Array) => boolean, thisArg?: any): number | undefined;\r\n\r\n    /**\r\n     * Returns the index of the first element in the array where predicate is true, and -1\r\n     * otherwise.\r\n     * @param predicate find calls predicate once for each element of the array, in ascending\r\n     * order, until it finds one where predicate returns true. If such an element is found,\r\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\r\n     * @param thisArg If provided, it will be used as the this value for each invocation of\r\n     * predicate. If it is not provided, undefined is used instead.\r\n     */\r\n    findIndex(predicate: (value: number, index: number, obj: Float64Array) => boolean, thisArg?: any): number;\r\n\r\n    /**\r\n     * Performs the specified action for each element in an array.\r\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    forEach(callbackfn: (value: number, index: number, array: Float64Array) => void, thisArg?: any): void;\r\n\r\n    /**\r\n     * Returns the index of the first occurrence of a value in an array.\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n     *  search starts at index 0.\r\n     */\r\n    indexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n     * Adds all the elements of an array separated by the specified separator string.\r\n     * @param separator A string used to separate one element of an array from the next in the\r\n     * resulting String. If omitted, the array elements are separated with a comma.\r\n     */\r\n    join(separator?: string): string;\r\n\r\n    /**\r\n     * Returns the index of the last occurrence of a value in an array.\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n     * search starts at index 0.\r\n     */\r\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n     * The length of the array.\r\n     */\r\n    readonly length: number;\r\n\r\n    /**\r\n     * Calls a defined callback function on each element of an array, and returns an array that\r\n     * contains the results.\r\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    map(callbackfn: (value: number, index: number, array: Float64Array) => number, thisArg?: any): Float64Array;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array. The return value of\r\n     * the callback function is the accumulated result, and is provided as an argument in the next\r\n     * call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float64Array) => number): number;\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float64Array) => number, initialValue: number): number;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array. The return value of\r\n     * the callback function is the accumulated result, and is provided as an argument in the next\r\n     * call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float64Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array, in descending order.\r\n     * The return value of the callback function is the accumulated result, and is provided as an\r\n     * argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an\r\n     * argument instead of an array value.\r\n     */\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float64Array) => number): number;\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float64Array) => number, initialValue: number): number;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array, in descending order.\r\n     * The return value of the callback function is the accumulated result, and is provided as an\r\n     * argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float64Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Reverses the elements in an Array.\r\n     */\r\n    reverse(): Float64Array;\r\n\r\n    /**\r\n     * Sets a value or an array of values.\r\n     * @param array A typed or untyped array of values to set.\r\n     * @param offset The index in the current array at which the values are to be written.\r\n     */\r\n    set(array: ArrayLike<number>, offset?: number): void;\r\n\r\n    /**\r\n     * Returns a section of an array.\r\n     * @param start The beginning of the specified portion of the array.\r\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.\r\n     */\r\n    slice(start?: number, end?: number): Float64Array;\r\n\r\n    /**\r\n     * Determines whether the specified callback function returns true for any element of an array.\r\n     * @param callbackfn A function that accepts up to three arguments. The some method calls\r\n     * the callbackfn function for each element in the array until the callbackfn returns a value\r\n     * which is coercible to the Boolean value true, or until the end of the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    some(callbackfn: (value: number, index: number, array: Float64Array) => unknown, thisArg?: any): boolean;\r\n\r\n    /**\r\n     * Sorts an array.\r\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\r\n     * a negative value if first argument is less than second argument, zero if they're equal and a positive\r\n     * value otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\r\n     * ```ts\r\n     * [11,2,22,1].sort((a, b) => a - b)\r\n     * ```\r\n     */\r\n    sort(compareFn?: (a: number, b: number) => number): this;\r\n\r\n    /**\r\n     * at begin, inclusive, up to end, exclusive.\r\n     * @param begin The index of the beginning of the array.\r\n     * @param end The index of the end of the array.\r\n     */\r\n    subarray(begin?: number, end?: number): Float64Array;\r\n\r\n    toString(): string;\r\n\r\n    /** Returns the primitive value of the specified object. */\r\n    valueOf(): Float64Array;\r\n\r\n    [index: number]: number;\r\n}\r\n\r\ninterface Float64ArrayConstructor {\r\n    readonly prototype: Float64Array;\r\n    new(length: number): Float64Array;\r\n    new(arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): Float64Array;\r\n    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): Float64Array;\r\n\r\n    /**\r\n     * The size in bytes of each element in the array.\r\n     */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n     * Returns a new array from a set of elements.\r\n     * @param items A set of elements to include in the new array object.\r\n     */\r\n    of(...items: number[]): Float64Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     */\r\n    from(arrayLike: ArrayLike<number>): Float64Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     * @param mapfn A mapping function to call on every element of the array.\r\n     * @param thisArg Value of 'this' used to invoke the mapfn.\r\n     */\r\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float64Array;\r\n\r\n}\r\ndeclare var Float64Array: Float64ArrayConstructor;\r\n\r\n/////////////////////////////\r\n/// ECMAScript Internationalization API\r\n/////////////////////////////\r\n\r\ndeclare namespace Intl {\r\n    interface CollatorOptions {\r\n        usage?: string;\r\n        localeMatcher?: string;\r\n        numeric?: boolean;\r\n        caseFirst?: string;\r\n        sensitivity?: string;\r\n        ignorePunctuation?: boolean;\r\n    }\r\n\r\n    interface ResolvedCollatorOptions {\r\n        locale: string;\r\n        usage: string;\r\n        sensitivity: string;\r\n        ignorePunctuation: boolean;\r\n        collation: string;\r\n        caseFirst: string;\r\n        numeric: boolean;\r\n    }\r\n\r\n    interface Collator {\r\n        compare(x: string, y: string): number;\r\n        resolvedOptions(): ResolvedCollatorOptions;\r\n    }\r\n    var Collator: {\r\n        new(locales?: string | string[], options?: CollatorOptions): Collator;\r\n        (locales?: string | string[], options?: CollatorOptions): Collator;\r\n        supportedLocalesOf(locales: string | string[], options?: CollatorOptions): string[];\r\n    };\r\n\r\n    interface NumberFormatOptions {\r\n        localeMatcher?: string;\r\n        style?: string;\r\n        currency?: string;\r\n        currencyDisplay?: string;\r\n        useGrouping?: boolean;\r\n        minimumIntegerDigits?: number;\r\n        minimumFractionDigits?: number;\r\n        maximumFractionDigits?: number;\r\n        minimumSignificantDigits?: number;\r\n        maximumSignificantDigits?: number;\r\n    }\r\n\r\n    interface ResolvedNumberFormatOptions {\r\n        locale: string;\r\n        numberingSystem: string;\r\n        style: string;\r\n        currency?: string;\r\n        currencyDisplay?: string;\r\n        minimumIntegerDigits: number;\r\n        minimumFractionDigits: number;\r\n        maximumFractionDigits: number;\r\n        minimumSignificantDigits?: number;\r\n        maximumSignificantDigits?: number;\r\n        useGrouping: boolean;\r\n    }\r\n\r\n    interface NumberFormat {\r\n        format(value: number): string;\r\n        resolvedOptions(): ResolvedNumberFormatOptions;\r\n    }\r\n    var NumberFormat: {\r\n        new(locales?: string | string[], options?: NumberFormatOptions): NumberFormat;\r\n        (locales?: string | string[], options?: NumberFormatOptions): NumberFormat;\r\n        supportedLocalesOf(locales: string | string[], options?: NumberFormatOptions): string[];\r\n    };\r\n\r\n    interface DateTimeFormatOptions {\r\n        localeMatcher?: string;\r\n        weekday?: string;\r\n        era?: string;\r\n        year?: string;\r\n        month?: string;\r\n        day?: string;\r\n        hour?: string;\r\n        minute?: string;\r\n        second?: string;\r\n        timeZoneName?: string;\r\n        formatMatcher?: string;\r\n        hour12?: boolean;\r\n        timeZone?: string;\r\n    }\r\n\r\n    interface ResolvedDateTimeFormatOptions {\r\n        locale: string;\r\n        calendar: string;\r\n        numberingSystem: string;\r\n        timeZone: string;\r\n        hour12?: boolean;\r\n        weekday?: string;\r\n        era?: string;\r\n        year?: string;\r\n        month?: string;\r\n        day?: string;\r\n        hour?: string;\r\n        minute?: string;\r\n        second?: string;\r\n        timeZoneName?: string;\r\n    }\r\n\r\n    interface DateTimeFormat {\r\n        format(date?: Date | number): string;\r\n        resolvedOptions(): ResolvedDateTimeFormatOptions;\r\n    }\r\n    var DateTimeFormat: {\r\n        new(locales?: string | string[], options?: DateTimeFormatOptions): DateTimeFormat;\r\n        (locales?: string | string[], options?: DateTimeFormatOptions): DateTimeFormat;\r\n        supportedLocalesOf(locales: string | string[], options?: DateTimeFormatOptions): string[];\r\n    };\r\n}\r\n\r\ninterface String {\r\n    /**\r\n     * Determines whether two strings are equivalent in the current or specified locale.\r\n     * @param that String to compare to target string\r\n     * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\r\n     * @param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.\r\n     */\r\n    localeCompare(that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;\r\n}\r\n\r\ninterface Number {\r\n    /**\r\n     * Converts a number to a string by using the current or specified locale.\r\n     * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\r\n     * @param options An object that contains one or more properties that specify comparison options.\r\n     */\r\n    toLocaleString(locales?: string | string[], options?: Intl.NumberFormatOptions): string;\r\n}\r\n\r\ninterface Date {\r\n    /**\r\n     * Converts a date and time to a string by using the current or specified locale.\r\n     * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\r\n     * @param options An object that contains one or more properties that specify comparison options.\r\n     */\r\n    toLocaleString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;\r\n    /**\r\n     * Converts a date to a string by using the current or specified locale.\r\n     * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\r\n     * @param options An object that contains one or more properties that specify comparison options.\r\n     */\r\n    toLocaleDateString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;\r\n\r\n    /**\r\n     * Converts a time to a string by using the current or specified locale.\r\n     * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\r\n     * @param options An object that contains one or more properties that specify comparison options.\r\n     */\r\n    toLocaleTimeString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;\r\n}\r\n"},"./node_modules/raw-loader/dist/cjs.js!./runtime-repl/_common/_api/typings/node/globals.d.ts":function(e,n,t){"use strict";t.r(n),n.default='// This needs to be global to avoid TS2403 in case lib.dom.d.ts is present in the same build\ninterface Console {\n    /**\n     * The `console.debug()` function is an alias for {@link console.log()}.\n     */\n    debug(message?: any, ...optionalParams: any[]): void;\n    /**\n     * The {@link console.info()} function is an alias for {@link console.log()}.\n     */\n    info(message?: any, ...optionalParams: any[]): void;\n    /**\n     * Prints to `stdout` with newline.\n     */\n    log(message?: any, ...optionalParams: any[]): void;\n    /**\n     * The {@link console.warn()} function is an alias for {@link console.error()}.\n     */\n    warn(message?: any, ...optionalParams: any[]): void;\n    /**\n     * Prints to `stderr` with newline.\n     */\n    error(message?: any, ...optionalParams: any[]): void;\n    /**\n     * Clears the console.\n     */\n    clear(): void;\n}\n\ninterface Error {\n    stack?: string;\n}\n\n// Declare "static" methods in Error\ninterface ErrorConstructor {\n    /** Create .stack property on a target object */\n    captureStackTrace(targetObject: Object, constructorOpt?: Function): void;\n\n    /**\n     * Optional override for formatting stack traces\n     *\n     * @see https://github.com/v8/v8/wiki/Stack%20Trace%20API#customizing-stack-traces\n     */\n    prepareStackTrace?: (err: Error, stackTraces: NodeJS.CallSite[]) => any;\n\n    stackTraceLimit: number;\n}\n\ninterface SymbolConstructor {\n    readonly observable: symbol;\n}\n\n// Node.js ESNEXT support\ninterface String {\n    /** Removes whitespace from the left end of a string. */\n    trimLeft(): string;\n    /** Removes whitespace from the right end of a string. */\n    trimRight(): string;\n}\n\ninterface ImportMeta {\n    url: string;\n}\n\n/*-----------------------------------------------*\n *                                               *\n *                   GLOBAL                      *\n *                                               *\n ------------------------------------------------*/\ndeclare var process: NodeJS.Process;\ndeclare var global: NodeJS.Global;\ndeclare var console: Console;\n\ndeclare var __filename: string;\ndeclare var __dirname: string;\n\ndeclare function setTimeout(callback: (...args: any[]) => void, ms: number, ...args: any[]): NodeJS.Timeout;\ndeclare namespace setTimeout {\n    function __promisify__(ms: number): Promise<void>;\n    function __promisify__<T>(ms: number, value: T): Promise<T>;\n}\ndeclare function clearTimeout(timeoutId: NodeJS.Timeout): void;\ndeclare function setInterval(callback: (...args: any[]) => void, ms: number, ...args: any[]): NodeJS.Timeout;\ndeclare function clearInterval(intervalId: NodeJS.Timeout): void;\ndeclare function setImmediate(callback: (...args: any[]) => void, ...args: any[]): NodeJS.Immediate;\ndeclare namespace setImmediate {\n    function __promisify__(): Promise<void>;\n    function __promisify__<T>(value: T): Promise<T>;\n}\ndeclare function clearImmediate(immediateId: NodeJS.Immediate): void;\n\ndeclare function queueMicrotask(callback: () => void): void;\n\n// TODO: change to `type NodeRequireFunction = (id: string) => any;` in next mayor version.\ninterface NodeRequireFunction {\n    /* tslint:disable-next-line:callable-types */\n    (id: string): any;\n}\n\ninterface NodeRequire extends NodeRequireFunction {\n    resolve: RequireResolve;\n    cache: any;\n    /**\n     * @deprecated\n     */\n    extensions: NodeExtensions;\n    main: NodeModule | undefined;\n}\n\ninterface RequireResolve {\n    (id: string, options?: { paths?: string[]; }): string;\n    paths(request: string): string[] | null;\n}\n\ninterface NodeExtensions {\n    \'.js\': (m: NodeModule, filename: string) => any;\n    \'.json\': (m: NodeModule, filename: string) => any;\n    \'.node\': (m: NodeModule, filename: string) => any;\n    [ext: string]: (m: NodeModule, filename: string) => any;\n}\n\ndeclare var require: NodeRequire;\n\ninterface NodeModule {\n    exports: any;\n    require: NodeRequireFunction;\n    id: string;\n    filename: string;\n    loaded: boolean;\n    parent: NodeModule | null;\n    children: NodeModule[];\n    paths: string[];\n}\n\ndeclare var module: NodeModule;\n\n// Same as module.exports\ndeclare var exports: any;\n\n// Buffer class\ntype BufferEncoding = "ascii" | "utf8" | "utf-8" | "utf16le" | "ucs2" | "ucs-2" | "base64" | "latin1" | "binary" | "hex";\n\ninterface Buffer {\n    constructor: typeof Buffer;\n}\n\n/**\n * Raw data is stored in instances of the Buffer class.\n * A Buffer is similar to an array of integers but corresponds to a raw memory allocation outside the V8 heap.  A Buffer cannot be resized.\n * Valid string encodings: \'ascii\'|\'utf8\'|\'utf16le\'|\'ucs2\'(alias of \'utf16le\')|\'base64\'|\'binary\'(deprecated)|\'hex\'\n */\ndeclare class Buffer extends Uint8Array {\n    /**\n     * Allocates a new buffer containing the given {str}.\n     *\n     * @param str String to store in buffer.\n     * @param encoding encoding to use, optional.  Default is \'utf8\'\n     * @deprecated since v10.0.0 - Use `Buffer.from(string[, encoding])` instead.\n     */\n    constructor(str: string, encoding?: BufferEncoding);\n    /**\n     * Allocates a new buffer of {size} octets.\n     *\n     * @param size count of octets to allocate.\n     * @deprecated since v10.0.0 - Use `Buffer.alloc()` instead (also see `Buffer.allocUnsafe()`).\n     */\n    constructor(size: number);\n    /**\n     * Allocates a new buffer containing the given {array} of octets.\n     *\n     * @param array The octets to store.\n     * @deprecated since v10.0.0 - Use `Buffer.from(array)` instead.\n     */\n    constructor(array: Uint8Array);\n    /**\n     * Produces a Buffer backed by the same allocated memory as\n     * the given {ArrayBuffer}/{SharedArrayBuffer}.\n     *\n     *\n     * @param arrayBuffer The ArrayBuffer with which to share memory.\n     * @deprecated since v10.0.0 - Use `Buffer.from(arrayBuffer[, byteOffset[, length]])` instead.\n     */\n    constructor(arrayBuffer: ArrayBuffer | SharedArrayBuffer);\n    /**\n     * Allocates a new buffer containing the given {array} of octets.\n     *\n     * @param array The octets to store.\n     * @deprecated since v10.0.0 - Use `Buffer.from(array)` instead.\n     */\n    constructor(array: any[]);\n    /**\n     * Copies the passed {buffer} data onto a new {Buffer} instance.\n     *\n     * @param buffer The buffer to copy.\n     * @deprecated since v10.0.0 - Use `Buffer.from(buffer)` instead.\n     */\n    constructor(buffer: Buffer);\n    /**\n     * When passed a reference to the .buffer property of a TypedArray instance,\n     * the newly created Buffer will share the same allocated memory as the TypedArray.\n     * The optional {byteOffset} and {length} arguments specify a memory range\n     * within the {arrayBuffer} that will be shared by the Buffer.\n     *\n     * @param arrayBuffer The .buffer property of any TypedArray or a new ArrayBuffer()\n     */\n    static from(arrayBuffer: ArrayBuffer | SharedArrayBuffer, byteOffset?: number, length?: number): Buffer;\n    /**\n     * Creates a new Buffer using the passed {data}\n     * @param data data to create a new Buffer\n     */\n    static from(data: number[]): Buffer;\n    static from(data: Uint8Array): Buffer;\n    /**\n     * Creates a new Buffer containing the given JavaScript string {str}.\n     * If provided, the {encoding} parameter identifies the character encoding.\n     * If not provided, {encoding} defaults to \'utf8\'.\n     */\n    static from(str: string, encoding?: BufferEncoding): Buffer;\n    /**\n     * Creates a new Buffer using the passed {data}\n     * @param values to create a new Buffer\n     */\n    static of(...items: number[]): Buffer;\n    /**\n     * Returns true if {obj} is a Buffer\n     *\n     * @param obj object to test.\n     */\n    static isBuffer(obj: any): obj is Buffer;\n    /**\n     * Returns true if {encoding} is a valid encoding argument.\n     * Valid string encodings in Node 0.12: \'ascii\'|\'utf8\'|\'utf16le\'|\'ucs2\'(alias of \'utf16le\')|\'base64\'|\'binary\'(deprecated)|\'hex\'\n     *\n     * @param encoding string to test.\n     */\n    static isEncoding(encoding: string): encoding is BufferEncoding;\n    /**\n     * Gives the actual byte length of a string. encoding defaults to \'utf8\'.\n     * This is not the same as String.prototype.length since that returns the number of characters in a string.\n     *\n     * @param string string to test.\n     * @param encoding encoding used to evaluate (defaults to \'utf8\')\n     */\n    static byteLength(\n        string: string | NodeJS.ArrayBufferView | ArrayBuffer | SharedArrayBuffer,\n        encoding?: BufferEncoding\n    ): number;\n    /**\n     * Returns a buffer which is the result of concatenating all the buffers in the list together.\n     *\n     * If the list has no items, or if the totalLength is 0, then it returns a zero-length buffer.\n     * If the list has exactly one item, then the first item of the list is returned.\n     * If the list has more than one item, then a new Buffer is created.\n     *\n     * @param list An array of Buffer objects to concatenate\n     * @param totalLength Total length of the buffers when concatenated.\n     *   If totalLength is not provided, it is read from the buffers in the list. However, this adds an additional loop to the function, so it is faster to provide the length explicitly.\n     */\n    static concat(list: Uint8Array[], totalLength?: number): Buffer;\n    /**\n     * The same as buf1.compare(buf2).\n     */\n    static compare(buf1: Uint8Array, buf2: Uint8Array): number;\n    /**\n     * Allocates a new buffer of {size} octets.\n     *\n     * @param size count of octets to allocate.\n     * @param fill if specified, buffer will be initialized by calling buf.fill(fill).\n     *    If parameter is omitted, buffer will be filled with zeros.\n     * @param encoding encoding used for call to buf.fill while initalizing\n     */\n    static alloc(size: number, fill?: string | Buffer | number, encoding?: BufferEncoding): Buffer;\n    /**\n     * Allocates a new buffer of {size} octets, leaving memory not initialized, so the contents\n     * of the newly created Buffer are unknown and may contain sensitive data.\n     *\n     * @param size count of octets to allocate\n     */\n    static allocUnsafe(size: number): Buffer;\n    /**\n     * Allocates a new non-pooled buffer of {size} octets, leaving memory not initialized, so the contents\n     * of the newly created Buffer are unknown and may contain sensitive data.\n     *\n     * @param size count of octets to allocate\n     */\n    static allocUnsafeSlow(size: number): Buffer;\n    /**\n     * This is the number of bytes used to determine the size of pre-allocated, internal Buffer instances used for pooling. This value may be modified.\n     */\n    static poolSize: number;\n\n    write(string: string, encoding?: BufferEncoding): number;\n    write(string: string, offset: number, encoding?: BufferEncoding): number;\n    write(string: string, offset: number, length: number, encoding?: BufferEncoding): number;\n    toString(encoding?: string, start?: number, end?: number): string;\n    toJSON(): { type: \'Buffer\'; data: number[] };\n    equals(otherBuffer: Uint8Array): boolean;\n    compare(\n        otherBuffer: Uint8Array,\n        targetStart?: number,\n        targetEnd?: number,\n        sourceStart?: number,\n        sourceEnd?: number\n    ): number;\n    copy(targetBuffer: Uint8Array, targetStart?: number, sourceStart?: number, sourceEnd?: number): number;\n    /**\n     * Returns a new `Buffer` that references **the same memory as the original**, but offset and cropped by the start and end indices.\n     *\n     * This method is incompatible with `Uint8Array#slice()`, which returns a copy of the original memory.\n     *\n     * @param begin Where the new `Buffer` will start. Default: `0`.\n     * @param end Where the new `Buffer` will end (not inclusive). Default: `buf.length`.\n     */\n    slice(begin?: number, end?: number): Buffer;\n    /**\n     * Returns a new `Buffer` that references **the same memory as the original**, but offset and cropped by the start and end indices.\n     *\n     * This method is compatible with `Uint8Array#subarray()`.\n     *\n     * @param begin Where the new `Buffer` will start. Default: `0`.\n     * @param end Where the new `Buffer` will end (not inclusive). Default: `buf.length`.\n     */\n    subarray(begin?: number, end?: number): Buffer;\n    writeUIntLE(value: number, offset: number, byteLength: number): number;\n    writeUIntBE(value: number, offset: number, byteLength: number): number;\n    writeIntLE(value: number, offset: number, byteLength: number): number;\n    writeIntBE(value: number, offset: number, byteLength: number): number;\n    readUIntLE(offset: number, byteLength: number): number;\n    readUIntBE(offset: number, byteLength: number): number;\n    readIntLE(offset: number, byteLength: number): number;\n    readIntBE(offset: number, byteLength: number): number;\n    readUInt8(offset: number): number;\n    readUInt16LE(offset: number): number;\n    readUInt16BE(offset: number): number;\n    readUInt32LE(offset: number): number;\n    readUInt32BE(offset: number): number;\n    readInt8(offset: number): number;\n    readInt16LE(offset: number): number;\n    readInt16BE(offset: number): number;\n    readInt32LE(offset: number): number;\n    readInt32BE(offset: number): number;\n    readFloatLE(offset: number): number;\n    readFloatBE(offset: number): number;\n    readDoubleLE(offset: number): number;\n    readDoubleBE(offset: number): number;\n    reverse(): this;\n    swap16(): Buffer;\n    swap32(): Buffer;\n    swap64(): Buffer;\n    writeUInt8(value: number, offset: number): number;\n    writeUInt16LE(value: number, offset: number): number;\n    writeUInt16BE(value: number, offset: number): number;\n    writeUInt32LE(value: number, offset: number): number;\n    writeUInt32BE(value: number, offset: number): number;\n    writeInt8(value: number, offset: number): number;\n    writeInt16LE(value: number, offset: number): number;\n    writeInt16BE(value: number, offset: number): number;\n    writeInt32LE(value: number, offset: number): number;\n    writeInt32BE(value: number, offset: number): number;\n    writeFloatLE(value: number, offset: number): number;\n    writeFloatBE(value: number, offset: number): number;\n    writeDoubleLE(value: number, offset: number): number;\n    writeDoubleBE(value: number, offset: number): number;\n\n    fill(value: string | Uint8Array | number, offset?: number, end?: number, encoding?: BufferEncoding): this;\n\n    indexOf(value: string | number | Uint8Array, byteOffset?: number, encoding?: BufferEncoding): number;\n    lastIndexOf(value: string | number | Uint8Array, byteOffset?: number, encoding?: BufferEncoding): number;\n    entries(): IterableIterator<[number, number]>;\n    includes(value: string | number | Buffer, byteOffset?: number, encoding?: BufferEncoding): boolean;\n    keys(): IterableIterator<number>;\n    values(): IterableIterator<number>;\n}\n\n/*----------------------------------------------*\n*                                               *\n*               GLOBAL INTERFACES               *\n*                                               *\n*-----------------------------------------------*/\ndeclare namespace NodeJS {\n    interface InspectOptions {\n        /**\n         * If set to `true`, getters are going to be\n         * inspected as well. If set to `\'get\'` only getters without setter are going\n         * to be inspected. If set to `\'set\'` only getters having a corresponding\n         * setter are going to be inspected. This might cause side effects depending on\n         * the getter function.\n         * @default `false`\n         */\n        getters?: \'get\' | \'set\' | boolean;\n        showHidden?: boolean;\n        /**\n         * @default 2\n         */\n        depth?: number | null;\n        colors?: boolean;\n        customInspect?: boolean;\n        showProxy?: boolean;\n        maxArrayLength?: number | null;\n        breakLength?: number;\n        /**\n         * Setting this to `false` causes each object key\n         * to be displayed on a new line. It will also add new lines to text that is\n         * longer than `breakLength`. If set to a number, the most `n` inner elements\n         * are united on a single line as long as all properties fit into\n         * `breakLength`. Short array elements are also grouped together. Note that no\n         * text will be reduced below 16 characters, no matter the `breakLength` size.\n         * For more information, see the example below.\n         * @default `true`\n         */\n        compact?: boolean | number;\n        sorted?: boolean | ((a: string, b: string) => number);\n    }\n\n    interface ConsoleConstructorOptions {\n        stdout: WritableStream;\n        stderr?: WritableStream;\n        ignoreErrors?: boolean;\n        colorMode?: boolean | \'auto\';\n        inspectOptions?: InspectOptions;\n    }\n\n    interface ConsoleConstructor {\n        prototype: Console;\n        new(stdout: WritableStream, stderr?: WritableStream, ignoreErrors?: boolean): Console;\n        new(options: ConsoleConstructorOptions): Console;\n    }\n\n    interface CallSite {\n        /**\n         * Value of "this"\n         */\n        getThis(): any;\n\n        /**\n         * Type of "this" as a string.\n         * This is the name of the function stored in the constructor field of\n         * "this", if available.  Otherwise the object\'s [[Class]] internal\n         * property.\n         */\n        getTypeName(): string | null;\n\n        /**\n         * Current function\n         */\n        getFunction(): Function | undefined;\n\n        /**\n         * Name of the current function, typically its name property.\n         * If a name property is not available an attempt will be made to try\n         * to infer a name from the function\'s context.\n         */\n        getFunctionName(): string | null;\n\n        /**\n         * Name of the property [of "this" or one of its prototypes] that holds\n         * the current function\n         */\n        getMethodName(): string | null;\n\n        /**\n         * Name of the script [if this function was defined in a script]\n         */\n        getFileName(): string | null;\n\n        /**\n         * Current line number [if this function was defined in a script]\n         */\n        getLineNumber(): number | null;\n\n        /**\n         * Current column number [if this function was defined in a script]\n         */\n        getColumnNumber(): number | null;\n\n        /**\n         * A call site object representing the location where eval was called\n         * [if this function was created using a call to eval]\n         */\n        getEvalOrigin(): string | undefined;\n\n        /**\n         * Is this a toplevel invocation, that is, is "this" the global object?\n         */\n        isToplevel(): boolean;\n\n        /**\n         * Does this call take place in code defined by a call to eval?\n         */\n        isEval(): boolean;\n\n        /**\n         * Is this call in native V8 code?\n         */\n        isNative(): boolean;\n\n        /**\n         * Is this a constructor call?\n         */\n        isConstructor(): boolean;\n    }\n\n    interface ErrnoException extends Error {\n        errno?: number;\n        code?: string;\n        path?: string;\n        syscall?: string;\n        stack?: string;\n    }\n\n    class EventEmitter {\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\n        removeListener(event: string | symbol, listener: (...args: any[]) => void): this;\n        off(event: string | symbol, listener: (...args: any[]) => void): this;\n        removeAllListeners(event?: string | symbol): this;\n        setMaxListeners(n: number): this;\n        getMaxListeners(): number;\n        listeners(event: string | symbol): Function[];\n        rawListeners(event: string | symbol): Function[];\n        emit(event: string | symbol, ...args: any[]): boolean;\n        listenerCount(type: string | symbol): number;\n        // Added in Node 6...\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\n        eventNames(): Array<string | symbol>;\n    }\n\n    interface ReadableStream extends EventEmitter {\n        readable: boolean;\n        read(size?: number): string | Buffer;\n        setEncoding(encoding: string): this;\n        pause(): this;\n        resume(): this;\n        isPaused(): boolean;\n        pipe<T extends WritableStream>(destination: T, options?: { end?: boolean; }): T;\n        unpipe(destination?: WritableStream): this;\n        unshift(chunk: string | Uint8Array, encoding?: BufferEncoding): void;\n        wrap(oldStream: ReadableStream): this;\n        [Symbol.asyncIterator](): AsyncIterableIterator<string | Buffer>;\n    }\n\n    interface WritableStream extends EventEmitter {\n        writable: boolean;\n        write(buffer: Uint8Array | string, cb?: (err?: Error | null) => void): boolean;\n        write(str: string, encoding?: string, cb?: (err?: Error | null) => void): boolean;\n        end(cb?: () => void): void;\n        end(data: string | Uint8Array, cb?: () => void): void;\n        end(str: string, encoding?: string, cb?: () => void): void;\n    }\n\n    interface ReadWriteStream extends ReadableStream, WritableStream { }\n\n    interface Domain extends EventEmitter {\n        run<T>(fn: (...args: any[]) => T, ...args: any[]): T;\n        add(emitter: EventEmitter | Timer): void;\n        remove(emitter: EventEmitter | Timer): void;\n        bind<T extends Function>(cb: T): T;\n        intercept<T extends Function>(cb: T): T;\n\n        addListener(event: string, listener: (...args: any[]) => void): this;\n        on(event: string, listener: (...args: any[]) => void): this;\n        once(event: string, listener: (...args: any[]) => void): this;\n        removeListener(event: string, listener: (...args: any[]) => void): this;\n        removeAllListeners(event?: string): this;\n    }\n\n    interface MemoryUsage {\n        rss: number;\n        heapTotal: number;\n        heapUsed: number;\n        external: number;\n    }\n\n    interface CpuUsage {\n        user: number;\n        system: number;\n    }\n\n    interface ProcessRelease {\n        name: string;\n        sourceUrl?: string;\n        headersUrl?: string;\n        libUrl?: string;\n        lts?: string;\n    }\n\n    interface ProcessVersions {\n        http_parser: string;\n        node: string;\n        v8: string;\n        ares: string;\n        uv: string;\n        zlib: string;\n        modules: string;\n        openssl: string;\n    }\n\n    type Platform = \'aix\'\n        | \'android\'\n        | \'darwin\'\n        | \'freebsd\'\n        | \'linux\'\n        | \'openbsd\'\n        | \'sunos\'\n        | \'win32\'\n        | \'cygwin\'\n        | \'netbsd\';\n\n    type Signals =\n        "SIGABRT" | "SIGALRM" | "SIGBUS" | "SIGCHLD" | "SIGCONT" | "SIGFPE" | "SIGHUP" | "SIGILL" | "SIGINT" | "SIGIO" |\n        "SIGIOT" | "SIGKILL" | "SIGPIPE" | "SIGPOLL" | "SIGPROF" | "SIGPWR" | "SIGQUIT" | "SIGSEGV" | "SIGSTKFLT" |\n        "SIGSTOP" | "SIGSYS" | "SIGTERM" | "SIGTRAP" | "SIGTSTP" | "SIGTTIN" | "SIGTTOU" | "SIGUNUSED" | "SIGURG" |\n        "SIGUSR1" | "SIGUSR2" | "SIGVTALRM" | "SIGWINCH" | "SIGXCPU" | "SIGXFSZ" | "SIGBREAK" | "SIGLOST" | "SIGINFO";\n\n    type MultipleResolveType = \'resolve\' | \'reject\';\n\n    type BeforeExitListener = (code: number) => void;\n    type DisconnectListener = () => void;\n    type ExitListener = (code: number) => void;\n    type RejectionHandledListener = (promise: Promise<any>) => void;\n    type UncaughtExceptionListener = (error: Error) => void;\n    type UnhandledRejectionListener = (reason: {} | null | undefined, promise: Promise<any>) => void;\n    type WarningListener = (warning: Error) => void;\n    type MessageListener = (message: any, sendHandle: any) => void;\n    type SignalsListener = (signal: Signals) => void;\n    type NewListenerListener = (type: string | symbol, listener: (...args: any[]) => void) => void;\n    type RemoveListenerListener = (type: string | symbol, listener: (...args: any[]) => void) => void;\n    type MultipleResolveListener = (type: MultipleResolveType, promise: Promise<any>, value: any) => void;\n\n    interface Socket extends ReadWriteStream {\n        isTTY?: true;\n    }\n\n    interface ProcessEnv {\n        [key: string]: string | undefined;\n    }\n\n    interface HRTime {\n        (time?: [number, number]): [number, number];\n    }\n\n    interface ProcessReport {\n        /**\n         * Directory where the report is written.\n         * working directory of the Node.js process.\n         * @default \'\' indicating that reports are written to the current\n         */\n        directory: string;\n\n        /**\n         * Filename where the report is written.\n         * The default value is the empty string.\n         * @default \'\' the output filename will be comprised of a timestamp,\n         * PID, and sequence number.\n         */\n        filename: string;\n\n        /**\n         * Returns a JSON-formatted diagnostic report for the running process.\n         * The report\'s JavaScript stack trace is taken from err, if present.\n         */\n        getReport(err?: Error): string;\n\n        /**\n         * If true, a diagnostic report is generated on fatal errors,\n         * such as out of memory errors or failed C++ assertions.\n         * @default false\n         */\n        reportOnFatalError: boolean;\n\n        /**\n         * If true, a diagnostic report is generated when the process\n         * receives the signal specified by process.report.signal.\n         * @defaul false\n         */\n        reportOnSignal: boolean;\n\n        /**\n         * If true, a diagnostic report is generated on uncaught exception.\n         * @default false\n         */\n        reportOnUncaughtException: boolean;\n\n        /**\n         * The signal used to trigger the creation of a diagnostic report.\n         * @default \'SIGUSR2\'\n         */\n        signal: Signals;\n\n        /**\n         * Writes a diagnostic report to a file. If filename is not provided, the default filename\n         * includes the date, time, PID, and a sequence number.\n         * The report\'s JavaScript stack trace is taken from err, if present.\n         *\n         * @param fileName Name of the file where the report is written.\n         * This should be a relative path, that will be appended to the directory specified in\n         * `process.report.directory`, or the current working directory of the Node.js process,\n         * if unspecified.\n         * @param error A custom error used for reporting the JavaScript stack.\n         * @return Filename of the generated report.\n         */\n        writeReport(fileName?: string): string;\n        writeReport(error?: Error): string;\n        writeReport(fileName?: string, err?: Error): string;\n    }\n\n    interface ResourceUsage {\n        fsRead: number;\n        fsWrite: number;\n        involuntaryContextSwitches: number;\n        ipcReceived: number;\n        ipcSent: number;\n        majorPageFault: number;\n        maxRSS: number;\n        minorPageFault: number;\n        sharedMemorySize: number;\n        signalsCount: number;\n        swappedOut: number;\n        systemCPUTime: number;\n        unsharedDataSize: number;\n        unsharedStackSize: number;\n        userCPUTime: number;\n        voluntaryContextSwitches: number;\n    }\n\n    interface Process extends EventEmitter {\n        /**\n         * Can also be a tty.WriteStream, not typed due to limitation.s\n         */\n        stdout: WriteStream;\n        /**\n         * Can also be a tty.WriteStream, not typed due to limitation.s\n         */\n        stderr: WriteStream;\n        stdin: ReadStream;\n        openStdin(): Socket;\n        argv: string[];\n        argv0: string;\n        execArgv: string[];\n        execPath: string;\n        abort(): void;\n        chdir(directory: string): void;\n        cwd(): string;\n        debugPort: number;\n        emitWarning(warning: string | Error, name?: string, ctor?: Function): void;\n        env: ProcessEnv;\n        exit(code?: number): never;\n        exitCode?: number;\n        getgid(): number;\n        setgid(id: number | string): void;\n        getuid(): number;\n        setuid(id: number | string): void;\n        geteuid(): number;\n        seteuid(id: number | string): void;\n        getegid(): number;\n        setegid(id: number | string): void;\n        getgroups(): number[];\n        setgroups(groups: Array<string | number>): void;\n        setUncaughtExceptionCaptureCallback(cb: ((err: Error) => void) | null): void;\n        hasUncaughtExceptionCaptureCallback(): boolean;\n        version: string;\n        versions: ProcessVersions;\n        config: {\n            target_defaults: {\n                cflags: any[];\n                default_configuration: string;\n                defines: string[];\n                include_dirs: string[];\n                libraries: string[];\n            };\n            variables: {\n                clang: number;\n                host_arch: string;\n                node_install_npm: boolean;\n                node_install_waf: boolean;\n                node_prefix: string;\n                node_shared_openssl: boolean;\n                node_shared_v8: boolean;\n                node_shared_zlib: boolean;\n                node_use_dtrace: boolean;\n                node_use_etw: boolean;\n                node_use_openssl: boolean;\n                target_arch: string;\n                v8_no_strict_aliasing: number;\n                v8_use_snapshot: boolean;\n                visibility: string;\n            };\n        };\n        kill(pid: number, signal?: string | number): void;\n        pid: number;\n        ppid: number;\n        title: string;\n        arch: string;\n        platform: Platform;\n        mainModule?: NodeModule;\n        memoryUsage(): MemoryUsage;\n        cpuUsage(previousValue?: CpuUsage): CpuUsage;\n        nextTick(callback: Function, ...args: any[]): void;\n        release: ProcessRelease;\n        features: {\n            inspector: boolean;\n            debug: boolean;\n            uv: boolean;\n            ipv6: boolean;\n            tls_alpn: boolean;\n            tls_sni: boolean;\n            tls_ocsp: boolean;\n            tls: boolean;\n        };\n        /**\n         * Can only be set if not in worker thread.\n         */\n        umask(mask?: number): number;\n        uptime(): number;\n        hrtime: HRTime;\n        domain: Domain;\n\n        // Worker\n        send?(message: any, sendHandle?: any, options?: { swallowErrors?: boolean}, callback?: (error: Error | null) => void): boolean;\n        disconnect(): void;\n        connected: boolean;\n\n        /**\n         * The `process.allowedNodeEnvironmentFlags` property is a special,\n         * read-only `Set` of flags allowable within the [`NODE_OPTIONS`][]\n         * environment variable.\n         */\n        allowedNodeEnvironmentFlags: ReadonlySet<string>;\n\n        /**\n         * Only available with `--experimental-report`\n         */\n        report?: ProcessReport;\n\n        resourceUsage(): ResourceUsage;\n\n        /**\n         * EventEmitter\n         *   1. beforeExit\n         *   2. disconnect\n         *   3. exit\n         *   4. message\n         *   5. rejectionHandled\n         *   6. uncaughtException\n         *   7. unhandledRejection\n         *   8. warning\n         *   9. message\n         *  10. <All OS Signals>\n         *  11. newListener/removeListener inherited from EventEmitter\n         */\n        addListener(event: "beforeExit", listener: BeforeExitListener): this;\n        addListener(event: "disconnect", listener: DisconnectListener): this;\n        addListener(event: "exit", listener: ExitListener): this;\n        addListener(event: "rejectionHandled", listener: RejectionHandledListener): this;\n        addListener(event: "uncaughtException", listener: UncaughtExceptionListener): this;\n        addListener(event: "unhandledRejection", listener: UnhandledRejectionListener): this;\n        addListener(event: "warning", listener: WarningListener): this;\n        addListener(event: "message", listener: MessageListener): this;\n        addListener(event: Signals, listener: SignalsListener): this;\n        addListener(event: "newListener", listener: NewListenerListener): this;\n        addListener(event: "removeListener", listener: RemoveListenerListener): this;\n        addListener(event: "multipleResolves", listener: MultipleResolveListener): this;\n\n        emit(event: "beforeExit", code: number): boolean;\n        emit(event: "disconnect"): boolean;\n        emit(event: "exit", code: number): boolean;\n        emit(event: "rejectionHandled", promise: Promise<any>): boolean;\n        emit(event: "uncaughtException", error: Error): boolean;\n        emit(event: "unhandledRejection", reason: any, promise: Promise<any>): boolean;\n        emit(event: "warning", warning: Error): boolean;\n        emit(event: "message", message: any, sendHandle: any): this;\n        emit(event: Signals, signal: Signals): boolean;\n        emit(event: "newListener", eventName: string | symbol, listener: (...args: any[]) => void): this;\n        emit(event: "removeListener", eventName: string, listener: (...args: any[]) => void): this;\n        emit(event: "multipleResolves", listener: MultipleResolveListener): this;\n\n        on(event: "beforeExit", listener: BeforeExitListener): this;\n        on(event: "disconnect", listener: DisconnectListener): this;\n        on(event: "exit", listener: ExitListener): this;\n        on(event: "rejectionHandled", listener: RejectionHandledListener): this;\n        on(event: "uncaughtException", listener: UncaughtExceptionListener): this;\n        on(event: "unhandledRejection", listener: UnhandledRejectionListener): this;\n        on(event: "warning", listener: WarningListener): this;\n        on(event: "message", listener: MessageListener): this;\n        on(event: Signals, listener: SignalsListener): this;\n        on(event: "newListener", listener: NewListenerListener): this;\n        on(event: "removeListener", listener: RemoveListenerListener): this;\n        on(event: "multipleResolves", listener: MultipleResolveListener): this;\n\n        once(event: "beforeExit", listener: BeforeExitListener): this;\n        once(event: "disconnect", listener: DisconnectListener): this;\n        once(event: "exit", listener: ExitListener): this;\n        once(event: "rejectionHandled", listener: RejectionHandledListener): this;\n        once(event: "uncaughtException", listener: UncaughtExceptionListener): this;\n        once(event: "unhandledRejection", listener: UnhandledRejectionListener): this;\n        once(event: "warning", listener: WarningListener): this;\n        once(event: "message", listener: MessageListener): this;\n        once(event: Signals, listener: SignalsListener): this;\n        once(event: "newListener", listener: NewListenerListener): this;\n        once(event: "removeListener", listener: RemoveListenerListener): this;\n        once(event: "multipleResolves", listener: MultipleResolveListener): this;\n\n        prependListener(event: "beforeExit", listener: BeforeExitListener): this;\n        prependListener(event: "disconnect", listener: DisconnectListener): this;\n        prependListener(event: "exit", listener: ExitListener): this;\n        prependListener(event: "rejectionHandled", listener: RejectionHandledListener): this;\n        prependListener(event: "uncaughtException", listener: UncaughtExceptionListener): this;\n        prependListener(event: "unhandledRejection", listener: UnhandledRejectionListener): this;\n        prependListener(event: "warning", listener: WarningListener): this;\n        prependListener(event: "message", listener: MessageListener): this;\n        prependListener(event: Signals, listener: SignalsListener): this;\n        prependListener(event: "newListener", listener: NewListenerListener): this;\n        prependListener(event: "removeListener", listener: RemoveListenerListener): this;\n        prependListener(event: "multipleResolves", listener: MultipleResolveListener): this;\n\n        prependOnceListener(event: "beforeExit", listener: BeforeExitListener): this;\n        prependOnceListener(event: "disconnect", listener: DisconnectListener): this;\n        prependOnceListener(event: "exit", listener: ExitListener): this;\n        prependOnceListener(event: "rejectionHandled", listener: RejectionHandledListener): this;\n        prependOnceListener(event: "uncaughtException", listener: UncaughtExceptionListener): this;\n        prependOnceListener(event: "unhandledRejection", listener: UnhandledRejectionListener): this;\n        prependOnceListener(event: "warning", listener: WarningListener): this;\n        prependOnceListener(event: "message", listener: MessageListener): this;\n        prependOnceListener(event: Signals, listener: SignalsListener): this;\n        prependOnceListener(event: "newListener", listener: NewListenerListener): this;\n        prependOnceListener(event: "removeListener", listener: RemoveListenerListener): this;\n        prependOnceListener(event: "multipleResolves", listener: MultipleResolveListener): this;\n\n        listeners(event: "beforeExit"): BeforeExitListener[];\n        listeners(event: "disconnect"): DisconnectListener[];\n        listeners(event: "exit"): ExitListener[];\n        listeners(event: "rejectionHandled"): RejectionHandledListener[];\n        listeners(event: "uncaughtException"): UncaughtExceptionListener[];\n        listeners(event: "unhandledRejection"): UnhandledRejectionListener[];\n        listeners(event: "warning"): WarningListener[];\n        listeners(event: "message"): MessageListener[];\n        listeners(event: Signals): SignalsListener[];\n        listeners(event: "newListener"): NewListenerListener[];\n        listeners(event: "removeListener"): RemoveListenerListener[];\n        listeners(event: "multipleResolves"): MultipleResolveListener[];\n    }\n\n    interface Global {\n        Array: typeof Array;\n        ArrayBuffer: typeof ArrayBuffer;\n        Boolean: typeof Boolean;\n        Buffer: typeof Buffer;\n        DataView: typeof DataView;\n        Date: typeof Date;\n        Error: typeof Error;\n        EvalError: typeof EvalError;\n        Float32Array: typeof Float32Array;\n        Float64Array: typeof Float64Array;\n        Function: typeof Function;\n        GLOBAL: Global;\n        Infinity: typeof Infinity;\n        Int16Array: typeof Int16Array;\n        Int32Array: typeof Int32Array;\n        Int8Array: typeof Int8Array;\n        Intl: typeof Intl;\n        JSON: typeof JSON;\n        Map: MapConstructor;\n        Math: typeof Math;\n        NaN: typeof NaN;\n        Number: typeof Number;\n        Object: typeof Object;\n        Promise: Function;\n        RangeError: typeof RangeError;\n        ReferenceError: typeof ReferenceError;\n        RegExp: typeof RegExp;\n        Set: SetConstructor;\n        String: typeof String;\n        Symbol: Function;\n        SyntaxError: typeof SyntaxError;\n        TypeError: typeof TypeError;\n        URIError: typeof URIError;\n        Uint16Array: typeof Uint16Array;\n        Uint32Array: typeof Uint32Array;\n        Uint8Array: typeof Uint8Array;\n        Uint8ClampedArray: Function;\n        WeakMap: WeakMapConstructor;\n        WeakSet: WeakSetConstructor;\n        clearImmediate: (immediateId: Immediate) => void;\n        clearInterval: (intervalId: Timeout) => void;\n        clearTimeout: (timeoutId: Timeout) => void;\n        console: typeof console;\n        decodeURI: typeof decodeURI;\n        decodeURIComponent: typeof decodeURIComponent;\n        encodeURI: typeof encodeURI;\n        encodeURIComponent: typeof encodeURIComponent;\n        escape: (str: string) => string;\n        eval: typeof eval;\n        global: Global;\n        isFinite: typeof isFinite;\n        isNaN: typeof isNaN;\n        parseFloat: typeof parseFloat;\n        parseInt: typeof parseInt;\n        process: Process;\n        root: Global;\n        setImmediate: (callback: (...args: any[]) => void, ...args: any[]) => Immediate;\n        setInterval: (callback: (...args: any[]) => void, ms: number, ...args: any[]) => Timeout;\n        setTimeout: (callback: (...args: any[]) => void, ms: number, ...args: any[]) => Timeout;\n        queueMicrotask: typeof queueMicrotask;\n        undefined: typeof undefined;\n        unescape: (str: string) => string;\n        gc: () => void;\n        v8debug?: any;\n    }\n\n    // compatibility with older typings\n    interface Timer {\n        hasRef(): boolean;\n        ref(): this;\n        refresh(): this;\n        unref(): this;\n    }\n\n    class Immediate {\n        hasRef(): boolean;\n        ref(): this;\n        unref(): this;\n        _onImmediate: Function; // to distinguish it from the Timeout class\n    }\n\n    class Timeout implements Timer {\n        hasRef(): boolean;\n        ref(): this;\n        refresh(): this;\n        unref(): this;\n    }\n\n    class Module {\n        static runMain(): void;\n        static wrap(code: string): string;\n\n        /**\n         * @deprecated Deprecated since: v12.2.0. Please use createRequire() instead.\n         */\n        static createRequireFromPath(path: string): NodeRequireFunction;\n        static createRequire(path: string): NodeRequireFunction;\n        static builtinModules: string[];\n\n        static Module: typeof Module;\n\n        exports: any;\n        require: NodeRequireFunction;\n        id: string;\n        filename: string;\n        loaded: boolean;\n        parent: Module | null;\n        children: Module[];\n        paths: string[];\n\n        constructor(id: string, parent?: Module);\n    }\n\n    type TypedArray = Uint8Array | Uint8ClampedArray | Uint16Array | Uint32Array | Int8Array | Int16Array | Int32Array | Float32Array | Float64Array;\n    type ArrayBufferView = TypedArray | DataView;\n\n    // The value type here is a "poor man\'s `unknown`". When these types support TypeScript\n    // 3.0+, we can replace this with `unknown`.\n    type PoorMansUnknown = {} | null | undefined;\n}\n'},"./node_modules/react-contenteditable/lib/react-contenteditable.js":function(e,n,t){"use strict";var r,a=this&&this.__extends||(r=function(e,n){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t])},r(e,n)},function(e,n){function t(){this.constructor=e}r(e,n),e.prototype=null===n?Object.create(n):(t.prototype=n.prototype,new t)}),i=this&&this.__assign||function(){return i=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var a in n=arguments[t])Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a]);return e},i.apply(this,arguments)},s=this&&this.__rest||function(e,n){var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&n.indexOf(r)<0&&(t[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)n.indexOf(r[a])<0&&(t[r[a]]=e[r[a]])}return t},o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)Object.hasOwnProperty.call(e,t)&&(n[t]=e[t]);return n.default=e,n},l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0});var c=o(t("../../node_modules/react/index.js")),u=l(t("./node_modules/react-contenteditable/node_modules/fast-deep-equal/index.js")),d=o(t("./node_modules/prop-types/index.js"));function h(e){return e&&e.replace(/&nbsp;|\u202F|\u00A0/g," ")}function m(e){if(e.nodeType===Node.TEXT_NODE)return e;for(var n=e.childNodes,t=n.length-1;t>=0;t--){var r=m(n[t]);if(null!==r)return r}return null}function p(e){var n=m(e);if(null!==n&&null!==n.nodeValue){var t=document.createRange(),r=window.getSelection();t.setStart(n,n.nodeValue.length),t.collapse(!0),r.removeAllRanges(),r.addRange(t),e instanceof HTMLElement&&e.focus()}}var f=function(e){function n(n){var t=e.call(this,n)||this;return t.htmlEl=null,t.emitChange=t.emitChange.bind(t),t.lastHtml=n.html,t}return a(n,e),n.prototype.render=function(){var e=this,n=this.props,t=n.tagName,r=n.html,a=s(n,["tagName","html"]);return c.createElement(t||"div",i({},a,{ref:function(n){return e.htmlEl=n},onInput:this.emitChange,onBlur:this.props.onBlur||this.emitChange,contentEditable:!this.props.disabled,dangerouslySetInnerHTML:{__html:r}}),this.props.children)},n.prototype.shouldComponentUpdate=function(e){var n=this.props,t=this.htmlEl;return!t||(h(e.html)!==h(t.innerHTML)||(n.disabled!==e.disabled||n.tagName!==e.tagName||n.className!==e.className||!u.default(n.style,e.style)))},n.prototype.componentDidUpdate=function(){null!==this.htmlEl&&(this.props.html!==this.htmlEl.innerHTML&&(this.htmlEl.innerHTML=this.lastHtml=this.props.html),p(this.htmlEl))},n.prototype.emitChange=function(e){if(this.htmlEl){var n=this.htmlEl.innerHTML;if(this.props.onChange&&n!==this.lastHtml){var t=Object.assign({},e,{target:{value:n}});this.props.onChange(t)}this.lastHtml=n}},n.propTypes={html:d.string.isRequired,onChange:d.func,onBlur:d.func,disabled:d.bool,tagName:d.string,className:d.string,style:d.object},n}(c.Component);n.default=f},"./node_modules/react-contenteditable/node_modules/fast-deep-equal/index.js":function(e){"use strict";var n=Array.isArray,t=Object.keys,r=Object.prototype.hasOwnProperty;e.exports=function e(a,i){if(a===i)return!0;if(a&&i&&"object"==typeof a&&"object"==typeof i){var s,o,l,c=n(a),u=n(i);if(c&&u){if((o=a.length)!=i.length)return!1;for(s=o;0!=s--;)if(!e(a[s],i[s]))return!1;return!0}if(c!=u)return!1;var d=a instanceof Date,h=i instanceof Date;if(d!=h)return!1;if(d&&h)return a.getTime()==i.getTime();var m=a instanceof RegExp,p=i instanceof RegExp;if(m!=p)return!1;if(m&&p)return a.toString()==i.toString();var f=t(a);if((o=f.length)!==t(i).length)return!1;for(s=o;0!=s--;)if(!r.call(i,f[s]))return!1;for(s=o;0!=s--;)if(!e(a[l=f[s]],i[l]))return!1;return!0}return a!=a&&i!=i}},"./runtime-repl/_common/BufferedItemStore.ts":function(e,n,t){"use strict";t.r(n),t.d(n,{BufferedItemManager:function(){return u},BufferedItemStore:function(){return c}});var r=t("./node_modules/lodash/lodash.js"),a=t.n(r),i=t("../../node_modules/mobx/lib/mobx.module.js"),s=t("./runtime-repl/_common/promiseUtils.js"),o=function(e,n,t,r){var a,i=arguments.length,s=i<3?n:null===r?r=Object.getOwnPropertyDescriptor(n,t):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,n,t,r);else for(var o=e.length-1;o>=0;o--)(a=e[o])&&(s=(i<3?a(s):i>3?a(n,t,s):a(n,t))||s);return i>3&&s&&Object.defineProperty(n,t,s),s},l=function(e,n,t,r){return new(t||(t=Promise))((function(a,i){function s(e){try{l(r.next(e))}catch(e){i(e)}}function o(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){var n;e.done?a(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(s,o)}l((r=r.apply(e,n||[])).next())}))};class c{constructor(e){this.isUpdating=!1,this.updateCallbacks=[],this.updateFailCallbacks=[],this.pendingUpdatePromise=Promise.resolve(),this.baseItem=e,this.itemReactionDisposer=(0,i.reaction)((()=>this.propertiesToWatch.map((e=>a().get(this.baseItem,e)))),(()=>{var e,n;const t=null===(n=null===(e=this.baseItem)||void 0===e?void 0:e.toJSON)||void 0===n?void 0:n.call(e,["folders","requests"]);t&&!this.isUpdating&&this.updateItem(t)}),{fireImmediately:!0})}get isPendingUpdate(){return Boolean(this.pendingUpdate)}get uid(){return this.baseItem.id}getItem(){return this.bufferedItem}onUpdate(e){return this.updateCallbacks.push(e),e(this.bufferedItem),()=>{this.updateCallbacks=this.updateCallbacks.filter((n=>n!==e))}}onUpdateFail(e){return this.updateFailCallbacks.push(e),()=>{this.updateFailCallbacks=this.updateFailCallbacks.filter((n=>n!==e))}}updateItem(e){this.bufferedItem=e,this.updateCallbacks.forEach((n=>{try{n(e)}catch(e){}}))}setPendingUpdate(e){this.pendingUpdate?a().assign(this.pendingUpdate,e):this.pendingUpdate=e}update(e){return l(this,void 0,void 0,(function*(){this.setPendingUpdate(e);const n=Object.assign(Object.assign({},this.bufferedItem),e);this.updateItem(n),yield this.processUpdate()}))}processUpdate(e=!0){return l(this,void 0,void 0,(function*(){if(this.isUpdating)return this.pendingUpdatePromise;if(!this.isPendingUpdate)return;this.isUpdating=!0;const n=this.pendingUpdate;this.pendingUpdate=void 0;const{promise:t,resolve:r,reject:a}=(0,s.createPromiseObject)();return e&&(this.pendingUpdatePromise=t),this.dispatchUpdate(n).finally((()=>{this.isUpdating=!1})).catch((e=>{if(!this.isPendingUpdate)throw this.updateFailCallbacks.forEach((t=>{var r;try{t(null!==(r=null==e?void 0:e.message)&&void 0!==r?r:"Error updating entity",n)}catch(e){}})),e;this.pendingUpdate=Object.assign(Object.assign({},n),this.pendingUpdate)})).then((()=>this.processUpdate())).then(r,a),t}))}unsubscribe(){var e;null===(e=this.itemReactionDisposer)||void 0===e||e.call(this)}}o([i.computed],c.prototype,"uid",null);class u{constructor(){this.bufferedItemMap=new Map}createBufferedItem(e,n){return this.bufferedItemMap.has(e.id)&&!(null==n?void 0:n.forceNewInstance)||this.bufferedItemMap.set(e.id,this.createItemStoreInstance(e)),this.bufferedItemMap.get(e.id)}unsubscribe(){}}},"./runtime-repl/folder/_api/FolderBufferedStore.ts":function(e,n,t){"use strict";t.r(n);var r=t("./runtime-repl/_common/BufferedItemStore.ts"),a=t("./runtime-repl/folder/_api/FolderInterfaceV2.ts");class i extends r.BufferedItemStore{dispatchUpdate(e){return(0,a.updateFolder)(this.uid,e)}get propertiesToWatch(){return i.propertiesToWatch}}i.propertiesToWatch=["description","auth","events","protocolProfileBehavior"];class s extends r.BufferedItemManager{createItemStoreInstance(e){return new i(e)}}n.default=new s},"./runtime-repl/_common/_api/typings/lib.js":function(e,n,t){"use strict";t.r(n);var r=t("./node_modules/raw-loader/dist/cjs.js!./runtime-repl/_common/_api/typings/javascript/lib.es5.d.ts"),a=t("./node_modules/raw-loader/dist/cjs.js!./runtime-repl/_common/_api/typings/javascript/lib.es2015.core.d.ts"),i=t("./node_modules/raw-loader/dist/cjs.js!./runtime-repl/_common/_api/typings/javascript/lib.es2015.collection.d.ts"),s=t("./node_modules/raw-loader/dist/cjs.js!./runtime-repl/_common/_api/typings/javascript/lib.es2015.iterable.d.ts"),o=t("./node_modules/raw-loader/dist/cjs.js!./runtime-repl/_common/_api/typings/javascript/lib.es2015.generator.d.ts"),l=t("./node_modules/raw-loader/dist/cjs.js!./runtime-repl/_common/_api/typings/javascript/lib.es2015.promise.d.ts"),c=t("./node_modules/raw-loader/dist/cjs.js!./runtime-repl/_common/_api/typings/javascript/lib.es2015.proxy.d.ts"),u=t("./node_modules/raw-loader/dist/cjs.js!./runtime-repl/_common/_api/typings/javascript/lib.es2015.reflect.d.ts"),d=t("./node_modules/raw-loader/dist/cjs.js!./runtime-repl/_common/_api/typings/javascript/lib.es2015.symbol.d.ts"),h=t("./node_modules/raw-loader/dist/cjs.js!./runtime-repl/_common/_api/typings/javascript/lib.es2015.symbol.wellknown.d.ts");const m=r.default+a.default+i.default+s.default+o.default+l.default+c.default+u.default+d.default+h.default;n.default=m},"./runtime-repl/_common/_api/typings/node.js":function(e,n,t){"use strict";t.r(n),t.d(n,{assertTypeDef:function(){return i.default},bufferTypeDef:function(){return s.default},eventsTypeDef:function(){return p.default},globalsTypeDef:function(){return r.default},pathTypeDef:function(){return a.default},punycodeTypeDef:function(){return c.default},querystringTypeDef:function(){return u.default},streamTypeDef:function(){return h.default},stringDecoderTypeDef:function(){return d.default},timersTypeDef:function(){return m.default},urlTypeDef:function(){return l.default},utilTypeDef:function(){return o.default}});var r=t("./node_modules/raw-loader/dist/cjs.js!./runtime-repl/_common/_api/typings/node/globals.d.ts"),a=t("./node_modules/raw-loader/dist/cjs.js!./node_modules/@types/node/path.d.ts"),i=t("./node_modules/raw-loader/dist/cjs.js!./node_modules/@types/node/assert.d.ts"),s=t("./node_modules/raw-loader/dist/cjs.js!./node_modules/@types/node/buffer.d.ts"),o=t("./node_modules/raw-loader/dist/cjs.js!./node_modules/@types/node/util.d.ts"),l=t("./node_modules/raw-loader/dist/cjs.js!./node_modules/@types/node/url.d.ts"),c=t("./node_modules/raw-loader/dist/cjs.js!./node_modules/@types/node/punycode.d.ts"),u=t("./node_modules/raw-loader/dist/cjs.js!./node_modules/@types/node/querystring.d.ts"),d=t("./node_modules/raw-loader/dist/cjs.js!./node_modules/@types/node/string_decoder.d.ts"),h=t("./node_modules/raw-loader/dist/cjs.js!./node_modules/@types/node/stream.d.ts"),m=t("./node_modules/raw-loader/dist/cjs.js!./node_modules/@types/node/timers.d.ts"),p=t("./node_modules/raw-loader/dist/cjs.js!./node_modules/@types/node/events.d.ts");const f=r.default+a.default+i.default+s.default+o.default+l.default+c.default+u.default+d.default+h.default+m.default+p.default;n.default=f},"./node_modules/@postman/script-examples/db.json":function(e){"use strict";e.exports=JSON.parse('[{"id":"get-env-var","name":"Get an environment variable","description":"Gets an environment variable","code":"pm.environment.get(\\"variable_key\\");","validity":["prerequest","test"]},{"id":"get-global-var","name":"Get a global variable","description":"Gets a global variable","code":"pm.globals.get(\\"variable_key\\");","validity":["prerequest","test"]},{"id":"get-var","name":"Get a variable","description":"Gets a variable (environment or global)","code":"pm.variables.get(\\"variable_key\\");","validity":["prerequest","test"]},{"id":"get-collection-var","name":"Get a collection variable","description":"Gets a collection variable","code":"pm.collectionVariables.get(\\"variable_key\\");","validity":["prerequest","test"]},{"id":"set-env-var","name":"Set an environment variable","description":"Sets an environment variable","code":"pm.environment.set(\\"variable_key\\", \\"variable_value\\");","validity":["prerequest","test"]},{"id":"set-global-var","name":"Set a global variable","description":"Sets a global variable","code":"pm.globals.set(\\"variable_key\\", \\"variable_value\\");","validity":["prerequest","test"]},{"id":"set-collection-var","name":"Set a collection variable","description":"Sets a collection variable","code":"pm.collectionVariables.set(\\"variable_key\\", \\"variable_value\\");","validity":["prerequest","test"]},{"id":"clear-env-var","name":"Clear an environment variable","description":"Clears an environment variable if set","code":"pm.environment.unset(\\"variable_key\\");","validity":["prerequest","test"]},{"id":"clear-global-var","name":"Clear a global variable","description":"Clears a global variable if set","code":"pm.globals.unset(\\"variable_key\\");","validity":["prerequest","test"]},{"id":"clear-collection-var","name":"Clear a collection variable","description":"Clears a collection variable if set","code":"pm.collectionVariables.unset(\\"variable_key\\");","validity":["prerequest","test"]},{"id":"send-request","name":"Send a request","description":"Sends a request","code":"pm.sendRequest(\\"https://postman-echo.com/get\\", function (err, response) {\\n    console.log(response.json());\\n});","validity":["prerequest","test"]},{"id":"test-response-status-code","name":"Status code: Code is 200","description":"Write a basic status code check","code":"pm.test(\\"Status code is 200\\", function () {\\n    pm.response.to.have.status(200);\\n});","validity":["test"]},{"id":"test-response-body-sub-string","name":"Response body: Contains string","description":"Write a basic string check in response body","code":"pm.test(\\"Body matches string\\", function () {\\n    pm.expect(pm.response.text()).to.include(\\"string_you_want_to_search\\");\\n});","validity":["test"]},{"id":"test-response-body-json","name":"Response body: JSON value check","description":"Write a basic json value check","code":"pm.test(\\"Your test name\\", function () {\\n    var jsonData = pm.response.json();\\n    pm.expect(jsonData.value).to.eql(100);\\n});","validity":["test"]},{"id":"test-response-body-string","name":"Response body: Is equal to a string","description":"Write a response body string check","code":"pm.test(\\"Body is correct\\", function () {\\n    pm.response.to.have.body(\\"response_body_string\\");\\n});","validity":["test"]},{"id":"test-response-headers","name":"Response headers: Content-Type header check","description":"Write a basic response header check","code":"pm.test(\\"Content-Type is present\\", function () {\\n    pm.response.to.have.header(\\"Content-Type\\");\\n});","validity":["test"]},{"id":"test-response-time","name":"Response time is less than 200ms","description":"Write a basic response time check","code":"pm.test(\\"Response time is less than 200ms\\", function () {\\n    pm.expect(pm.response.responseTime).to.be.below(200);\\n});","validity":["test"]},{"id":"test-response-status-code-post","name":"Status code: Successful POST request","description":"Check for successful POST request","code":"pm.test(\\"Successful POST request\\", function () {\\n    pm.expect(pm.response.code).to.be.oneOf([201,202]);\\n});","validity":["test"]},{"id":"test-response-status-name","name":"Status code: Code name has string","description":"Write a basic response code string check","code":"pm.test(\\"Status code name has string\\", function () {\\n    pm.response.to.have.status(\\"Created\\");\\n});","validity":["test"]},{"id":"convert-response-xml-json","name":"Response body: Convert XML body to a JSON Object","description":"Convert response body from JSON to XML","code":"var jsonObject = xml2Json(responseBody);","validity":["test"]},{"id":"tv4-validate-json","name":"Use Tiny Validator for JSON data","description":"Validate response against a schema with Tiny Validator","code":"var schema = {\\n  \\"items\\": {\\n    \\"type\\": \\"boolean\\"\\n  }\\n};\\n\\nvar data1 = [true, false];\\nvar data2 = [true, 123];\\n\\npm.test(\'Schema is valid\', function() {\\n  pm.expect(tv4.validate(data1, schema)).to.be.true;\\n  pm.expect(tv4.validate(data2, schema)).to.be.true;\\n});","validity":["test"]}]')}}]);