"use strict";(self.webpackChunk_postman_app_renderer=self.webpackChunk_postman_app_renderer||[]).push([[75],{"./collaboration/components/access-request/ApprovalPage.js":function(e,t,r){r.r(t);var s=r("../../node_modules/react/index.js"),o=r("./collaboration/services/AccessRequestService.js"),a=r("./js/services/NavigationService.js"),c=r("./js/navigation/active-mode/constants.js"),n=r("./js/components/base/LoadingIndicator.js"),i=r("./js/stores/CurrentUserStore.js"),l=r("./js/stores/StoreManager.js"),u=r("./js/stores/SyncStatusStore.js"),d=r("../../node_modules/mobx/lib/mobx.module.js"),p=r("./collaboration/constants/accessRequests.js"),m=r("../../node_modules/@postman/aether/esmLib/src/components/Toast/ToastManager.js"),y=r("./collaboration/workspace/components/common/PlanUpgradeButton.tsx"),f=r("./node_modules/lodash/lodash.js");t.default=({controller:e})=>{const[t,r]=(0,s.useState)(!1),v=(0,l.resolveStoreInstance)(u.default),{addToast:h}=(0,m.default)();return(0,s.useEffect)((()=>{const t=(0,d.reaction)((()=>(0,l.resolveStoreInstance)(i.default).teamId),(n=>{n&&((async e=>{r(!0);try{await v.onSyncAvailable();let t=await o.default.approve(e),{createdBy:s,modelName:n,model:u,displayNameForRole:d}=t||{},p=(0,l.resolveStoreInstance)(i.default).teamMembers.get(s)||{},m=(p.name||p.username||p.email,"Request approved");pm.toasts.success(m)}catch(e){let t=f.get(e,"error.name",""),r=p.ACCESS_REQUEST_ERROR_MAP[t]||{errorTitle:"Unable to approve request",errorMessage:"Whoops! It looks like you cannot approve this request."};"teamMemberSlotsFull"===t&&(r.errorMessage=s.createElement(s.Fragment,null,"Your team is full. "," ",s.createElement(y.default,{analyticsLabel:"rfa_approve_upgrade_email"})," ","to add more team members.")),h({title:r.errorTitle,status:r.status||"error",description:r.errorMessage||"Error occurred while approving access request",isPersistent:r.isToastPersistent})}finally{r(!1),a.default.transitionTo(c.HOME)}})(e.queryParams.code),t&&t())}),{fireImmediately:!0});return()=>{t&&t()}}),[]),s.createElement(n.default,null)}},"./collaboration/controllers/AccessRequestPageController.js":function(e,t,r){r.r(t);var s=r("./appsdk/pages/BasePageController.js");class o extends s.default{didActivate({queryParams:e}){this.queryParams=e}}t.default=o},"./collaboration/services/AccessRequestService.js":function(e,t,r){r.r(t);var s=r("./node_modules/lodash/lodash.js"),o=r.n(s),a=r("./js/modules/services/RemoteSyncRequestService.js"),c=r("./js/utils/PostmanGatewayService.js"),n=r("./collaboration/workspace/utils/Workspace.ts");const i={approve:async e=>{if(!e)return Promise.reject(new Error("AccessRequestService~approve: Required param not send, code missing"));try{const t=await a.default.request("/ws/proxy",{method:"post",data:{path:`/access-requests/${e}/approve`,service:"collaboration",method:"post"}});return t.body&&t.body.data}catch(e){return pm.logger.warn("AccessRequestService~approve: Failed to approve request",e),Promise.reject(e)}},fetchCreated:async({entityId:e,entityType:t})=>{if(!e||!t)return Promise.reject(new Error("AccessRequestService~fetchCreated: Required params are missing"));try{const r=await a.default.request("/ws/proxy",{method:"post",data:{path:"/access-requests",service:"collaboration",method:"get",query:{model:t,modelId:e}}});return o().get(r,"body.data")}catch(e){return pm.logger.warn("AccessRequestService~fetchCreated: Failed to fetch created access requests",e),Promise.reject(e)}},create:async({approverId:e,role:t,entityType:r,entityId:s,context:c})=>{if(!(s&&r&&e&&t&&c))return Promise.reject(new Error("AccessRequestService~create: Required params are missing"));const n={model:r,modelId:s,context:c,approvers:[{type:"user",id:e}],role:t};try{const e=await a.default.request("/ws/proxy",{method:"post",data:{path:"/access-requests/create",service:"collaboration",method:"post",body:n}});return o().get(e,"body.data")}catch(e){return pm.logger.warn("AccessRequestService~create: Failed to create request for access",e),Promise.reject(e)}},fetchRequestApprovers:async({entityId:e,entityType:t})=>{if(!e||!t)return Promise.reject(new Error("AccessRequestService~fetchRequestApprovers: Required params are missing"));const r={"filter.objectType":t,"filter.objectId":e,"filter.permission":`UPDATE_${o().toUpper(o().snakeCase(t))}_ROLES`,"filter.entityTypes":"user,group"},s=n.default.convertToStringParams(r);try{const e=await a.default.request("/ws/proxy",{method:"post",data:{path:`/api/v1/entities?${s}`,service:"acs",method:"get"}});return o().get(e,"body")}catch(e){return pm.logger.warn("AccessRequestService~fetchRequestApprovers: Failed to fetch request approvers of model",e),Promise.reject(e)}},fetchUsersRoles:async({entityId:e,entityType:t})=>{if(!e||!t)return Promise.reject(new Error("AccessRequestService~fetchUsersRoles: Required params are missing"));const r={item:{objectType:t,objectId:e,entityType:["user"]}};try{const e=await a.default.request("/ws/proxy",{method:"post",data:{path:"/api/roles/list-by-object",service:"acs",method:"post",body:r}});return{roles:{user:i.formatRoles(o().get(e,"body.listing.user",{}))}}}catch(e){return pm.logger.warn("AccessRequestService~fetchUsersRoles: Failed to fetch users roles of model",e),Promise.reject(e)}},fetchRoles:async e=>{if(!e)return Promise.reject(new Error("AccessRequestService~fetchRoles: Required params are missing"));try{return(await c.default.request("/ws/proxy",{method:"post",body:{path:"/api/roles/list/by-objects",service:"acs",method:"post",body:{objects:[e]},query:{permissions:!1,populate:!0,type:"all"}}},{parsedResponse:!0,transformRequestJson:!0})).body}catch(e){return pm.logger.warn("AccessRequestService~fetchRoles: Failed to fetch roles for model",e),Promise.reject(e)}},formatRoles:e=>{if(!e)return pm.logger.warn("AccessRequestService~formatRoles: Required params are missing"),{};return o().reduce(e,((e,t,r)=>(e[r]=t.roles||[],e)),{})}};t.default=i}}]);